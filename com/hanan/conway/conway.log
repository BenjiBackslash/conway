Conway __nit__
{(0, 0): True, (1, 0): True, (2, 0): True, (2, -1): True, (1, -2): True}
play starts
checking out live cell (0,0)
neighbours set:
(0, 1)
(-1, 1)
(0, 0)
(-1, 0)
(-1, -1)
(0, -1)
(1, 0)
(1, -1)
(1, 1)
united set : {(0, 1), (-1, 1), (0, 0), (-1, 0), (-1, -1), (0, -1), (1, 0), (1, -1), (1, 1)}
checking out live cell (1,0)
neighbours set:
(0, 1)
(0, 0)
(2, -1)
(2, 1)
(2, 0)
(0, -1)
(1, 0)
(1, -1)
(1, 1)
united set : {(0, 1), (0, 0), (2, -1), (2, 1), (2, 0), (0, -1), (1, 0), (1, -1), (1, 1)}
checking out live cell (2,0)
neighbours set:
(3, 0)
(2, -1)
(3, 1)
(3, -1)
(2, 1)
(2, 0)
(1, 0)
(1, -1)
(1, 1)
united set : {(3, 0), (2, -1), (3, 1), (3, -1), (2, 1), (2, 0), (1, 0), (1, -1), (1, 1)}
checking out live cell (2,-1)
neighbours set:
(3, 0)
(2, -1)
(2, -2)
(3, -2)
(3, -1)
(2, 0)
(1, -1)
(1, 0)
(1, -2)
united set : {(3, 0), (2, -1), (2, -2), (3, -2), (3, -1), (2, 0), (1, -1), (1, 0), (1, -2)}
checking out live cell (1,-2)
neighbours set:
(2, -3)
(2, -2)
(2, -1)
(0, -2)
(1, -2)
(0, -1)
(1, -1)
(1, -3)
(0, -3)
united set : {(2, -3), (2, -2), (2, -1), (0, -2), (1, -2), (0, -1), (1, -1), (1, -3), (0, -3)}
process set : {(-1, 0), (3, 0), (2, 1), (0, -2), (1, -1), (1, -2), (-1, 1), (2, -3), (-1, -1), (1, -3), (1, 1), (0, 0), (2, -1), (2, -2), (1, 0), (0, -3), (0, 1), (3, 1), (3, -1), (3, -2), (2, 0), (0, -1)}
checking cell in (-1,0)
neighbour (0,0) is alive
determine state for Dead cell (-1,0) with 1 lively lovely neighbours
(-1,0) will be Dead in the next generation
checking cell in (3,0)
neighbour (2,-1) is alive
neighbour (2,0) is alive
determine state for Dead cell (3,0) with 2 lively lovely neighbours
(3,0) will be Dead in the next generation
checking cell in (2,1)
neighbour (1,0) is alive
neighbour (2,0) is alive
determine state for Dead cell (2,1) with 2 lively lovely neighbours
(2,1) will be Dead in the next generation
checking cell in (0,-2)
neighbour (1,-2) is alive
determine state for Dead cell (0,-2) with 1 lively lovely neighbours
(0,-2) will be Dead in the next generation
checking cell in (1,-1)
neighbour (1,-2) is alive
neighbour (2,-1) is alive
neighbour (0,0) is alive
neighbour (1,0) is alive
neighbour (2,0) is alive
determine state for Dead cell (1,-1) with 5 lively lovely neighbours
(1,-1) will be Dead in the next generation
checking cell in (1,-2)
neighbour (2,-1) is alive
determine state for Live cell (1,-2) with 1 lively lovely neighbours
(1,-2) will be Dead in the next generation
checking cell in (-1,1)
neighbour (0,0) is alive
determine state for Dead cell (-1,1) with 1 lively lovely neighbours
(-1,1) will be Dead in the next generation
checking cell in (2,-3)
neighbour (1,-2) is alive
determine state for Dead cell (2,-3) with 1 lively lovely neighbours
(2,-3) will be Dead in the next generation
checking cell in (-1,-1)
neighbour (0,0) is alive
determine state for Dead cell (-1,-1) with 1 lively lovely neighbours
(-1,-1) will be Dead in the next generation
checking cell in (1,-3)
neighbour (1,-2) is alive
determine state for Dead cell (1,-3) with 1 lively lovely neighbours
(1,-3) will be Dead in the next generation
checking cell in (1,1)
neighbour (0,0) is alive
neighbour (1,0) is alive
neighbour (2,0) is alive
determine state for Dead cell (1,1) with 3 lively lovely neighbours
(1,1) will be Live in the next generation
checking cell in (0,0)
neighbour (1,0) is alive
determine state for Live cell (0,0) with 1 lively lovely neighbours
(0,0) will be Dead in the next generation
checking cell in (2,-1)
neighbour (1,-2) is alive
neighbour (1,0) is alive
neighbour (2,0) is alive
determine state for Live cell (2,-1) with 3 lively lovely neighbours
(2,-1) will be Live in the next generation
checking cell in (2,-2)
neighbour (1,-2) is alive
neighbour (2,-1) is alive
determine state for Dead cell (2,-2) with 2 lively lovely neighbours
(2,-2) will be Dead in the next generation
checking cell in (1,0)
neighbour (2,-1) is alive
neighbour (0,0) is alive
neighbour (2,0) is alive
determine state for Live cell (1,0) with 3 lively lovely neighbours
(1,0) will be Live in the next generation
checking cell in (0,-3)
neighbour (1,-2) is alive
determine state for Dead cell (0,-3) with 1 lively lovely neighbours
(0,-3) will be Dead in the next generation
checking cell in (0,1)
neighbour (0,0) is alive
neighbour (1,0) is alive
determine state for Dead cell (0,1) with 2 lively lovely neighbours
(0,1) will be Dead in the next generation
checking cell in (3,1)
neighbour (2,0) is alive
determine state for Dead cell (3,1) with 1 lively lovely neighbours
(3,1) will be Dead in the next generation
checking cell in (3,-1)
neighbour (2,-1) is alive
neighbour (2,0) is alive
determine state for Dead cell (3,-1) with 2 lively lovely neighbours
(3,-1) will be Dead in the next generation
checking cell in (3,-2)
neighbour (2,-1) is alive
determine state for Dead cell (3,-2) with 1 lively lovely neighbours
(3,-2) will be Dead in the next generation
checking cell in (2,0)
neighbour (2,-1) is alive
neighbour (1,0) is alive
determine state for Live cell (2,0) with 2 lively lovely neighbours
(2,0) will be Live in the next generation
checking cell in (0,-1)
neighbour (1,-2) is alive
neighbour (0,0) is alive
neighbour (1,0) is alive
determine state for Dead cell (0,-1) with 3 lively lovely neighbours
(0,-1) will be Live in the next generation
play starts
checking out live cell (1,1)
neighbours set:
(0, 1)
(1, 2)
(0, 0)
(0, 2)
(2, 1)
(2, 0)
(2, 2)
(1, 0)
(1, 1)
united set : {(0, 1), (1, 2), (0, 0), (0, 2), (2, 1), (2, 0), (2, 2), (1, 0), (1, 1)}
checking out live cell (2,-1)
neighbours set:
(3, 0)
(2, -1)
(2, -2)
(3, -2)
(3, -1)
(2, 0)
(1, -1)
(1, 0)
(1, -2)
united set : {(3, 0), (2, -1), (2, -2), (3, -2), (3, -1), (2, 0), (1, -1), (1, 0), (1, -2)}
checking out live cell (1,0)
neighbours set:
(0, 1)
(0, 0)
(2, -1)
(2, 1)
(2, 0)
(0, -1)
(1, 0)
(1, -1)
(1, 1)
united set : {(0, 1), (0, 0), (2, -1), (2, 1), (2, 0), (0, -1), (1, 0), (1, -1), (1, 1)}
checking out live cell (2,0)
neighbours set:
(3, 0)
(2, -1)
(3, 1)
(3, -1)
(2, 1)
(2, 0)
(1, 0)
(1, -1)
(1, 1)
united set : {(3, 0), (2, -1), (3, 1), (3, -1), (2, 1), (2, 0), (1, 0), (1, -1), (1, 1)}
checking out live cell (0,-1)
neighbours set:
(0, 0)
(-1, 0)
(-1, -2)
(0, -1)
(1, -1)
(-1, -1)
(0, -2)
(1, 0)
(1, -2)
united set : {(0, 0), (-1, 0), (-1, -2), (0, -1), (1, -1), (-1, -1), (0, -2), (1, 0), (1, -2)}
process set : {(-1, 0), (3, 0), (2, 1), (0, -2), (1, -1), (1, -2), (1, 2), (2, 2), (-1, -2), (-1, -1), (1, 1), (0, 0), (2, -1), (2, -2), (1, 0), (0, 1), (3, 1), (3, -2), (3, -1), (2, 0), (0, -1), (0, 2)}
checking cell in (-1,0)
neighbour (0,-1) is alive
determine state for Dead cell (-1,0) with 1 lively lovely neighbours
(-1,0) will be Dead in the next generation
checking cell in (3,0)
neighbour (2,-1) is alive
neighbour (2,0) is alive
determine state for Dead cell (3,0) with 2 lively lovely neighbours
(3,0) will be Dead in the next generation
checking cell in (2,1)
neighbour (1,0) is alive
neighbour (2,0) is alive
neighbour (1,1) is alive
determine state for Dead cell (2,1) with 3 lively lovely neighbours
(2,1) will be Live in the next generation
checking cell in (0,-2)
neighbour (0,-1) is alive
determine state for Dead cell (0,-2) with 1 lively lovely neighbours
(0,-2) will be Dead in the next generation
checking cell in (1,-1)
neighbour (0,-1) is alive
neighbour (2,-1) is alive
neighbour (1,0) is alive
neighbour (2,0) is alive
determine state for Dead cell (1,-1) with 4 lively lovely neighbours
(1,-1) will be Dead in the next generation
checking cell in (1,-2)
neighbour (0,-1) is alive
neighbour (2,-1) is alive
determine state for Dead cell (1,-2) with 2 lively lovely neighbours
(1,-2) will be Dead in the next generation
checking cell in (1,2)
neighbour (1,1) is alive
determine state for Dead cell (1,2) with 1 lively lovely neighbours
(1,2) will be Dead in the next generation
checking cell in (2,2)
neighbour (1,1) is alive
determine state for Dead cell (2,2) with 1 lively lovely neighbours
(2,2) will be Dead in the next generation
checking cell in (-1,-2)
neighbour (0,-1) is alive
determine state for Dead cell (-1,-2) with 1 lively lovely neighbours
(-1,-2) will be Dead in the next generation
checking cell in (-1,-1)
neighbour (0,-1) is alive
determine state for Dead cell (-1,-1) with 1 lively lovely neighbours
(-1,-1) will be Dead in the next generation
checking cell in (1,1)
neighbour (1,0) is alive
neighbour (2,0) is alive
determine state for Live cell (1,1) with 2 lively lovely neighbours
(1,1) will be Live in the next generation
checking cell in (0,0)
neighbour (0,-1) is alive
neighbour (1,0) is alive
neighbour (1,1) is alive
determine state for Dead cell (0,0) with 3 lively lovely neighbours
(0,0) will be Live in the next generation
checking cell in (2,-1)
neighbour (1,0) is alive
neighbour (2,0) is alive
determine state for Live cell (2,-1) with 2 lively lovely neighbours
(2,-1) will be Live in the next generation
checking cell in (2,-2)
neighbour (2,-1) is alive
determine state for Dead cell (2,-2) with 1 lively lovely neighbours
(2,-2) will be Dead in the next generation
checking cell in (1,0)
neighbour (0,-1) is alive
neighbour (2,-1) is alive
neighbour (2,0) is alive
neighbour (1,1) is alive
determine state for Live cell (1,0) with 4 lively lovely neighbours
(1,0) will be Dead in the next generation
checking cell in (0,1)
neighbour (1,0) is alive
neighbour (1,1) is alive
determine state for Dead cell (0,1) with 2 lively lovely neighbours
(0,1) will be Dead in the next generation
checking cell in (3,1)
neighbour (2,0) is alive
determine state for Dead cell (3,1) with 1 lively lovely neighbours
(3,1) will be Dead in the next generation
checking cell in (3,-2)
neighbour (2,-1) is alive
determine state for Dead cell (3,-2) with 1 lively lovely neighbours
(3,-2) will be Dead in the next generation
checking cell in (3,-1)
neighbour (2,-1) is alive
neighbour (2,0) is alive
determine state for Dead cell (3,-1) with 2 lively lovely neighbours
(3,-1) will be Dead in the next generation
checking cell in (2,0)
neighbour (2,-1) is alive
neighbour (1,0) is alive
neighbour (1,1) is alive
determine state for Live cell (2,0) with 3 lively lovely neighbours
(2,0) will be Live in the next generation
checking cell in (0,-1)
neighbour (1,0) is alive
determine state for Live cell (0,-1) with 1 lively lovely neighbours
(0,-1) will be Dead in the next generation
checking cell in (0,2)
neighbour (1,1) is alive
determine state for Dead cell (0,2) with 1 lively lovely neighbours
(0,2) will be Dead in the next generation
play starts
checking out live cell (2,1)
neighbours set:
(1, 2)
(3, 2)
(3, 0)
(3, 1)
(2, 1)
(2, 0)
(2, 2)
(1, 0)
(1, 1)
united set : {(1, 2), (3, 2), (3, 0), (3, 1), (2, 1), (2, 0), (2, 2), (1, 0), (1, 1)}
checking out live cell (1,1)
neighbours set:
(0, 1)
(1, 2)
(0, 0)
(0, 2)
(2, 1)
(2, 0)
(2, 2)
(1, 0)
(1, 1)
united set : {(0, 1), (1, 2), (0, 0), (0, 2), (2, 1), (2, 0), (2, 2), (1, 0), (1, 1)}
checking out live cell (0,0)
neighbours set:
(0, 1)
(-1, 1)
(0, 0)
(-1, 0)
(-1, -1)
(0, -1)
(1, 0)
(1, -1)
(1, 1)
united set : {(0, 1), (-1, 1), (0, 0), (-1, 0), (-1, -1), (0, -1), (1, 0), (1, -1), (1, 1)}
checking out live cell (2,-1)
neighbours set:
(3, 0)
(2, -1)
(2, -2)
(3, -2)
(3, -1)
(2, 0)
(1, -1)
(1, 0)
(1, -2)
united set : {(3, 0), (2, -1), (2, -2), (3, -2), (3, -1), (2, 0), (1, -1), (1, 0), (1, -2)}
checking out live cell (2,0)
neighbours set:
(3, 0)
(2, -1)
(3, 1)
(3, -1)
(2, 1)
(2, 0)
(1, 0)
(1, -1)
(1, 1)
united set : {(3, 0), (2, -1), (3, 1), (3, -1), (2, 1), (2, 0), (1, 0), (1, -1), (1, 1)}
process set : {(-1, 0), (3, 0), (2, 1), (1, -1), (1, -2), (1, 2), (-1, 1), (-1, -1), (2, 2), (1, 1), (3, 2), (0, 0), (2, -1), (2, -2), (1, 0), (0, 1), (3, 1), (3, -2), (3, -1), (2, 0), (0, -1), (0, 2)}
checking cell in (-1,0)
neighbour (0,0) is alive
determine state for Dead cell (-1,0) with 1 lively lovely neighbours
(-1,0) will be Dead in the next generation
checking cell in (3,0)
neighbour (2,-1) is alive
neighbour (2,0) is alive
neighbour (2,1) is alive
determine state for Dead cell (3,0) with 3 lively lovely neighbours
(3,0) will be Live in the next generation
checking cell in (2,1)
neighbour (2,0) is alive
neighbour (1,1) is alive
determine state for Live cell (2,1) with 2 lively lovely neighbours
(2,1) will be Live in the next generation
checking cell in (1,-1)
neighbour (2,-1) is alive
neighbour (0,0) is alive
neighbour (2,0) is alive
determine state for Dead cell (1,-1) with 3 lively lovely neighbours
(1,-1) will be Live in the next generation
checking cell in (1,-2)
neighbour (2,-1) is alive
determine state for Dead cell (1,-2) with 1 lively lovely neighbours
(1,-2) will be Dead in the next generation
checking cell in (1,2)
neighbour (1,1) is alive
neighbour (2,1) is alive
determine state for Dead cell (1,2) with 2 lively lovely neighbours
(1,2) will be Dead in the next generation
checking cell in (-1,1)
neighbour (0,0) is alive
determine state for Dead cell (-1,1) with 1 lively lovely neighbours
(-1,1) will be Dead in the next generation
checking cell in (-1,-1)
neighbour (0,0) is alive
determine state for Dead cell (-1,-1) with 1 lively lovely neighbours
(-1,-1) will be Dead in the next generation
checking cell in (2,2)
neighbour (1,1) is alive
neighbour (2,1) is alive
determine state for Dead cell (2,2) with 2 lively lovely neighbours
(2,2) will be Dead in the next generation
checking cell in (1,1)
neighbour (0,0) is alive
neighbour (2,0) is alive
neighbour (2,1) is alive
determine state for Live cell (1,1) with 3 lively lovely neighbours
(1,1) will be Live in the next generation
checking cell in (3,2)
neighbour (2,1) is alive
determine state for Dead cell (3,2) with 1 lively lovely neighbours
(3,2) will be Dead in the next generation
checking cell in (0,0)
neighbour (1,1) is alive
determine state for Live cell (0,0) with 1 lively lovely neighbours
(0,0) will be Dead in the next generation
checking cell in (2,-1)
neighbour (2,0) is alive
determine state for Live cell (2,-1) with 1 lively lovely neighbours
(2,-1) will be Dead in the next generation
checking cell in (2,-2)
neighbour (2,-1) is alive
determine state for Dead cell (2,-2) with 1 lively lovely neighbours
(2,-2) will be Dead in the next generation
checking cell in (1,0)
neighbour (2,-1) is alive
neighbour (0,0) is alive
neighbour (2,0) is alive
neighbour (1,1) is alive
neighbour (2,1) is alive
determine state for Dead cell (1,0) with 5 lively lovely neighbours
(1,0) will be Dead in the next generation
checking cell in (0,1)
neighbour (0,0) is alive
neighbour (1,1) is alive
determine state for Dead cell (0,1) with 2 lively lovely neighbours
(0,1) will be Dead in the next generation
checking cell in (3,1)
neighbour (2,0) is alive
neighbour (2,1) is alive
determine state for Dead cell (3,1) with 2 lively lovely neighbours
(3,1) will be Dead in the next generation
checking cell in (3,-2)
neighbour (2,-1) is alive
determine state for Dead cell (3,-2) with 1 lively lovely neighbours
(3,-2) will be Dead in the next generation
checking cell in (3,-1)
neighbour (2,-1) is alive
neighbour (2,0) is alive
determine state for Dead cell (3,-1) with 2 lively lovely neighbours
(3,-1) will be Dead in the next generation
checking cell in (2,0)
neighbour (2,-1) is alive
neighbour (1,1) is alive
neighbour (2,1) is alive
determine state for Live cell (2,0) with 3 lively lovely neighbours
(2,0) will be Live in the next generation
checking cell in (0,-1)
neighbour (0,0) is alive
determine state for Dead cell (0,-1) with 1 lively lovely neighbours
(0,-1) will be Dead in the next generation
checking cell in (0,2)
neighbour (1,1) is alive
determine state for Dead cell (0,2) with 1 lively lovely neighbours
(0,2) will be Dead in the next generation
play starts
checking out live cell (3,0)
neighbours set:
(3, 0)
(2, -1)
(3, 1)
(3, -1)
(2, 1)
(2, 0)
(4, 1)
(4, -1)
(4, 0)
united set : {(3, 0), (2, -1), (3, 1), (3, -1), (2, 1), (2, 0), (4, 1), (4, -1), (4, 0)}
checking out live cell (2,1)
neighbours set:
(1, 2)
(3, 2)
(3, 0)
(3, 1)
(2, 1)
(2, 0)
(2, 2)
(1, 0)
(1, 1)
united set : {(1, 2), (3, 2), (3, 0), (3, 1), (2, 1), (2, 0), (2, 2), (1, 0), (1, 1)}
checking out live cell (1,-1)
neighbours set:
(0, 0)
(2, -2)
(2, -1)
(2, 0)
(1, -2)
(0, -1)
(0, -2)
(1, 0)
(1, -1)
united set : {(0, 0), (2, -2), (2, -1), (2, 0), (1, -2), (0, -1), (0, -2), (1, 0), (1, -1)}
checking out live cell (1,1)
neighbours set:
(0, 1)
(1, 2)
(0, 0)
(0, 2)
(2, 1)
(2, 0)
(2, 2)
(1, 0)
(1, 1)
united set : {(0, 1), (1, 2), (0, 0), (0, 2), (2, 1), (2, 0), (2, 2), (1, 0), (1, 1)}
checking out live cell (2,0)
neighbours set:
(3, 0)
(2, -1)
(3, 1)
(3, -1)
(2, 1)
(2, 0)
(1, 0)
(1, -1)
(1, 1)
united set : {(3, 0), (2, -1), (3, 1), (3, -1), (2, 1), (2, 0), (1, 0), (1, -1), (1, 1)}
process set : {(3, 0), (2, 1), (0, -1), (1, -2), (4, -1), (1, -1), (4, 0), (1, 2), (2, 2), (4, 1), (1, 1), (3, 2), (0, 0), (2, -1), (2, -2), (1, 0), (0, 1), (3, 1), (3, -1), (2, 0), (0, -2), (0, 2)}
checking cell in (3,0)
neighbour (2,0) is alive
neighbour (2,1) is alive
determine state for Live cell (3,0) with 2 lively lovely neighbours
(3,0) will be Live in the next generation
checking cell in (2,1)
neighbour (2,0) is alive
neighbour (3,0) is alive
neighbour (1,1) is alive
determine state for Live cell (2,1) with 3 lively lovely neighbours
(2,1) will be Live in the next generation
checking cell in (0,-1)
neighbour (1,-1) is alive
determine state for Dead cell (0,-1) with 1 lively lovely neighbours
(0,-1) will be Dead in the next generation
checking cell in (1,-2)
neighbour (1,-1) is alive
determine state for Dead cell (1,-2) with 1 lively lovely neighbours
(1,-2) will be Dead in the next generation
checking cell in (4,-1)
neighbour (3,0) is alive
determine state for Dead cell (4,-1) with 1 lively lovely neighbours
(4,-1) will be Dead in the next generation
checking cell in (1,-1)
neighbour (2,0) is alive
determine state for Live cell (1,-1) with 1 lively lovely neighbours
(1,-1) will be Dead in the next generation
checking cell in (4,0)
neighbour (3,0) is alive
determine state for Dead cell (4,0) with 1 lively lovely neighbours
(4,0) will be Dead in the next generation
checking cell in (1,2)
neighbour (1,1) is alive
neighbour (2,1) is alive
determine state for Dead cell (1,2) with 2 lively lovely neighbours
(1,2) will be Dead in the next generation
checking cell in (2,2)
neighbour (1,1) is alive
neighbour (2,1) is alive
determine state for Dead cell (2,2) with 2 lively lovely neighbours
(2,2) will be Dead in the next generation
checking cell in (4,1)
neighbour (3,0) is alive
determine state for Dead cell (4,1) with 1 lively lovely neighbours
(4,1) will be Dead in the next generation
checking cell in (1,1)
neighbour (2,0) is alive
neighbour (2,1) is alive
determine state for Live cell (1,1) with 2 lively lovely neighbours
(1,1) will be Live in the next generation
checking cell in (3,2)
neighbour (2,1) is alive
determine state for Dead cell (3,2) with 1 lively lovely neighbours
(3,2) will be Dead in the next generation
checking cell in (0,0)
neighbour (1,-1) is alive
neighbour (1,1) is alive
determine state for Dead cell (0,0) with 2 lively lovely neighbours
(0,0) will be Dead in the next generation
checking cell in (2,-1)
neighbour (1,-1) is alive
neighbour (2,0) is alive
neighbour (3,0) is alive
determine state for Dead cell (2,-1) with 3 lively lovely neighbours
(2,-1) will be Live in the next generation
checking cell in (2,-2)
neighbour (1,-1) is alive
determine state for Dead cell (2,-2) with 1 lively lovely neighbours
(2,-2) will be Dead in the next generation
checking cell in (1,0)
neighbour (1,-1) is alive
neighbour (2,0) is alive
neighbour (1,1) is alive
neighbour (2,1) is alive
determine state for Dead cell (1,0) with 4 lively lovely neighbours
(1,0) will be Dead in the next generation
checking cell in (0,1)
neighbour (1,1) is alive
determine state for Dead cell (0,1) with 1 lively lovely neighbours
(0,1) will be Dead in the next generation
checking cell in (3,1)
neighbour (2,0) is alive
neighbour (3,0) is alive
neighbour (2,1) is alive
determine state for Dead cell (3,1) with 3 lively lovely neighbours
(3,1) will be Live in the next generation
checking cell in (3,-1)
neighbour (2,0) is alive
neighbour (3,0) is alive
determine state for Dead cell (3,-1) with 2 lively lovely neighbours
(3,-1) will be Dead in the next generation
checking cell in (2,0)
neighbour (1,-1) is alive
neighbour (3,0) is alive
neighbour (1,1) is alive
neighbour (2,1) is alive
determine state for Live cell (2,0) with 4 lively lovely neighbours
(2,0) will be Dead in the next generation
checking cell in (0,-2)
neighbour (1,-1) is alive
determine state for Dead cell (0,-2) with 1 lively lovely neighbours
(0,-2) will be Dead in the next generation
checking cell in (0,2)
neighbour (1,1) is alive
determine state for Dead cell (0,2) with 1 lively lovely neighbours
(0,2) will be Dead in the next generation
play starts
checking out live cell (3,0)
neighbours set:
(3, 0)
(2, -1)
(3, 1)
(3, -1)
(2, 1)
(2, 0)
(4, 1)
(4, -1)
(4, 0)
united set : {(3, 0), (2, -1), (3, 1), (3, -1), (2, 1), (2, 0), (4, 1), (4, -1), (4, 0)}
checking out live cell (2,1)
neighbours set:
(1, 2)
(3, 2)
(3, 0)
(3, 1)
(2, 1)
(2, 0)
(2, 2)
(1, 0)
(1, 1)
united set : {(1, 2), (3, 2), (3, 0), (3, 1), (2, 1), (2, 0), (2, 2), (1, 0), (1, 1)}
checking out live cell (1,1)
neighbours set:
(0, 1)
(1, 2)
(0, 0)
(0, 2)
(2, 1)
(2, 0)
(2, 2)
(1, 0)
(1, 1)
united set : {(0, 1), (1, 2), (0, 0), (0, 2), (2, 1), (2, 0), (2, 2), (1, 0), (1, 1)}
checking out live cell (2,-1)
neighbours set:
(3, 0)
(2, -1)
(2, -2)
(3, -2)
(3, -1)
(2, 0)
(1, -1)
(1, 0)
(1, -2)
united set : {(3, 0), (2, -1), (2, -2), (3, -2), (3, -1), (2, 0), (1, -1), (1, 0), (1, -2)}
checking out live cell (3,1)
neighbours set:
(3, 2)
(3, 0)
(3, 1)
(2, 1)
(2, 0)
(2, 2)
(4, 2)
(4, 1)
(4, 0)
united set : {(3, 2), (3, 0), (3, 1), (2, 1), (2, 0), (2, 2), (4, 2), (4, 1), (4, 0)}
process set : {(3, 0), (2, 1), (1, -1), (4, -1), (1, -2), (4, 0), (1, 2), (2, 2), (4, 1), (1, 1), (3, 2), (0, 0), (2, -1), (2, -2), (4, 2), (1, 0), (0, 1), (3, 1), (3, -1), (3, -2), (2, 0), (0, 2)}
checking cell in (3,0)
neighbour (2,-1) is alive
neighbour (2,1) is alive
neighbour (3,1) is alive
determine state for Live cell (3,0) with 3 lively lovely neighbours
(3,0) will be Live in the next generation
checking cell in (2,1)
neighbour (3,0) is alive
neighbour (1,1) is alive
neighbour (3,1) is alive
determine state for Live cell (2,1) with 3 lively lovely neighbours
(2,1) will be Live in the next generation
checking cell in (1,-1)
neighbour (2,-1) is alive
determine state for Dead cell (1,-1) with 1 lively lovely neighbours
(1,-1) will be Dead in the next generation
checking cell in (4,-1)
neighbour (3,0) is alive
determine state for Dead cell (4,-1) with 1 lively lovely neighbours
(4,-1) will be Dead in the next generation
checking cell in (1,-2)
neighbour (2,-1) is alive
determine state for Dead cell (1,-2) with 1 lively lovely neighbours
(1,-2) will be Dead in the next generation
checking cell in (4,0)
neighbour (3,0) is alive
neighbour (3,1) is alive
determine state for Dead cell (4,0) with 2 lively lovely neighbours
(4,0) will be Dead in the next generation
checking cell in (1,2)
neighbour (1,1) is alive
neighbour (2,1) is alive
determine state for Dead cell (1,2) with 2 lively lovely neighbours
(1,2) will be Dead in the next generation
checking cell in (2,2)
neighbour (1,1) is alive
neighbour (2,1) is alive
neighbour (3,1) is alive
determine state for Dead cell (2,2) with 3 lively lovely neighbours
(2,2) will be Live in the next generation
checking cell in (4,1)
neighbour (3,0) is alive
neighbour (3,1) is alive
determine state for Dead cell (4,1) with 2 lively lovely neighbours
(4,1) will be Dead in the next generation
checking cell in (1,1)
neighbour (2,1) is alive
determine state for Live cell (1,1) with 1 lively lovely neighbours
(1,1) will be Dead in the next generation
checking cell in (3,2)
neighbour (2,1) is alive
neighbour (3,1) is alive
determine state for Dead cell (3,2) with 2 lively lovely neighbours
(3,2) will be Dead in the next generation
checking cell in (0,0)
neighbour (1,1) is alive
determine state for Dead cell (0,0) with 1 lively lovely neighbours
(0,0) will be Dead in the next generation
checking cell in (2,-1)
neighbour (3,0) is alive
determine state for Live cell (2,-1) with 1 lively lovely neighbours
(2,-1) will be Dead in the next generation
checking cell in (2,-2)
neighbour (2,-1) is alive
determine state for Dead cell (2,-2) with 1 lively lovely neighbours
(2,-2) will be Dead in the next generation
checking cell in (4,2)
neighbour (3,1) is alive
determine state for Dead cell (4,2) with 1 lively lovely neighbours
(4,2) will be Dead in the next generation
checking cell in (1,0)
neighbour (2,-1) is alive
neighbour (1,1) is alive
neighbour (2,1) is alive
determine state for Dead cell (1,0) with 3 lively lovely neighbours
(1,0) will be Live in the next generation
checking cell in (0,1)
neighbour (1,1) is alive
determine state for Dead cell (0,1) with 1 lively lovely neighbours
(0,1) will be Dead in the next generation
checking cell in (3,1)
neighbour (3,0) is alive
neighbour (2,1) is alive
determine state for Live cell (3,1) with 2 lively lovely neighbours
(3,1) will be Live in the next generation
checking cell in (3,-1)
neighbour (2,-1) is alive
neighbour (3,0) is alive
determine state for Dead cell (3,-1) with 2 lively lovely neighbours
(3,-1) will be Dead in the next generation
checking cell in (3,-2)
neighbour (2,-1) is alive
determine state for Dead cell (3,-2) with 1 lively lovely neighbours
(3,-2) will be Dead in the next generation
checking cell in (2,0)
neighbour (2,-1) is alive
neighbour (3,0) is alive
neighbour (1,1) is alive
neighbour (2,1) is alive
neighbour (3,1) is alive
determine state for Dead cell (2,0) with 5 lively lovely neighbours
(2,0) will be Dead in the next generation
checking cell in (0,2)
neighbour (1,1) is alive
determine state for Dead cell (0,2) with 1 lively lovely neighbours
(0,2) will be Dead in the next generation
play starts
checking out live cell (3,0)
neighbours set:
(3, 0)
(2, -1)
(3, 1)
(3, -1)
(2, 1)
(2, 0)
(4, 1)
(4, -1)
(4, 0)
united set : {(3, 0), (2, -1), (3, 1), (3, -1), (2, 1), (2, 0), (4, 1), (4, -1), (4, 0)}
checking out live cell (2,1)
neighbours set:
(1, 2)
(3, 2)
(3, 0)
(3, 1)
(2, 1)
(2, 0)
(2, 2)
(1, 0)
(1, 1)
united set : {(1, 2), (3, 2), (3, 0), (3, 1), (2, 1), (2, 0), (2, 2), (1, 0), (1, 1)}
checking out live cell (2,2)
neighbours set:
(1, 2)
(3, 2)
(1, 3)
(3, 3)
(3, 1)
(2, 1)
(2, 3)
(2, 2)
(1, 1)
united set : {(1, 2), (3, 2), (1, 3), (3, 3), (3, 1), (2, 1), (2, 3), (2, 2), (1, 1)}
checking out live cell (1,0)
neighbours set:
(0, 1)
(0, 0)
(2, -1)
(2, 1)
(2, 0)
(0, -1)
(1, 0)
(1, -1)
(1, 1)
united set : {(0, 1), (0, 0), (2, -1), (2, 1), (2, 0), (0, -1), (1, 0), (1, -1), (1, 1)}
checking out live cell (3,1)
neighbours set:
(3, 2)
(3, 0)
(3, 1)
(2, 1)
(2, 0)
(2, 2)
(4, 2)
(4, 1)
(4, 0)
united set : {(3, 2), (3, 0), (3, 1), (2, 1), (2, 0), (2, 2), (4, 2), (4, 1), (4, 0)}
process set : {(1, 3), (3, 0), (2, 1), (1, -1), (4, -1), (4, 0), (1, 2), (3, 3), (2, 2), (4, 1), (1, 1), (3, 2), (0, 0), (2, -1), (2, 3), (4, 2), (1, 0), (0, 1), (3, 1), (3, -1), (2, 0), (0, -1)}
checking cell in (1,3)
neighbour (2,2) is alive
determine state for Dead cell (1,3) with 1 lively lovely neighbours
(1,3) will be Dead in the next generation
checking cell in (3,0)
neighbour (2,1) is alive
neighbour (3,1) is alive
determine state for Live cell (3,0) with 2 lively lovely neighbours
(3,0) will be Live in the next generation
checking cell in (2,1)
neighbour (1,0) is alive
neighbour (3,0) is alive
neighbour (3,1) is alive
neighbour (2,2) is alive
determine state for Live cell (2,1) with 4 lively lovely neighbours
(2,1) will be Dead in the next generation
checking cell in (1,-1)
neighbour (1,0) is alive
determine state for Dead cell (1,-1) with 1 lively lovely neighbours
(1,-1) will be Dead in the next generation
checking cell in (4,-1)
neighbour (3,0) is alive
determine state for Dead cell (4,-1) with 1 lively lovely neighbours
(4,-1) will be Dead in the next generation
checking cell in (4,0)
neighbour (3,0) is alive
neighbour (3,1) is alive
determine state for Dead cell (4,0) with 2 lively lovely neighbours
(4,0) will be Dead in the next generation
checking cell in (1,2)
neighbour (2,1) is alive
neighbour (2,2) is alive
determine state for Dead cell (1,2) with 2 lively lovely neighbours
(1,2) will be Dead in the next generation
checking cell in (3,3)
neighbour (2,2) is alive
determine state for Dead cell (3,3) with 1 lively lovely neighbours
(3,3) will be Dead in the next generation
checking cell in (2,2)
neighbour (2,1) is alive
neighbour (3,1) is alive
determine state for Live cell (2,2) with 2 lively lovely neighbours
(2,2) will be Live in the next generation
checking cell in (4,1)
neighbour (3,0) is alive
neighbour (3,1) is alive
determine state for Dead cell (4,1) with 2 lively lovely neighbours
(4,1) will be Dead in the next generation
checking cell in (1,1)
neighbour (1,0) is alive
neighbour (2,1) is alive
neighbour (2,2) is alive
determine state for Dead cell (1,1) with 3 lively lovely neighbours
(1,1) will be Live in the next generation
checking cell in (3,2)
neighbour (2,1) is alive
neighbour (3,1) is alive
neighbour (2,2) is alive
determine state for Dead cell (3,2) with 3 lively lovely neighbours
(3,2) will be Live in the next generation
checking cell in (0,0)
neighbour (1,0) is alive
determine state for Dead cell (0,0) with 1 lively lovely neighbours
(0,0) will be Dead in the next generation
checking cell in (2,-1)
neighbour (1,0) is alive
neighbour (3,0) is alive
determine state for Dead cell (2,-1) with 2 lively lovely neighbours
(2,-1) will be Dead in the next generation
checking cell in (2,3)
neighbour (2,2) is alive
determine state for Dead cell (2,3) with 1 lively lovely neighbours
(2,3) will be Dead in the next generation
checking cell in (4,2)
neighbour (3,1) is alive
determine state for Dead cell (4,2) with 1 lively lovely neighbours
(4,2) will be Dead in the next generation
checking cell in (1,0)
neighbour (2,1) is alive
determine state for Live cell (1,0) with 1 lively lovely neighbours
(1,0) will be Dead in the next generation
checking cell in (0,1)
neighbour (1,0) is alive
determine state for Dead cell (0,1) with 1 lively lovely neighbours
(0,1) will be Dead in the next generation
checking cell in (3,1)
neighbour (3,0) is alive
neighbour (2,1) is alive
neighbour (2,2) is alive
determine state for Live cell (3,1) with 3 lively lovely neighbours
(3,1) will be Live in the next generation
checking cell in (3,-1)
neighbour (3,0) is alive
determine state for Dead cell (3,-1) with 1 lively lovely neighbours
(3,-1) will be Dead in the next generation
checking cell in (2,0)
neighbour (1,0) is alive
neighbour (3,0) is alive
neighbour (2,1) is alive
neighbour (3,1) is alive
determine state for Dead cell (2,0) with 4 lively lovely neighbours
(2,0) will be Dead in the next generation
checking cell in (0,-1)
neighbour (1,0) is alive
determine state for Dead cell (0,-1) with 1 lively lovely neighbours
(0,-1) will be Dead in the next generation
play starts
checking out live cell (3,0)
neighbours set:
(3, 0)
(2, -1)
(3, 1)
(3, -1)
(2, 1)
(2, 0)
(4, 1)
(4, -1)
(4, 0)
united set : {(3, 0), (2, -1), (3, 1), (3, -1), (2, 1), (2, 0), (4, 1), (4, -1), (4, 0)}
checking out live cell (2,2)
neighbours set:
(1, 2)
(3, 2)
(1, 3)
(3, 3)
(3, 1)
(2, 1)
(2, 3)
(2, 2)
(1, 1)
united set : {(1, 2), (3, 2), (1, 3), (3, 3), (3, 1), (2, 1), (2, 3), (2, 2), (1, 1)}
checking out live cell (1,1)
neighbours set:
(0, 1)
(1, 2)
(0, 0)
(0, 2)
(2, 1)
(2, 0)
(2, 2)
(1, 0)
(1, 1)
united set : {(0, 1), (1, 2), (0, 0), (0, 2), (2, 1), (2, 0), (2, 2), (1, 0), (1, 1)}
checking out live cell (3,2)
neighbours set:
(3, 2)
(3, 3)
(3, 1)
(2, 1)
(2, 3)
(4, 3)
(2, 2)
(4, 2)
(4, 1)
united set : {(3, 2), (3, 3), (3, 1), (2, 1), (2, 3), (4, 3), (2, 2), (4, 2), (4, 1)}
checking out live cell (3,1)
neighbours set:
(3, 2)
(3, 0)
(3, 1)
(2, 1)
(2, 0)
(2, 2)
(4, 2)
(4, 1)
(4, 0)
united set : {(3, 2), (3, 0), (3, 1), (2, 1), (2, 0), (2, 2), (4, 2), (4, 1), (4, 0)}
process set : {(1, 3), (3, 0), (2, 1), (4, -1), (4, 0), (1, 2), (3, 3), (2, 2), (4, 1), (1, 1), (3, 2), (0, 0), (2, -1), (2, 3), (4, 2), (1, 0), (0, 1), (3, 1), (3, -1), (2, 0), (4, 3), (0, 2)}
checking cell in (1,3)
neighbour (2,2) is alive
determine state for Dead cell (1,3) with 1 lively lovely neighbours
(1,3) will be Dead in the next generation
checking cell in (3,0)
neighbour (3,1) is alive
determine state for Live cell (3,0) with 1 lively lovely neighbours
(3,0) will be Dead in the next generation
checking cell in (2,1)
neighbour (3,0) is alive
neighbour (1,1) is alive
neighbour (3,1) is alive
neighbour (2,2) is alive
neighbour (3,2) is alive
determine state for Dead cell (2,1) with 5 lively lovely neighbours
(2,1) will be Dead in the next generation
checking cell in (4,-1)
neighbour (3,0) is alive
determine state for Dead cell (4,-1) with 1 lively lovely neighbours
(4,-1) will be Dead in the next generation
checking cell in (4,0)
neighbour (3,0) is alive
neighbour (3,1) is alive
determine state for Dead cell (4,0) with 2 lively lovely neighbours
(4,0) will be Dead in the next generation
checking cell in (1,2)
neighbour (1,1) is alive
neighbour (2,2) is alive
determine state for Dead cell (1,2) with 2 lively lovely neighbours
(1,2) will be Dead in the next generation
checking cell in (3,3)
neighbour (2,2) is alive
neighbour (3,2) is alive
determine state for Dead cell (3,3) with 2 lively lovely neighbours
(3,3) will be Dead in the next generation
checking cell in (2,2)
neighbour (1,1) is alive
neighbour (3,1) is alive
neighbour (3,2) is alive
determine state for Live cell (2,2) with 3 lively lovely neighbours
(2,2) will be Live in the next generation
checking cell in (4,1)
neighbour (3,0) is alive
neighbour (3,1) is alive
neighbour (3,2) is alive
determine state for Dead cell (4,1) with 3 lively lovely neighbours
(4,1) will be Live in the next generation
checking cell in (1,1)
neighbour (2,2) is alive
determine state for Live cell (1,1) with 1 lively lovely neighbours
(1,1) will be Dead in the next generation
checking cell in (3,2)
neighbour (3,1) is alive
neighbour (2,2) is alive
determine state for Live cell (3,2) with 2 lively lovely neighbours
(3,2) will be Live in the next generation
checking cell in (0,0)
neighbour (1,1) is alive
determine state for Dead cell (0,0) with 1 lively lovely neighbours
(0,0) will be Dead in the next generation
checking cell in (2,-1)
neighbour (3,0) is alive
determine state for Dead cell (2,-1) with 1 lively lovely neighbours
(2,-1) will be Dead in the next generation
checking cell in (2,3)
neighbour (2,2) is alive
neighbour (3,2) is alive
determine state for Dead cell (2,3) with 2 lively lovely neighbours
(2,3) will be Dead in the next generation
checking cell in (4,2)
neighbour (3,1) is alive
neighbour (3,2) is alive
determine state for Dead cell (4,2) with 2 lively lovely neighbours
(4,2) will be Dead in the next generation
checking cell in (1,0)
neighbour (1,1) is alive
determine state for Dead cell (1,0) with 1 lively lovely neighbours
(1,0) will be Dead in the next generation
checking cell in (0,1)
neighbour (1,1) is alive
determine state for Dead cell (0,1) with 1 lively lovely neighbours
(0,1) will be Dead in the next generation
checking cell in (3,1)
neighbour (3,0) is alive
neighbour (2,2) is alive
neighbour (3,2) is alive
determine state for Live cell (3,1) with 3 lively lovely neighbours
(3,1) will be Live in the next generation
checking cell in (3,-1)
neighbour (3,0) is alive
determine state for Dead cell (3,-1) with 1 lively lovely neighbours
(3,-1) will be Dead in the next generation
checking cell in (2,0)
neighbour (3,0) is alive
neighbour (1,1) is alive
neighbour (3,1) is alive
determine state for Dead cell (2,0) with 3 lively lovely neighbours
(2,0) will be Live in the next generation
checking cell in (4,3)
neighbour (3,2) is alive
determine state for Dead cell (4,3) with 1 lively lovely neighbours
(4,3) will be Dead in the next generation
checking cell in (0,2)
neighbour (1,1) is alive
determine state for Dead cell (0,2) with 1 lively lovely neighbours
(0,2) will be Dead in the next generation
play starts
checking out live cell (2,2)
neighbours set:
(1, 2)
(3, 2)
(1, 3)
(3, 3)
(3, 1)
(2, 1)
(2, 3)
(2, 2)
(1, 1)
united set : {(1, 2), (3, 2), (1, 3), (3, 3), (3, 1), (2, 1), (2, 3), (2, 2), (1, 1)}
checking out live cell (4,1)
neighbours set:
(3, 2)
(3, 0)
(3, 1)
(5, 2)
(5, 0)
(4, 2)
(5, 1)
(4, 1)
(4, 0)
united set : {(3, 2), (3, 0), (3, 1), (5, 2), (5, 0), (4, 2), (5, 1), (4, 1), (4, 0)}
checking out live cell (3,2)
neighbours set:
(3, 2)
(3, 3)
(3, 1)
(2, 1)
(2, 3)
(4, 3)
(2, 2)
(4, 2)
(4, 1)
united set : {(3, 2), (3, 3), (3, 1), (2, 1), (2, 3), (4, 3), (2, 2), (4, 2), (4, 1)}
checking out live cell (3,1)
neighbours set:
(3, 2)
(3, 0)
(3, 1)
(2, 1)
(2, 0)
(2, 2)
(4, 2)
(4, 1)
(4, 0)
united set : {(3, 2), (3, 0), (3, 1), (2, 1), (2, 0), (2, 2), (4, 2), (4, 1), (4, 0)}
checking out live cell (2,0)
neighbours set:
(3, 0)
(2, -1)
(3, 1)
(3, -1)
(2, 1)
(2, 0)
(1, 0)
(1, -1)
(1, 1)
united set : {(3, 0), (2, -1), (3, 1), (3, -1), (2, 1), (2, 0), (1, 0), (1, -1), (1, 1)}
process set : {(1, 3), (3, 0), (2, 1), (5, 1), (1, -1), (4, 0), (1, 2), (3, 3), (5, 0), (2, 2), (4, 1), (1, 1), (3, 2), (2, -1), (2, 3), (4, 2), (1, 0), (3, 1), (3, -1), (2, 0), (4, 3), (5, 2)}
checking cell in (1,3)
neighbour (2,2) is alive
determine state for Dead cell (1,3) with 1 lively lovely neighbours
(1,3) will be Dead in the next generation
checking cell in (3,0)
neighbour (2,0) is alive
neighbour (3,1) is alive
neighbour (4,1) is alive
determine state for Dead cell (3,0) with 3 lively lovely neighbours
(3,0) will be Live in the next generation
checking cell in (2,1)
neighbour (2,0) is alive
neighbour (3,1) is alive
neighbour (2,2) is alive
neighbour (3,2) is alive
determine state for Dead cell (2,1) with 4 lively lovely neighbours
(2,1) will be Dead in the next generation
checking cell in (5,1)
neighbour (4,1) is alive
determine state for Dead cell (5,1) with 1 lively lovely neighbours
(5,1) will be Dead in the next generation
checking cell in (1,-1)
neighbour (2,0) is alive
determine state for Dead cell (1,-1) with 1 lively lovely neighbours
(1,-1) will be Dead in the next generation
checking cell in (4,0)
neighbour (3,1) is alive
neighbour (4,1) is alive
determine state for Dead cell (4,0) with 2 lively lovely neighbours
(4,0) will be Dead in the next generation
checking cell in (1,2)
neighbour (2,2) is alive
determine state for Dead cell (1,2) with 1 lively lovely neighbours
(1,2) will be Dead in the next generation
checking cell in (3,3)
neighbour (2,2) is alive
neighbour (3,2) is alive
determine state for Dead cell (3,3) with 2 lively lovely neighbours
(3,3) will be Dead in the next generation
checking cell in (5,0)
neighbour (4,1) is alive
determine state for Dead cell (5,0) with 1 lively lovely neighbours
(5,0) will be Dead in the next generation
checking cell in (2,2)
neighbour (3,1) is alive
neighbour (3,2) is alive
determine state for Live cell (2,2) with 2 lively lovely neighbours
(2,2) will be Live in the next generation
checking cell in (4,1)
neighbour (3,1) is alive
neighbour (3,2) is alive
determine state for Live cell (4,1) with 2 lively lovely neighbours
(4,1) will be Live in the next generation
checking cell in (1,1)
neighbour (2,0) is alive
neighbour (2,2) is alive
determine state for Dead cell (1,1) with 2 lively lovely neighbours
(1,1) will be Dead in the next generation
checking cell in (3,2)
neighbour (3,1) is alive
neighbour (4,1) is alive
neighbour (2,2) is alive
determine state for Live cell (3,2) with 3 lively lovely neighbours
(3,2) will be Live in the next generation
checking cell in (2,-1)
neighbour (2,0) is alive
determine state for Dead cell (2,-1) with 1 lively lovely neighbours
(2,-1) will be Dead in the next generation
checking cell in (2,3)
neighbour (2,2) is alive
neighbour (3,2) is alive
determine state for Dead cell (2,3) with 2 lively lovely neighbours
(2,3) will be Dead in the next generation
checking cell in (4,2)
neighbour (3,1) is alive
neighbour (4,1) is alive
neighbour (3,2) is alive
determine state for Dead cell (4,2) with 3 lively lovely neighbours
(4,2) will be Live in the next generation
checking cell in (1,0)
neighbour (2,0) is alive
determine state for Dead cell (1,0) with 1 lively lovely neighbours
(1,0) will be Dead in the next generation
checking cell in (3,1)
neighbour (2,0) is alive
neighbour (4,1) is alive
neighbour (2,2) is alive
neighbour (3,2) is alive
determine state for Live cell (3,1) with 4 lively lovely neighbours
(3,1) will be Dead in the next generation
checking cell in (3,-1)
neighbour (2,0) is alive
determine state for Dead cell (3,-1) with 1 lively lovely neighbours
(3,-1) will be Dead in the next generation
checking cell in (2,0)
neighbour (3,1) is alive
determine state for Live cell (2,0) with 1 lively lovely neighbours
(2,0) will be Dead in the next generation
checking cell in (4,3)
neighbour (3,2) is alive
determine state for Dead cell (4,3) with 1 lively lovely neighbours
(4,3) will be Dead in the next generation
checking cell in (5,2)
neighbour (4,1) is alive
determine state for Dead cell (5,2) with 1 lively lovely neighbours
(5,2) will be Dead in the next generation
play starts
checking out live cell (3,0)
neighbours set:
(3, 0)
(2, -1)
(3, 1)
(3, -1)
(2, 1)
(2, 0)
(4, 1)
(4, -1)
(4, 0)
united set : {(3, 0), (2, -1), (3, 1), (3, -1), (2, 1), (2, 0), (4, 1), (4, -1), (4, 0)}
checking out live cell (2,2)
neighbours set:
(1, 2)
(3, 2)
(1, 3)
(3, 3)
(3, 1)
(2, 1)
(2, 3)
(2, 2)
(1, 1)
united set : {(1, 2), (3, 2), (1, 3), (3, 3), (3, 1), (2, 1), (2, 3), (2, 2), (1, 1)}
checking out live cell (4,1)
neighbours set:
(3, 2)
(3, 0)
(3, 1)
(5, 2)
(5, 0)
(4, 2)
(5, 1)
(4, 1)
(4, 0)
united set : {(3, 2), (3, 0), (3, 1), (5, 2), (5, 0), (4, 2), (5, 1), (4, 1), (4, 0)}
checking out live cell (3,2)
neighbours set:
(3, 2)
(3, 3)
(3, 1)
(2, 1)
(2, 3)
(4, 3)
(2, 2)
(4, 2)
(4, 1)
united set : {(3, 2), (3, 3), (3, 1), (2, 1), (2, 3), (4, 3), (2, 2), (4, 2), (4, 1)}
checking out live cell (4,2)
neighbours set:
(5, 1)
(3, 2)
(3, 3)
(3, 1)
(5, 2)
(4, 3)
(4, 2)
(4, 1)
(5, 3)
united set : {(5, 1), (3, 2), (3, 3), (3, 1), (5, 2), (4, 3), (4, 2), (4, 1), (5, 3)}
process set : {(1, 3), (3, 0), (2, 1), (5, 1), (4, -1), (4, 0), (1, 2), (3, 3), (5, 0), (2, 2), (4, 1), (1, 1), (3, 2), (2, -1), (2, 3), (4, 2), (5, 3), (3, 1), (3, -1), (2, 0), (4, 3), (5, 2)}
checking cell in (1,3)
neighbour (2,2) is alive
determine state for Dead cell (1,3) with 1 lively lovely neighbours
(1,3) will be Dead in the next generation
checking cell in (3,0)
neighbour (4,1) is alive
determine state for Live cell (3,0) with 1 lively lovely neighbours
(3,0) will be Dead in the next generation
checking cell in (2,1)
neighbour (3,0) is alive
neighbour (2,2) is alive
neighbour (3,2) is alive
determine state for Dead cell (2,1) with 3 lively lovely neighbours
(2,1) will be Live in the next generation
checking cell in (5,1)
neighbour (4,1) is alive
neighbour (4,2) is alive
determine state for Dead cell (5,1) with 2 lively lovely neighbours
(5,1) will be Dead in the next generation
checking cell in (4,-1)
neighbour (3,0) is alive
determine state for Dead cell (4,-1) with 1 lively lovely neighbours
(4,-1) will be Dead in the next generation
checking cell in (4,0)
neighbour (3,0) is alive
neighbour (4,1) is alive
determine state for Dead cell (4,0) with 2 lively lovely neighbours
(4,0) will be Dead in the next generation
checking cell in (1,2)
neighbour (2,2) is alive
determine state for Dead cell (1,2) with 1 lively lovely neighbours
(1,2) will be Dead in the next generation
checking cell in (3,3)
neighbour (2,2) is alive
neighbour (3,2) is alive
neighbour (4,2) is alive
determine state for Dead cell (3,3) with 3 lively lovely neighbours
(3,3) will be Live in the next generation
checking cell in (5,0)
neighbour (4,1) is alive
determine state for Dead cell (5,0) with 1 lively lovely neighbours
(5,0) will be Dead in the next generation
checking cell in (2,2)
neighbour (3,2) is alive
determine state for Live cell (2,2) with 1 lively lovely neighbours
(2,2) will be Dead in the next generation
checking cell in (4,1)
neighbour (3,0) is alive
neighbour (3,2) is alive
neighbour (4,2) is alive
determine state for Live cell (4,1) with 3 lively lovely neighbours
(4,1) will be Live in the next generation
checking cell in (1,1)
neighbour (2,2) is alive
determine state for Dead cell (1,1) with 1 lively lovely neighbours
(1,1) will be Dead in the next generation
checking cell in (3,2)
neighbour (4,1) is alive
neighbour (2,2) is alive
neighbour (4,2) is alive
determine state for Live cell (3,2) with 3 lively lovely neighbours
(3,2) will be Live in the next generation
checking cell in (2,-1)
neighbour (3,0) is alive
determine state for Dead cell (2,-1) with 1 lively lovely neighbours
(2,-1) will be Dead in the next generation
checking cell in (2,3)
neighbour (2,2) is alive
neighbour (3,2) is alive
determine state for Dead cell (2,3) with 2 lively lovely neighbours
(2,3) will be Dead in the next generation
checking cell in (4,2)
neighbour (4,1) is alive
neighbour (3,2) is alive
determine state for Live cell (4,2) with 2 lively lovely neighbours
(4,2) will be Live in the next generation
checking cell in (5,3)
neighbour (4,2) is alive
determine state for Dead cell (5,3) with 1 lively lovely neighbours
(5,3) will be Dead in the next generation
checking cell in (3,1)
neighbour (3,0) is alive
neighbour (4,1) is alive
neighbour (2,2) is alive
neighbour (3,2) is alive
neighbour (4,2) is alive
determine state for Dead cell (3,1) with 5 lively lovely neighbours
(3,1) will be Dead in the next generation
checking cell in (3,-1)
neighbour (3,0) is alive
determine state for Dead cell (3,-1) with 1 lively lovely neighbours
(3,-1) will be Dead in the next generation
checking cell in (2,0)
neighbour (3,0) is alive
determine state for Dead cell (2,0) with 1 lively lovely neighbours
(2,0) will be Dead in the next generation
checking cell in (4,3)
neighbour (3,2) is alive
neighbour (4,2) is alive
determine state for Dead cell (4,3) with 2 lively lovely neighbours
(4,3) will be Dead in the next generation
checking cell in (5,2)
neighbour (4,1) is alive
neighbour (4,2) is alive
determine state for Dead cell (5,2) with 2 lively lovely neighbours
(5,2) will be Dead in the next generation
play starts
checking out live cell (2,1)
neighbours set:
(1, 2)
(3, 2)
(3, 0)
(3, 1)
(2, 1)
(2, 0)
(2, 2)
(1, 0)
(1, 1)
united set : {(1, 2), (3, 2), (3, 0), (3, 1), (2, 1), (2, 0), (2, 2), (1, 0), (1, 1)}
checking out live cell (3,3)
neighbours set:
(3, 2)
(3, 3)
(4, 4)
(2, 3)
(4, 3)
(2, 2)
(4, 2)
(3, 4)
(2, 4)
united set : {(3, 2), (3, 3), (4, 4), (2, 3), (4, 3), (2, 2), (4, 2), (3, 4), (2, 4)}
checking out live cell (4,1)
neighbours set:
(3, 2)
(3, 0)
(3, 1)
(5, 2)
(5, 0)
(4, 2)
(5, 1)
(4, 1)
(4, 0)
united set : {(3, 2), (3, 0), (3, 1), (5, 2), (5, 0), (4, 2), (5, 1), (4, 1), (4, 0)}
checking out live cell (3,2)
neighbours set:
(3, 2)
(3, 3)
(3, 1)
(2, 1)
(2, 3)
(4, 3)
(2, 2)
(4, 2)
(4, 1)
united set : {(3, 2), (3, 3), (3, 1), (2, 1), (2, 3), (4, 3), (2, 2), (4, 2), (4, 1)}
checking out live cell (4,2)
neighbours set:
(5, 1)
(3, 2)
(3, 3)
(3, 1)
(5, 2)
(4, 3)
(4, 2)
(4, 1)
(5, 3)
united set : {(5, 1), (3, 2), (3, 3), (3, 1), (5, 2), (4, 3), (4, 2), (4, 1), (5, 3)}
process set : {(3, 0), (2, 1), (5, 1), (4, 0), (1, 2), (3, 3), (4, 4), (5, 0), (2, 2), (4, 1), (1, 1), (3, 2), (5, 2), (2, 3), (4, 2), (1, 0), (5, 3), (3, 1), (2, 0), (4, 3), (3, 4), (2, 4)}
checking cell in (3,0)
neighbour (2,1) is alive
neighbour (4,1) is alive
determine state for Dead cell (3,0) with 2 lively lovely neighbours
(3,0) will be Dead in the next generation
checking cell in (2,1)
neighbour (3,2) is alive
determine state for Live cell (2,1) with 1 lively lovely neighbours
(2,1) will be Dead in the next generation
checking cell in (5,1)
neighbour (4,1) is alive
neighbour (4,2) is alive
determine state for Dead cell (5,1) with 2 lively lovely neighbours
(5,1) will be Dead in the next generation
checking cell in (4,0)
neighbour (4,1) is alive
determine state for Dead cell (4,0) with 1 lively lovely neighbours
(4,0) will be Dead in the next generation
checking cell in (1,2)
neighbour (2,1) is alive
determine state for Dead cell (1,2) with 1 lively lovely neighbours
(1,2) will be Dead in the next generation
checking cell in (3,3)
neighbour (3,2) is alive
neighbour (4,2) is alive
determine state for Live cell (3,3) with 2 lively lovely neighbours
(3,3) will be Live in the next generation
checking cell in (4,4)
neighbour (3,3) is alive
determine state for Dead cell (4,4) with 1 lively lovely neighbours
(4,4) will be Dead in the next generation
checking cell in (5,0)
neighbour (4,1) is alive
determine state for Dead cell (5,0) with 1 lively lovely neighbours
(5,0) will be Dead in the next generation
checking cell in (2,2)
neighbour (2,1) is alive
neighbour (3,2) is alive
neighbour (3,3) is alive
determine state for Dead cell (2,2) with 3 lively lovely neighbours
(2,2) will be Live in the next generation
checking cell in (4,1)
neighbour (3,2) is alive
neighbour (4,2) is alive
determine state for Live cell (4,1) with 2 lively lovely neighbours
(4,1) will be Live in the next generation
checking cell in (1,1)
neighbour (2,1) is alive
determine state for Dead cell (1,1) with 1 lively lovely neighbours
(1,1) will be Dead in the next generation
checking cell in (3,2)
neighbour (2,1) is alive
neighbour (4,1) is alive
neighbour (4,2) is alive
neighbour (3,3) is alive
determine state for Live cell (3,2) with 4 lively lovely neighbours
(3,2) will be Dead in the next generation
checking cell in (5,2)
neighbour (4,1) is alive
neighbour (4,2) is alive
determine state for Dead cell (5,2) with 2 lively lovely neighbours
(5,2) will be Dead in the next generation
checking cell in (2,3)
neighbour (3,2) is alive
neighbour (3,3) is alive
determine state for Dead cell (2,3) with 2 lively lovely neighbours
(2,3) will be Dead in the next generation
checking cell in (4,2)
neighbour (4,1) is alive
neighbour (3,2) is alive
neighbour (3,3) is alive
determine state for Live cell (4,2) with 3 lively lovely neighbours
(4,2) will be Live in the next generation
checking cell in (1,0)
neighbour (2,1) is alive
determine state for Dead cell (1,0) with 1 lively lovely neighbours
(1,0) will be Dead in the next generation
checking cell in (5,3)
neighbour (4,2) is alive
determine state for Dead cell (5,3) with 1 lively lovely neighbours
(5,3) will be Dead in the next generation
checking cell in (3,1)
neighbour (2,1) is alive
neighbour (4,1) is alive
neighbour (3,2) is alive
neighbour (4,2) is alive
determine state for Dead cell (3,1) with 4 lively lovely neighbours
(3,1) will be Dead in the next generation
checking cell in (2,0)
neighbour (2,1) is alive
determine state for Dead cell (2,0) with 1 lively lovely neighbours
(2,0) will be Dead in the next generation
checking cell in (4,3)
neighbour (3,2) is alive
neighbour (4,2) is alive
neighbour (3,3) is alive
determine state for Dead cell (4,3) with 3 lively lovely neighbours
(4,3) will be Live in the next generation
checking cell in (3,4)
neighbour (3,3) is alive
determine state for Dead cell (3,4) with 1 lively lovely neighbours
(3,4) will be Dead in the next generation
checking cell in (2,4)
neighbour (3,3) is alive
determine state for Dead cell (2,4) with 1 lively lovely neighbours
(2,4) will be Dead in the next generation
play starts
checking out live cell (3,3)
neighbours set:
(3, 2)
(3, 3)
(4, 4)
(2, 3)
(4, 3)
(2, 2)
(4, 2)
(3, 4)
(2, 4)
united set : {(3, 2), (3, 3), (4, 4), (2, 3), (4, 3), (2, 2), (4, 2), (3, 4), (2, 4)}
checking out live cell (2,2)
neighbours set:
(1, 2)
(3, 2)
(1, 3)
(3, 3)
(3, 1)
(2, 1)
(2, 3)
(2, 2)
(1, 1)
united set : {(1, 2), (3, 2), (1, 3), (3, 3), (3, 1), (2, 1), (2, 3), (2, 2), (1, 1)}
checking out live cell (4,1)
neighbours set:
(3, 2)
(3, 0)
(3, 1)
(5, 2)
(5, 0)
(4, 2)
(5, 1)
(4, 1)
(4, 0)
united set : {(3, 2), (3, 0), (3, 1), (5, 2), (5, 0), (4, 2), (5, 1), (4, 1), (4, 0)}
checking out live cell (4,2)
neighbours set:
(5, 1)
(3, 2)
(3, 3)
(3, 1)
(5, 2)
(4, 3)
(4, 2)
(4, 1)
(5, 3)
united set : {(5, 1), (3, 2), (3, 3), (3, 1), (5, 2), (4, 3), (4, 2), (4, 1), (5, 3)}
checking out live cell (4,3)
neighbours set:
(3, 2)
(5, 4)
(3, 3)
(4, 4)
(4, 3)
(3, 4)
(4, 2)
(5, 2)
(5, 3)
united set : {(3, 2), (5, 4), (3, 3), (4, 4), (4, 3), (3, 4), (4, 2), (5, 2), (5, 3)}
process set : {(1, 3), (3, 0), (2, 1), (5, 1), (4, 0), (1, 2), (3, 3), (4, 4), (5, 0), (2, 2), (3, 4), (4, 1), (1, 1), (3, 2), (5, 4), (2, 3), (4, 2), (5, 3), (3, 1), (4, 3), (5, 2), (2, 4)}
checking cell in (1,3)
neighbour (2,2) is alive
determine state for Dead cell (1,3) with 1 lively lovely neighbours
(1,3) will be Dead in the next generation
checking cell in (3,0)
neighbour (4,1) is alive
determine state for Dead cell (3,0) with 1 lively lovely neighbours
(3,0) will be Dead in the next generation
checking cell in (2,1)
neighbour (2,2) is alive
determine state for Dead cell (2,1) with 1 lively lovely neighbours
(2,1) will be Dead in the next generation
checking cell in (5,1)
neighbour (4,1) is alive
neighbour (4,2) is alive
determine state for Dead cell (5,1) with 2 lively lovely neighbours
(5,1) will be Dead in the next generation
checking cell in (4,0)
neighbour (4,1) is alive
determine state for Dead cell (4,0) with 1 lively lovely neighbours
(4,0) will be Dead in the next generation
checking cell in (1,2)
neighbour (2,2) is alive
determine state for Dead cell (1,2) with 1 lively lovely neighbours
(1,2) will be Dead in the next generation
checking cell in (3,3)
neighbour (2,2) is alive
neighbour (4,2) is alive
neighbour (4,3) is alive
determine state for Live cell (3,3) with 3 lively lovely neighbours
(3,3) will be Live in the next generation
checking cell in (4,4)
neighbour (3,3) is alive
neighbour (4,3) is alive
determine state for Dead cell (4,4) with 2 lively lovely neighbours
(4,4) will be Dead in the next generation
checking cell in (5,0)
neighbour (4,1) is alive
determine state for Dead cell (5,0) with 1 lively lovely neighbours
(5,0) will be Dead in the next generation
checking cell in (2,2)
neighbour (3,3) is alive
determine state for Live cell (2,2) with 1 lively lovely neighbours
(2,2) will be Dead in the next generation
checking cell in (3,4)
neighbour (3,3) is alive
neighbour (4,3) is alive
determine state for Dead cell (3,4) with 2 lively lovely neighbours
(3,4) will be Dead in the next generation
checking cell in (4,1)
neighbour (4,2) is alive
determine state for Live cell (4,1) with 1 lively lovely neighbours
(4,1) will be Dead in the next generation
checking cell in (1,1)
neighbour (2,2) is alive
determine state for Dead cell (1,1) with 1 lively lovely neighbours
(1,1) will be Dead in the next generation
checking cell in (3,2)
neighbour (4,1) is alive
neighbour (2,2) is alive
neighbour (4,2) is alive
neighbour (3,3) is alive
neighbour (4,3) is alive
determine state for Dead cell (3,2) with 5 lively lovely neighbours
(3,2) will be Dead in the next generation
checking cell in (5,4)
neighbour (4,3) is alive
determine state for Dead cell (5,4) with 1 lively lovely neighbours
(5,4) will be Dead in the next generation
checking cell in (2,3)
neighbour (2,2) is alive
neighbour (3,3) is alive
determine state for Dead cell (2,3) with 2 lively lovely neighbours
(2,3) will be Dead in the next generation
checking cell in (4,2)
neighbour (4,1) is alive
neighbour (3,3) is alive
neighbour (4,3) is alive
determine state for Live cell (4,2) with 3 lively lovely neighbours
(4,2) will be Live in the next generation
checking cell in (5,3)
neighbour (4,2) is alive
neighbour (4,3) is alive
determine state for Dead cell (5,3) with 2 lively lovely neighbours
(5,3) will be Dead in the next generation
checking cell in (3,1)
neighbour (4,1) is alive
neighbour (2,2) is alive
neighbour (4,2) is alive
determine state for Dead cell (3,1) with 3 lively lovely neighbours
(3,1) will be Live in the next generation
checking cell in (4,3)
neighbour (4,2) is alive
neighbour (3,3) is alive
determine state for Live cell (4,3) with 2 lively lovely neighbours
(4,3) will be Live in the next generation
checking cell in (5,2)
neighbour (4,1) is alive
neighbour (4,2) is alive
neighbour (4,3) is alive
determine state for Dead cell (5,2) with 3 lively lovely neighbours
(5,2) will be Live in the next generation
checking cell in (2,4)
neighbour (3,3) is alive
determine state for Dead cell (2,4) with 1 lively lovely neighbours
(2,4) will be Dead in the next generation
play starts
checking out live cell (3,3)
neighbours set:
(3, 2)
(3, 3)
(4, 4)
(2, 3)
(4, 3)
(2, 2)
(4, 2)
(3, 4)
(2, 4)
united set : {(3, 2), (3, 3), (4, 4), (2, 3), (4, 3), (2, 2), (4, 2), (3, 4), (2, 4)}
checking out live cell (4,2)
neighbours set:
(5, 1)
(3, 2)
(3, 3)
(3, 1)
(5, 2)
(4, 3)
(4, 2)
(4, 1)
(5, 3)
united set : {(5, 1), (3, 2), (3, 3), (3, 1), (5, 2), (4, 3), (4, 2), (4, 1), (5, 3)}
checking out live cell (3,1)
neighbours set:
(3, 2)
(3, 0)
(3, 1)
(2, 1)
(2, 0)
(2, 2)
(4, 2)
(4, 1)
(4, 0)
united set : {(3, 2), (3, 0), (3, 1), (2, 1), (2, 0), (2, 2), (4, 2), (4, 1), (4, 0)}
checking out live cell (4,3)
neighbours set:
(3, 2)
(5, 4)
(3, 3)
(4, 4)
(4, 3)
(3, 4)
(4, 2)
(5, 2)
(5, 3)
united set : {(3, 2), (5, 4), (3, 3), (4, 4), (4, 3), (3, 4), (4, 2), (5, 2), (5, 3)}
checking out live cell (5,2)
neighbours set:
(5, 1)
(6, 1)
(5, 2)
(6, 3)
(6, 2)
(4, 3)
(4, 2)
(4, 1)
(5, 3)
united set : {(5, 1), (6, 1), (5, 2), (6, 3), (6, 2), (4, 3), (4, 2), (4, 1), (5, 3)}
process set : {(3, 0), (2, 1), (6, 2), (5, 1), (4, 0), (3, 3), (4, 4), (6, 3), (2, 2), (3, 4), (4, 1), (3, 2), (5, 4), (2, 3), (4, 2), (5, 3), (6, 1), (3, 1), (2, 0), (4, 3), (5, 2), (2, 4)}
checking cell in (3,0)
neighbour (3,1) is alive
determine state for Dead cell (3,0) with 1 lively lovely neighbours
(3,0) will be Dead in the next generation
checking cell in (2,1)
neighbour (3,1) is alive
determine state for Dead cell (2,1) with 1 lively lovely neighbours
(2,1) will be Dead in the next generation
checking cell in (6,2)
neighbour (5,2) is alive
determine state for Dead cell (6,2) with 1 lively lovely neighbours
(6,2) will be Dead in the next generation
checking cell in (5,1)
neighbour (4,2) is alive
neighbour (5,2) is alive
determine state for Dead cell (5,1) with 2 lively lovely neighbours
(5,1) will be Dead in the next generation
checking cell in (4,0)
neighbour (3,1) is alive
determine state for Dead cell (4,0) with 1 lively lovely neighbours
(4,0) will be Dead in the next generation
checking cell in (3,3)
neighbour (4,2) is alive
neighbour (4,3) is alive
determine state for Live cell (3,3) with 2 lively lovely neighbours
(3,3) will be Live in the next generation
checking cell in (4,4)
neighbour (3,3) is alive
neighbour (4,3) is alive
determine state for Dead cell (4,4) with 2 lively lovely neighbours
(4,4) will be Dead in the next generation
checking cell in (6,3)
neighbour (5,2) is alive
determine state for Dead cell (6,3) with 1 lively lovely neighbours
(6,3) will be Dead in the next generation
checking cell in (2,2)
neighbour (3,1) is alive
neighbour (3,3) is alive
determine state for Dead cell (2,2) with 2 lively lovely neighbours
(2,2) will be Dead in the next generation
checking cell in (3,4)
neighbour (3,3) is alive
neighbour (4,3) is alive
determine state for Dead cell (3,4) with 2 lively lovely neighbours
(3,4) will be Dead in the next generation
checking cell in (4,1)
neighbour (3,1) is alive
neighbour (4,2) is alive
neighbour (5,2) is alive
determine state for Dead cell (4,1) with 3 lively lovely neighbours
(4,1) will be Live in the next generation
checking cell in (3,2)
neighbour (3,1) is alive
neighbour (4,2) is alive
neighbour (3,3) is alive
neighbour (4,3) is alive
determine state for Dead cell (3,2) with 4 lively lovely neighbours
(3,2) will be Dead in the next generation
checking cell in (5,4)
neighbour (4,3) is alive
determine state for Dead cell (5,4) with 1 lively lovely neighbours
(5,4) will be Dead in the next generation
checking cell in (2,3)
neighbour (3,3) is alive
determine state for Dead cell (2,3) with 1 lively lovely neighbours
(2,3) will be Dead in the next generation
checking cell in (4,2)
neighbour (3,1) is alive
neighbour (5,2) is alive
neighbour (3,3) is alive
neighbour (4,3) is alive
determine state for Live cell (4,2) with 4 lively lovely neighbours
(4,2) will be Dead in the next generation
checking cell in (5,3)
neighbour (4,2) is alive
neighbour (5,2) is alive
neighbour (4,3) is alive
determine state for Dead cell (5,3) with 3 lively lovely neighbours
(5,3) will be Live in the next generation
checking cell in (6,1)
neighbour (5,2) is alive
determine state for Dead cell (6,1) with 1 lively lovely neighbours
(6,1) will be Dead in the next generation
checking cell in (3,1)
neighbour (4,2) is alive
determine state for Live cell (3,1) with 1 lively lovely neighbours
(3,1) will be Dead in the next generation
checking cell in (2,0)
neighbour (3,1) is alive
determine state for Dead cell (2,0) with 1 lively lovely neighbours
(2,0) will be Dead in the next generation
checking cell in (4,3)
neighbour (4,2) is alive
neighbour (5,2) is alive
neighbour (3,3) is alive
determine state for Live cell (4,3) with 3 lively lovely neighbours
(4,3) will be Live in the next generation
checking cell in (5,2)
neighbour (4,2) is alive
neighbour (4,3) is alive
determine state for Live cell (5,2) with 2 lively lovely neighbours
(5,2) will be Live in the next generation
checking cell in (2,4)
neighbour (3,3) is alive
determine state for Dead cell (2,4) with 1 lively lovely neighbours
(2,4) will be Dead in the next generation
play starts
checking out live cell (3,3)
neighbours set:
(3, 2)
(3, 3)
(4, 4)
(2, 3)
(4, 3)
(2, 2)
(4, 2)
(3, 4)
(2, 4)
united set : {(3, 2), (3, 3), (4, 4), (2, 3), (4, 3), (2, 2), (4, 2), (3, 4), (2, 4)}
checking out live cell (4,1)
neighbours set:
(3, 2)
(3, 0)
(3, 1)
(5, 2)
(5, 0)
(4, 2)
(5, 1)
(4, 1)
(4, 0)
united set : {(3, 2), (3, 0), (3, 1), (5, 2), (5, 0), (4, 2), (5, 1), (4, 1), (4, 0)}
checking out live cell (5,3)
neighbours set:
(6, 4)
(5, 4)
(4, 4)
(6, 3)
(6, 2)
(4, 3)
(4, 2)
(5, 2)
(5, 3)
united set : {(6, 4), (5, 4), (4, 4), (6, 3), (6, 2), (4, 3), (4, 2), (5, 2), (5, 3)}
checking out live cell (4,3)
neighbours set:
(3, 2)
(5, 4)
(3, 3)
(4, 4)
(4, 3)
(3, 4)
(4, 2)
(5, 2)
(5, 3)
united set : {(3, 2), (5, 4), (3, 3), (4, 4), (4, 3), (3, 4), (4, 2), (5, 2), (5, 3)}
checking out live cell (5,2)
neighbours set:
(5, 1)
(6, 1)
(5, 2)
(6, 3)
(6, 2)
(4, 3)
(4, 2)
(4, 1)
(5, 3)
united set : {(5, 1), (6, 1), (5, 2), (6, 3), (6, 2), (4, 3), (4, 2), (4, 1), (5, 3)}
process set : {(3, 0), (6, 2), (5, 1), (4, 0), (3, 3), (4, 4), (6, 3), (5, 0), (2, 2), (3, 4), (4, 1), (6, 4), (3, 2), (5, 4), (2, 3), (4, 2), (5, 3), (6, 1), (3, 1), (4, 3), (5, 2), (2, 4)}
checking cell in (3,0)
neighbour (4,1) is alive
determine state for Dead cell (3,0) with 1 lively lovely neighbours
(3,0) will be Dead in the next generation
checking cell in (6,2)
neighbour (5,2) is alive
neighbour (5,3) is alive
determine state for Dead cell (6,2) with 2 lively lovely neighbours
(6,2) will be Dead in the next generation
checking cell in (5,1)
neighbour (4,1) is alive
neighbour (5,2) is alive
determine state for Dead cell (5,1) with 2 lively lovely neighbours
(5,1) will be Dead in the next generation
checking cell in (4,0)
neighbour (4,1) is alive
determine state for Dead cell (4,0) with 1 lively lovely neighbours
(4,0) will be Dead in the next generation
checking cell in (3,3)
neighbour (4,3) is alive
determine state for Live cell (3,3) with 1 lively lovely neighbours
(3,3) will be Dead in the next generation
checking cell in (4,4)
neighbour (3,3) is alive
neighbour (4,3) is alive
neighbour (5,3) is alive
determine state for Dead cell (4,4) with 3 lively lovely neighbours
(4,4) will be Live in the next generation
checking cell in (6,3)
neighbour (5,2) is alive
neighbour (5,3) is alive
determine state for Dead cell (6,3) with 2 lively lovely neighbours
(6,3) will be Dead in the next generation
checking cell in (5,0)
neighbour (4,1) is alive
determine state for Dead cell (5,0) with 1 lively lovely neighbours
(5,0) will be Dead in the next generation
checking cell in (2,2)
neighbour (3,3) is alive
determine state for Dead cell (2,2) with 1 lively lovely neighbours
(2,2) will be Dead in the next generation
checking cell in (3,4)
neighbour (3,3) is alive
neighbour (4,3) is alive
determine state for Dead cell (3,4) with 2 lively lovely neighbours
(3,4) will be Dead in the next generation
checking cell in (4,1)
neighbour (5,2) is alive
determine state for Live cell (4,1) with 1 lively lovely neighbours
(4,1) will be Dead in the next generation
checking cell in (6,4)
neighbour (5,3) is alive
determine state for Dead cell (6,4) with 1 lively lovely neighbours
(6,4) will be Dead in the next generation
checking cell in (3,2)
neighbour (4,1) is alive
neighbour (3,3) is alive
neighbour (4,3) is alive
determine state for Dead cell (3,2) with 3 lively lovely neighbours
(3,2) will be Live in the next generation
checking cell in (5,4)
neighbour (4,3) is alive
neighbour (5,3) is alive
determine state for Dead cell (5,4) with 2 lively lovely neighbours
(5,4) will be Dead in the next generation
checking cell in (2,3)
neighbour (3,3) is alive
determine state for Dead cell (2,3) with 1 lively lovely neighbours
(2,3) will be Dead in the next generation
checking cell in (4,2)
neighbour (4,1) is alive
neighbour (5,2) is alive
neighbour (3,3) is alive
neighbour (4,3) is alive
neighbour (5,3) is alive
determine state for Dead cell (4,2) with 5 lively lovely neighbours
(4,2) will be Dead in the next generation
checking cell in (5,3)
neighbour (5,2) is alive
neighbour (4,3) is alive
determine state for Live cell (5,3) with 2 lively lovely neighbours
(5,3) will be Live in the next generation
checking cell in (6,1)
neighbour (5,2) is alive
determine state for Dead cell (6,1) with 1 lively lovely neighbours
(6,1) will be Dead in the next generation
checking cell in (3,1)
neighbour (4,1) is alive
determine state for Dead cell (3,1) with 1 lively lovely neighbours
(3,1) will be Dead in the next generation
checking cell in (4,3)
neighbour (5,2) is alive
neighbour (3,3) is alive
neighbour (5,3) is alive
determine state for Live cell (4,3) with 3 lively lovely neighbours
(4,3) will be Live in the next generation
checking cell in (5,2)
neighbour (4,1) is alive
neighbour (4,3) is alive
neighbour (5,3) is alive
determine state for Live cell (5,2) with 3 lively lovely neighbours
(5,2) will be Live in the next generation
checking cell in (2,4)
neighbour (3,3) is alive
determine state for Dead cell (2,4) with 1 lively lovely neighbours
(2,4) will be Dead in the next generation
play starts
checking out live cell (4,4)
neighbours set:
(5, 4)
(3, 5)
(3, 3)
(5, 5)
(4, 5)
(4, 4)
(4, 3)
(3, 4)
(5, 3)
united set : {(5, 4), (3, 5), (3, 3), (5, 5), (4, 5), (4, 4), (4, 3), (3, 4), (5, 3)}
checking out live cell (3,2)
neighbours set:
(3, 2)
(3, 3)
(3, 1)
(2, 1)
(2, 3)
(4, 3)
(2, 2)
(4, 2)
(4, 1)
united set : {(3, 2), (3, 3), (3, 1), (2, 1), (2, 3), (4, 3), (2, 2), (4, 2), (4, 1)}
checking out live cell (5,3)
neighbours set:
(6, 4)
(5, 4)
(4, 4)
(6, 3)
(6, 2)
(4, 3)
(4, 2)
(5, 2)
(5, 3)
united set : {(6, 4), (5, 4), (4, 4), (6, 3), (6, 2), (4, 3), (4, 2), (5, 2), (5, 3)}
checking out live cell (4,3)
neighbours set:
(3, 2)
(5, 4)
(3, 3)
(4, 4)
(4, 3)
(3, 4)
(4, 2)
(5, 2)
(5, 3)
united set : {(3, 2), (5, 4), (3, 3), (4, 4), (4, 3), (3, 4), (4, 2), (5, 2), (5, 3)}
checking out live cell (5,2)
neighbours set:
(5, 1)
(6, 1)
(5, 2)
(6, 3)
(6, 2)
(4, 3)
(4, 2)
(4, 1)
(5, 3)
united set : {(5, 1), (6, 1), (5, 2), (6, 3), (6, 2), (4, 3), (4, 2), (4, 1), (5, 3)}
process set : {(2, 1), (6, 2), (5, 1), (3, 3), (5, 5), (4, 4), (6, 3), (2, 2), (4, 1), (6, 4), (5, 4), (3, 2), (4, 5), (5, 2), (2, 3), (4, 2), (3, 5), (5, 3), (6, 1), (3, 1), (4, 3), (3, 4)}
checking cell in (2,1)
neighbour (3,2) is alive
determine state for Dead cell (2,1) with 1 lively lovely neighbours
(2,1) will be Dead in the next generation
checking cell in (6,2)
neighbour (5,2) is alive
neighbour (5,3) is alive
determine state for Dead cell (6,2) with 2 lively lovely neighbours
(6,2) will be Dead in the next generation
checking cell in (5,1)
neighbour (5,2) is alive
determine state for Dead cell (5,1) with 1 lively lovely neighbours
(5,1) will be Dead in the next generation
checking cell in (3,3)
neighbour (3,2) is alive
neighbour (4,3) is alive
neighbour (4,4) is alive
determine state for Dead cell (3,3) with 3 lively lovely neighbours
(3,3) will be Live in the next generation
checking cell in (5,5)
neighbour (4,4) is alive
determine state for Dead cell (5,5) with 1 lively lovely neighbours
(5,5) will be Dead in the next generation
checking cell in (4,4)
neighbour (4,3) is alive
neighbour (5,3) is alive
determine state for Live cell (4,4) with 2 lively lovely neighbours
(4,4) will be Live in the next generation
checking cell in (6,3)
neighbour (5,2) is alive
neighbour (5,3) is alive
determine state for Dead cell (6,3) with 2 lively lovely neighbours
(6,3) will be Dead in the next generation
checking cell in (2,2)
neighbour (3,2) is alive
determine state for Dead cell (2,2) with 1 lively lovely neighbours
(2,2) will be Dead in the next generation
checking cell in (4,1)
neighbour (3,2) is alive
neighbour (5,2) is alive
determine state for Dead cell (4,1) with 2 lively lovely neighbours
(4,1) will be Dead in the next generation
checking cell in (6,4)
neighbour (5,3) is alive
determine state for Dead cell (6,4) with 1 lively lovely neighbours
(6,4) will be Dead in the next generation
checking cell in (5,4)
neighbour (4,3) is alive
neighbour (5,3) is alive
neighbour (4,4) is alive
determine state for Dead cell (5,4) with 3 lively lovely neighbours
(5,4) will be Live in the next generation
checking cell in (3,2)
neighbour (4,3) is alive
determine state for Live cell (3,2) with 1 lively lovely neighbours
(3,2) will be Dead in the next generation
checking cell in (4,5)
neighbour (4,4) is alive
determine state for Dead cell (4,5) with 1 lively lovely neighbours
(4,5) will be Dead in the next generation
checking cell in (5,2)
neighbour (4,3) is alive
neighbour (5,3) is alive
determine state for Live cell (5,2) with 2 lively lovely neighbours
(5,2) will be Live in the next generation
checking cell in (2,3)
neighbour (3,2) is alive
determine state for Dead cell (2,3) with 1 lively lovely neighbours
(2,3) will be Dead in the next generation
checking cell in (4,2)
neighbour (3,2) is alive
neighbour (5,2) is alive
neighbour (4,3) is alive
neighbour (5,3) is alive
determine state for Dead cell (4,2) with 4 lively lovely neighbours
(4,2) will be Dead in the next generation
checking cell in (3,5)
neighbour (4,4) is alive
determine state for Dead cell (3,5) with 1 lively lovely neighbours
(3,5) will be Dead in the next generation
checking cell in (5,3)
neighbour (5,2) is alive
neighbour (4,3) is alive
neighbour (4,4) is alive
determine state for Live cell (5,3) with 3 lively lovely neighbours
(5,3) will be Live in the next generation
checking cell in (6,1)
neighbour (5,2) is alive
determine state for Dead cell (6,1) with 1 lively lovely neighbours
(6,1) will be Dead in the next generation
checking cell in (3,1)
neighbour (3,2) is alive
determine state for Dead cell (3,1) with 1 lively lovely neighbours
(3,1) will be Dead in the next generation
checking cell in (4,3)
neighbour (3,2) is alive
neighbour (5,2) is alive
neighbour (5,3) is alive
neighbour (4,4) is alive
determine state for Live cell (4,3) with 4 lively lovely neighbours
(4,3) will be Dead in the next generation
checking cell in (3,4)
neighbour (4,3) is alive
neighbour (4,4) is alive
determine state for Dead cell (3,4) with 2 lively lovely neighbours
(3,4) will be Dead in the next generation
play starts
checking out live cell (3,3)
neighbours set:
(3, 2)
(3, 3)
(4, 4)
(2, 3)
(4, 3)
(2, 2)
(4, 2)
(3, 4)
(2, 4)
united set : {(3, 2), (3, 3), (4, 4), (2, 3), (4, 3), (2, 2), (4, 2), (3, 4), (2, 4)}
checking out live cell (4,4)
neighbours set:
(5, 4)
(3, 5)
(3, 3)
(5, 5)
(4, 5)
(4, 4)
(4, 3)
(3, 4)
(5, 3)
united set : {(5, 4), (3, 5), (3, 3), (5, 5), (4, 5), (4, 4), (4, 3), (3, 4), (5, 3)}
checking out live cell (5,4)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(4, 5)
(4, 4)
(6, 3)
(4, 3)
(6, 5)
(5, 3)
united set : {(6, 4), (5, 4), (5, 5), (4, 5), (4, 4), (6, 3), (4, 3), (6, 5), (5, 3)}
checking out live cell (5,2)
neighbours set:
(5, 1)
(6, 1)
(5, 2)
(6, 3)
(6, 2)
(4, 3)
(4, 2)
(4, 1)
(5, 3)
united set : {(5, 1), (6, 1), (5, 2), (6, 3), (6, 2), (4, 3), (4, 2), (4, 1), (5, 3)}
checking out live cell (5,3)
neighbours set:
(6, 4)
(5, 4)
(4, 4)
(6, 3)
(6, 2)
(4, 3)
(4, 2)
(5, 2)
(5, 3)
united set : {(6, 4), (5, 4), (4, 4), (6, 3), (6, 2), (4, 3), (4, 2), (5, 2), (5, 3)}
process set : {(6, 2), (5, 1), (3, 3), (5, 5), (4, 4), (6, 3), (2, 2), (4, 1), (6, 4), (3, 2), (5, 4), (4, 5), (5, 2), (2, 3), (4, 2), (6, 5), (3, 5), (5, 3), (6, 1), (4, 3), (3, 4), (2, 4)}
checking cell in (6,2)
neighbour (5,2) is alive
neighbour (5,3) is alive
determine state for Dead cell (6,2) with 2 lively lovely neighbours
(6,2) will be Dead in the next generation
checking cell in (5,1)
neighbour (5,2) is alive
determine state for Dead cell (5,1) with 1 lively lovely neighbours
(5,1) will be Dead in the next generation
checking cell in (3,3)
neighbour (4,4) is alive
determine state for Live cell (3,3) with 1 lively lovely neighbours
(3,3) will be Dead in the next generation
checking cell in (5,5)
neighbour (4,4) is alive
neighbour (5,4) is alive
determine state for Dead cell (5,5) with 2 lively lovely neighbours
(5,5) will be Dead in the next generation
checking cell in (4,4)
neighbour (3,3) is alive
neighbour (5,3) is alive
neighbour (5,4) is alive
determine state for Live cell (4,4) with 3 lively lovely neighbours
(4,4) will be Live in the next generation
checking cell in (6,3)
neighbour (5,2) is alive
neighbour (5,3) is alive
neighbour (5,4) is alive
determine state for Dead cell (6,3) with 3 lively lovely neighbours
(6,3) will be Live in the next generation
checking cell in (2,2)
neighbour (3,3) is alive
determine state for Dead cell (2,2) with 1 lively lovely neighbours
(2,2) will be Dead in the next generation
checking cell in (4,1)
neighbour (5,2) is alive
determine state for Dead cell (4,1) with 1 lively lovely neighbours
(4,1) will be Dead in the next generation
checking cell in (6,4)
neighbour (5,3) is alive
neighbour (5,4) is alive
determine state for Dead cell (6,4) with 2 lively lovely neighbours
(6,4) will be Dead in the next generation
checking cell in (3,2)
neighbour (3,3) is alive
determine state for Dead cell (3,2) with 1 lively lovely neighbours
(3,2) will be Dead in the next generation
checking cell in (5,4)
neighbour (5,3) is alive
neighbour (4,4) is alive
determine state for Live cell (5,4) with 2 lively lovely neighbours
(5,4) will be Live in the next generation
checking cell in (4,5)
neighbour (4,4) is alive
neighbour (5,4) is alive
determine state for Dead cell (4,5) with 2 lively lovely neighbours
(4,5) will be Dead in the next generation
checking cell in (5,2)
neighbour (5,3) is alive
determine state for Live cell (5,2) with 1 lively lovely neighbours
(5,2) will be Dead in the next generation
checking cell in (2,3)
neighbour (3,3) is alive
determine state for Dead cell (2,3) with 1 lively lovely neighbours
(2,3) will be Dead in the next generation
checking cell in (4,2)
neighbour (5,2) is alive
neighbour (3,3) is alive
neighbour (5,3) is alive
determine state for Dead cell (4,2) with 3 lively lovely neighbours
(4,2) will be Live in the next generation
checking cell in (6,5)
neighbour (5,4) is alive
determine state for Dead cell (6,5) with 1 lively lovely neighbours
(6,5) will be Dead in the next generation
checking cell in (3,5)
neighbour (4,4) is alive
determine state for Dead cell (3,5) with 1 lively lovely neighbours
(3,5) will be Dead in the next generation
checking cell in (5,3)
neighbour (5,2) is alive
neighbour (4,4) is alive
neighbour (5,4) is alive
determine state for Live cell (5,3) with 3 lively lovely neighbours
(5,3) will be Live in the next generation
checking cell in (6,1)
neighbour (5,2) is alive
determine state for Dead cell (6,1) with 1 lively lovely neighbours
(6,1) will be Dead in the next generation
checking cell in (4,3)
neighbour (5,2) is alive
neighbour (3,3) is alive
neighbour (5,3) is alive
neighbour (4,4) is alive
neighbour (5,4) is alive
determine state for Dead cell (4,3) with 5 lively lovely neighbours
(4,3) will be Dead in the next generation
checking cell in (3,4)
neighbour (3,3) is alive
neighbour (4,4) is alive
determine state for Dead cell (3,4) with 2 lively lovely neighbours
(3,4) will be Dead in the next generation
checking cell in (2,4)
neighbour (3,3) is alive
determine state for Dead cell (2,4) with 1 lively lovely neighbours
(2,4) will be Dead in the next generation
play starts
checking out live cell (4,4)
neighbours set:
(5, 4)
(3, 5)
(3, 3)
(5, 5)
(4, 5)
(4, 4)
(4, 3)
(3, 4)
(5, 3)
united set : {(5, 4), (3, 5), (3, 3), (5, 5), (4, 5), (4, 4), (4, 3), (3, 4), (5, 3)}
checking out live cell (6,3)
neighbours set:
(7, 3)
(5, 4)
(6, 4)
(6, 3)
(7, 4)
(6, 2)
(5, 2)
(7, 2)
(5, 3)
united set : {(7, 3), (5, 4), (6, 4), (6, 3), (7, 4), (6, 2), (5, 2), (7, 2), (5, 3)}
checking out live cell (5,4)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(4, 5)
(4, 4)
(6, 3)
(4, 3)
(6, 5)
(5, 3)
united set : {(6, 4), (5, 4), (5, 5), (4, 5), (4, 4), (6, 3), (4, 3), (6, 5), (5, 3)}
checking out live cell (4,2)
neighbours set:
(5, 1)
(3, 2)
(3, 3)
(3, 1)
(5, 2)
(4, 3)
(4, 2)
(4, 1)
(5, 3)
united set : {(5, 1), (3, 2), (3, 3), (3, 1), (5, 2), (4, 3), (4, 2), (4, 1), (5, 3)}
checking out live cell (5,3)
neighbours set:
(6, 4)
(5, 4)
(4, 4)
(6, 3)
(6, 2)
(4, 3)
(4, 2)
(5, 2)
(5, 3)
united set : {(6, 4), (5, 4), (4, 4), (6, 3), (6, 2), (4, 3), (4, 2), (5, 2), (5, 3)}
process set : {(7, 3), (6, 2), (5, 1), (7, 2), (3, 3), (5, 5), (4, 4), (6, 3), (3, 4), (4, 1), (6, 4), (5, 4), (3, 2), (4, 5), (4, 2), (6, 5), (3, 5), (5, 3), (3, 1), (7, 4), (4, 3), (5, 2)}
checking cell in (7,3)
neighbour (6,3) is alive
determine state for Dead cell (7,3) with 1 lively lovely neighbours
(7,3) will be Dead in the next generation
checking cell in (6,2)
neighbour (5,3) is alive
neighbour (6,3) is alive
determine state for Dead cell (6,2) with 2 lively lovely neighbours
(6,2) will be Dead in the next generation
checking cell in (5,1)
neighbour (4,2) is alive
determine state for Dead cell (5,1) with 1 lively lovely neighbours
(5,1) will be Dead in the next generation
checking cell in (7,2)
neighbour (6,3) is alive
determine state for Dead cell (7,2) with 1 lively lovely neighbours
(7,2) will be Dead in the next generation
checking cell in (3,3)
neighbour (4,2) is alive
neighbour (4,4) is alive
determine state for Dead cell (3,3) with 2 lively lovely neighbours
(3,3) will be Dead in the next generation
checking cell in (5,5)
neighbour (4,4) is alive
neighbour (5,4) is alive
determine state for Dead cell (5,5) with 2 lively lovely neighbours
(5,5) will be Dead in the next generation
checking cell in (4,4)
neighbour (5,3) is alive
neighbour (5,4) is alive
determine state for Live cell (4,4) with 2 lively lovely neighbours
(4,4) will be Live in the next generation
checking cell in (6,3)
neighbour (5,3) is alive
neighbour (5,4) is alive
determine state for Live cell (6,3) with 2 lively lovely neighbours
(6,3) will be Live in the next generation
checking cell in (3,4)
neighbour (4,4) is alive
determine state for Dead cell (3,4) with 1 lively lovely neighbours
(3,4) will be Dead in the next generation
checking cell in (4,1)
neighbour (4,2) is alive
determine state for Dead cell (4,1) with 1 lively lovely neighbours
(4,1) will be Dead in the next generation
checking cell in (6,4)
neighbour (5,3) is alive
neighbour (6,3) is alive
neighbour (5,4) is alive
determine state for Dead cell (6,4) with 3 lively lovely neighbours
(6,4) will be Live in the next generation
checking cell in (5,4)
neighbour (5,3) is alive
neighbour (6,3) is alive
neighbour (4,4) is alive
determine state for Live cell (5,4) with 3 lively lovely neighbours
(5,4) will be Live in the next generation
checking cell in (3,2)
neighbour (4,2) is alive
determine state for Dead cell (3,2) with 1 lively lovely neighbours
(3,2) will be Dead in the next generation
checking cell in (4,5)
neighbour (4,4) is alive
neighbour (5,4) is alive
determine state for Dead cell (4,5) with 2 lively lovely neighbours
(4,5) will be Dead in the next generation
checking cell in (4,2)
neighbour (5,3) is alive
determine state for Live cell (4,2) with 1 lively lovely neighbours
(4,2) will be Dead in the next generation
checking cell in (6,5)
neighbour (5,4) is alive
determine state for Dead cell (6,5) with 1 lively lovely neighbours
(6,5) will be Dead in the next generation
checking cell in (3,5)
neighbour (4,4) is alive
determine state for Dead cell (3,5) with 1 lively lovely neighbours
(3,5) will be Dead in the next generation
checking cell in (5,3)
neighbour (4,2) is alive
neighbour (6,3) is alive
neighbour (4,4) is alive
neighbour (5,4) is alive
determine state for Live cell (5,3) with 4 lively lovely neighbours
(5,3) will be Dead in the next generation
checking cell in (3,1)
neighbour (4,2) is alive
determine state for Dead cell (3,1) with 1 lively lovely neighbours
(3,1) will be Dead in the next generation
checking cell in (7,4)
neighbour (6,3) is alive
determine state for Dead cell (7,4) with 1 lively lovely neighbours
(7,4) will be Dead in the next generation
checking cell in (4,3)
neighbour (4,2) is alive
neighbour (5,3) is alive
neighbour (4,4) is alive
neighbour (5,4) is alive
determine state for Dead cell (4,3) with 4 lively lovely neighbours
(4,3) will be Dead in the next generation
checking cell in (5,2)
neighbour (4,2) is alive
neighbour (5,3) is alive
neighbour (6,3) is alive
determine state for Dead cell (5,2) with 3 lively lovely neighbours
(5,2) will be Live in the next generation
play starts
checking out live cell (4,4)
neighbours set:
(5, 4)
(3, 5)
(3, 3)
(5, 5)
(4, 5)
(4, 4)
(4, 3)
(3, 4)
(5, 3)
united set : {(5, 4), (3, 5), (3, 3), (5, 5), (4, 5), (4, 4), (4, 3), (3, 4), (5, 3)}
checking out live cell (6,3)
neighbours set:
(7, 3)
(5, 4)
(6, 4)
(6, 3)
(7, 4)
(6, 2)
(5, 2)
(7, 2)
(5, 3)
united set : {(7, 3), (5, 4), (6, 4), (6, 3), (7, 4), (6, 2), (5, 2), (7, 2), (5, 3)}
checking out live cell (6,4)
neighbours set:
(7, 3)
(5, 4)
(6, 4)
(5, 5)
(6, 3)
(7, 4)
(7, 5)
(6, 5)
(5, 3)
united set : {(7, 3), (5, 4), (6, 4), (5, 5), (6, 3), (7, 4), (7, 5), (6, 5), (5, 3)}
checking out live cell (5,4)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(4, 5)
(4, 4)
(6, 3)
(4, 3)
(6, 5)
(5, 3)
united set : {(6, 4), (5, 4), (5, 5), (4, 5), (4, 4), (6, 3), (4, 3), (6, 5), (5, 3)}
checking out live cell (5,2)
neighbours set:
(5, 1)
(6, 1)
(5, 2)
(6, 3)
(6, 2)
(4, 3)
(4, 2)
(4, 1)
(5, 3)
united set : {(5, 1), (6, 1), (5, 2), (6, 3), (6, 2), (4, 3), (4, 2), (4, 1), (5, 3)}
process set : {(7, 3), (6, 2), (5, 1), (7, 2), (3, 3), (5, 5), (4, 4), (6, 3), (3, 4), (4, 1), (6, 4), (5, 4), (4, 5), (7, 5), (4, 2), (6, 5), (3, 5), (5, 3), (6, 1), (7, 4), (4, 3), (5, 2)}
checking cell in (7,3)
neighbour (6,3) is alive
neighbour (6,4) is alive
determine state for Dead cell (7,3) with 2 lively lovely neighbours
(7,3) will be Dead in the next generation
checking cell in (6,2)
neighbour (5,2) is alive
neighbour (6,3) is alive
determine state for Dead cell (6,2) with 2 lively lovely neighbours
(6,2) will be Dead in the next generation
checking cell in (5,1)
neighbour (5,2) is alive
determine state for Dead cell (5,1) with 1 lively lovely neighbours
(5,1) will be Dead in the next generation
checking cell in (7,2)
neighbour (6,3) is alive
determine state for Dead cell (7,2) with 1 lively lovely neighbours
(7,2) will be Dead in the next generation
checking cell in (3,3)
neighbour (4,4) is alive
determine state for Dead cell (3,3) with 1 lively lovely neighbours
(3,3) will be Dead in the next generation
checking cell in (5,5)
neighbour (4,4) is alive
neighbour (5,4) is alive
neighbour (6,4) is alive
determine state for Dead cell (5,5) with 3 lively lovely neighbours
(5,5) will be Live in the next generation
checking cell in (4,4)
neighbour (5,4) is alive
determine state for Live cell (4,4) with 1 lively lovely neighbours
(4,4) will be Dead in the next generation
checking cell in (6,3)
neighbour (5,2) is alive
neighbour (5,4) is alive
neighbour (6,4) is alive
determine state for Live cell (6,3) with 3 lively lovely neighbours
(6,3) will be Live in the next generation
checking cell in (3,4)
neighbour (4,4) is alive
determine state for Dead cell (3,4) with 1 lively lovely neighbours
(3,4) will be Dead in the next generation
checking cell in (4,1)
neighbour (5,2) is alive
determine state for Dead cell (4,1) with 1 lively lovely neighbours
(4,1) will be Dead in the next generation
checking cell in (6,4)
neighbour (6,3) is alive
neighbour (5,4) is alive
determine state for Live cell (6,4) with 2 lively lovely neighbours
(6,4) will be Live in the next generation
checking cell in (5,4)
neighbour (6,3) is alive
neighbour (4,4) is alive
neighbour (6,4) is alive
determine state for Live cell (5,4) with 3 lively lovely neighbours
(5,4) will be Live in the next generation
checking cell in (4,5)
neighbour (4,4) is alive
neighbour (5,4) is alive
determine state for Dead cell (4,5) with 2 lively lovely neighbours
(4,5) will be Dead in the next generation
checking cell in (7,5)
neighbour (6,4) is alive
determine state for Dead cell (7,5) with 1 lively lovely neighbours
(7,5) will be Dead in the next generation
checking cell in (4,2)
neighbour (5,2) is alive
determine state for Dead cell (4,2) with 1 lively lovely neighbours
(4,2) will be Dead in the next generation
checking cell in (6,5)
neighbour (5,4) is alive
neighbour (6,4) is alive
determine state for Dead cell (6,5) with 2 lively lovely neighbours
(6,5) will be Dead in the next generation
checking cell in (3,5)
neighbour (4,4) is alive
determine state for Dead cell (3,5) with 1 lively lovely neighbours
(3,5) will be Dead in the next generation
checking cell in (5,3)
neighbour (5,2) is alive
neighbour (6,3) is alive
neighbour (4,4) is alive
neighbour (5,4) is alive
neighbour (6,4) is alive
determine state for Dead cell (5,3) with 5 lively lovely neighbours
(5,3) will be Dead in the next generation
checking cell in (6,1)
neighbour (5,2) is alive
determine state for Dead cell (6,1) with 1 lively lovely neighbours
(6,1) will be Dead in the next generation
checking cell in (7,4)
neighbour (6,3) is alive
neighbour (6,4) is alive
determine state for Dead cell (7,4) with 2 lively lovely neighbours
(7,4) will be Dead in the next generation
checking cell in (4,3)
neighbour (5,2) is alive
neighbour (4,4) is alive
neighbour (5,4) is alive
determine state for Dead cell (4,3) with 3 lively lovely neighbours
(4,3) will be Live in the next generation
checking cell in (5,2)
neighbour (6,3) is alive
determine state for Live cell (5,2) with 1 lively lovely neighbours
(5,2) will be Dead in the next generation
play starts
checking out live cell (5,5)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(4, 6)
(6, 6)
(4, 5)
(5, 6)
(4, 4)
(6, 5)
united set : {(6, 4), (5, 4), (5, 5), (4, 6), (6, 6), (4, 5), (5, 6), (4, 4), (6, 5)}
checking out live cell (6,3)
neighbours set:
(7, 3)
(5, 4)
(6, 4)
(6, 3)
(7, 4)
(6, 2)
(5, 2)
(7, 2)
(5, 3)
united set : {(7, 3), (5, 4), (6, 4), (6, 3), (7, 4), (6, 2), (5, 2), (7, 2), (5, 3)}
checking out live cell (6,4)
neighbours set:
(7, 3)
(5, 4)
(6, 4)
(5, 5)
(6, 3)
(7, 4)
(7, 5)
(6, 5)
(5, 3)
united set : {(7, 3), (5, 4), (6, 4), (5, 5), (6, 3), (7, 4), (7, 5), (6, 5), (5, 3)}
checking out live cell (5,4)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(4, 5)
(4, 4)
(6, 3)
(4, 3)
(6, 5)
(5, 3)
united set : {(6, 4), (5, 4), (5, 5), (4, 5), (4, 4), (6, 3), (4, 3), (6, 5), (5, 3)}
checking out live cell (4,3)
neighbours set:
(3, 2)
(5, 4)
(3, 3)
(4, 4)
(4, 3)
(3, 4)
(4, 2)
(5, 2)
(5, 3)
united set : {(3, 2), (5, 4), (3, 3), (4, 4), (4, 3), (3, 4), (4, 2), (5, 2), (5, 3)}
process set : {(7, 3), (6, 6), (5, 6), (6, 2), (7, 2), (5, 5), (3, 3), (4, 4), (6, 3), (3, 4), (6, 4), (5, 4), (3, 2), (4, 5), (7, 5), (4, 2), (6, 5), (5, 3), (4, 6), (7, 4), (4, 3), (5, 2)}
checking cell in (7,3)
neighbour (6,3) is alive
neighbour (6,4) is alive
determine state for Dead cell (7,3) with 2 lively lovely neighbours
(7,3) will be Dead in the next generation
checking cell in (6,6)
neighbour (5,5) is alive
determine state for Dead cell (6,6) with 1 lively lovely neighbours
(6,6) will be Dead in the next generation
checking cell in (5,6)
neighbour (5,5) is alive
determine state for Dead cell (5,6) with 1 lively lovely neighbours
(5,6) will be Dead in the next generation
checking cell in (6,2)
neighbour (6,3) is alive
determine state for Dead cell (6,2) with 1 lively lovely neighbours
(6,2) will be Dead in the next generation
checking cell in (7,2)
neighbour (6,3) is alive
determine state for Dead cell (7,2) with 1 lively lovely neighbours
(7,2) will be Dead in the next generation
checking cell in (5,5)
neighbour (5,4) is alive
neighbour (6,4) is alive
determine state for Live cell (5,5) with 2 lively lovely neighbours
(5,5) will be Live in the next generation
checking cell in (3,3)
neighbour (4,3) is alive
determine state for Dead cell (3,3) with 1 lively lovely neighbours
(3,3) will be Dead in the next generation
checking cell in (4,4)
neighbour (4,3) is alive
neighbour (5,4) is alive
neighbour (5,5) is alive
determine state for Dead cell (4,4) with 3 lively lovely neighbours
(4,4) will be Live in the next generation
checking cell in (6,3)
neighbour (5,4) is alive
neighbour (6,4) is alive
determine state for Live cell (6,3) with 2 lively lovely neighbours
(6,3) will be Live in the next generation
checking cell in (3,4)
neighbour (4,3) is alive
determine state for Dead cell (3,4) with 1 lively lovely neighbours
(3,4) will be Dead in the next generation
checking cell in (6,4)
neighbour (6,3) is alive
neighbour (5,4) is alive
neighbour (5,5) is alive
determine state for Live cell (6,4) with 3 lively lovely neighbours
(6,4) will be Live in the next generation
checking cell in (5,4)
neighbour (4,3) is alive
neighbour (6,3) is alive
neighbour (6,4) is alive
neighbour (5,5) is alive
determine state for Live cell (5,4) with 4 lively lovely neighbours
(5,4) will be Dead in the next generation
checking cell in (3,2)
neighbour (4,3) is alive
determine state for Dead cell (3,2) with 1 lively lovely neighbours
(3,2) will be Dead in the next generation
checking cell in (4,5)
neighbour (5,4) is alive
neighbour (5,5) is alive
determine state for Dead cell (4,5) with 2 lively lovely neighbours
(4,5) will be Dead in the next generation
checking cell in (7,5)
neighbour (6,4) is alive
determine state for Dead cell (7,5) with 1 lively lovely neighbours
(7,5) will be Dead in the next generation
checking cell in (4,2)
neighbour (4,3) is alive
determine state for Dead cell (4,2) with 1 lively lovely neighbours
(4,2) will be Dead in the next generation
checking cell in (6,5)
neighbour (5,4) is alive
neighbour (6,4) is alive
neighbour (5,5) is alive
determine state for Dead cell (6,5) with 3 lively lovely neighbours
(6,5) will be Live in the next generation
checking cell in (5,3)
neighbour (4,3) is alive
neighbour (6,3) is alive
neighbour (5,4) is alive
neighbour (6,4) is alive
determine state for Dead cell (5,3) with 4 lively lovely neighbours
(5,3) will be Dead in the next generation
checking cell in (4,6)
neighbour (5,5) is alive
determine state for Dead cell (4,6) with 1 lively lovely neighbours
(4,6) will be Dead in the next generation
checking cell in (7,4)
neighbour (6,3) is alive
neighbour (6,4) is alive
determine state for Dead cell (7,4) with 2 lively lovely neighbours
(7,4) will be Dead in the next generation
checking cell in (4,3)
neighbour (5,4) is alive
determine state for Live cell (4,3) with 1 lively lovely neighbours
(4,3) will be Dead in the next generation
checking cell in (5,2)
neighbour (4,3) is alive
neighbour (6,3) is alive
determine state for Dead cell (5,2) with 2 lively lovely neighbours
(5,2) will be Dead in the next generation
play starts
checking out live cell (5,5)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(4, 6)
(6, 6)
(4, 5)
(5, 6)
(4, 4)
(6, 5)
united set : {(6, 4), (5, 4), (5, 5), (4, 6), (6, 6), (4, 5), (5, 6), (4, 4), (6, 5)}
checking out live cell (4,4)
neighbours set:
(5, 4)
(3, 5)
(3, 3)
(5, 5)
(4, 5)
(4, 4)
(4, 3)
(3, 4)
(5, 3)
united set : {(5, 4), (3, 5), (3, 3), (5, 5), (4, 5), (4, 4), (4, 3), (3, 4), (5, 3)}
checking out live cell (6,3)
neighbours set:
(7, 3)
(5, 4)
(6, 4)
(6, 3)
(7, 4)
(6, 2)
(5, 2)
(7, 2)
(5, 3)
united set : {(7, 3), (5, 4), (6, 4), (6, 3), (7, 4), (6, 2), (5, 2), (7, 2), (5, 3)}
checking out live cell (6,4)
neighbours set:
(7, 3)
(5, 4)
(6, 4)
(5, 5)
(6, 3)
(7, 4)
(7, 5)
(6, 5)
(5, 3)
united set : {(7, 3), (5, 4), (6, 4), (5, 5), (6, 3), (7, 4), (7, 5), (6, 5), (5, 3)}
checking out live cell (6,5)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(6, 6)
(5, 6)
(7, 6)
(7, 4)
(7, 5)
(6, 5)
united set : {(6, 4), (5, 4), (5, 5), (6, 6), (5, 6), (7, 6), (7, 4), (7, 5), (6, 5)}
process set : {(7, 3), (6, 6), (5, 6), (6, 2), (7, 2), (5, 5), (3, 3), (7, 6), (4, 4), (6, 3), (3, 4), (6, 4), (5, 4), (4, 5), (7, 5), (6, 5), (3, 5), (5, 3), (4, 6), (7, 4), (4, 3), (5, 2)}
checking cell in (7,3)
neighbour (6,3) is alive
neighbour (6,4) is alive
determine state for Dead cell (7,3) with 2 lively lovely neighbours
(7,3) will be Dead in the next generation
checking cell in (6,6)
neighbour (5,5) is alive
neighbour (6,5) is alive
determine state for Dead cell (6,6) with 2 lively lovely neighbours
(6,6) will be Dead in the next generation
checking cell in (5,6)
neighbour (5,5) is alive
neighbour (6,5) is alive
determine state for Dead cell (5,6) with 2 lively lovely neighbours
(5,6) will be Dead in the next generation
checking cell in (6,2)
neighbour (6,3) is alive
determine state for Dead cell (6,2) with 1 lively lovely neighbours
(6,2) will be Dead in the next generation
checking cell in (7,2)
neighbour (6,3) is alive
determine state for Dead cell (7,2) with 1 lively lovely neighbours
(7,2) will be Dead in the next generation
checking cell in (5,5)
neighbour (4,4) is alive
neighbour (6,4) is alive
neighbour (6,5) is alive
determine state for Live cell (5,5) with 3 lively lovely neighbours
(5,5) will be Live in the next generation
checking cell in (3,3)
neighbour (4,4) is alive
determine state for Dead cell (3,3) with 1 lively lovely neighbours
(3,3) will be Dead in the next generation
checking cell in (7,6)
neighbour (6,5) is alive
determine state for Dead cell (7,6) with 1 lively lovely neighbours
(7,6) will be Dead in the next generation
checking cell in (4,4)
neighbour (5,5) is alive
determine state for Live cell (4,4) with 1 lively lovely neighbours
(4,4) will be Dead in the next generation
checking cell in (6,3)
neighbour (6,4) is alive
determine state for Live cell (6,3) with 1 lively lovely neighbours
(6,3) will be Dead in the next generation
checking cell in (3,4)
neighbour (4,4) is alive
determine state for Dead cell (3,4) with 1 lively lovely neighbours
(3,4) will be Dead in the next generation
checking cell in (6,4)
neighbour (6,3) is alive
neighbour (5,5) is alive
neighbour (6,5) is alive
determine state for Live cell (6,4) with 3 lively lovely neighbours
(6,4) will be Live in the next generation
checking cell in (5,4)
neighbour (6,3) is alive
neighbour (4,4) is alive
neighbour (6,4) is alive
neighbour (5,5) is alive
neighbour (6,5) is alive
determine state for Dead cell (5,4) with 5 lively lovely neighbours
(5,4) will be Dead in the next generation
checking cell in (4,5)
neighbour (4,4) is alive
neighbour (5,5) is alive
determine state for Dead cell (4,5) with 2 lively lovely neighbours
(4,5) will be Dead in the next generation
checking cell in (7,5)
neighbour (6,4) is alive
neighbour (6,5) is alive
determine state for Dead cell (7,5) with 2 lively lovely neighbours
(7,5) will be Dead in the next generation
checking cell in (6,5)
neighbour (6,4) is alive
neighbour (5,5) is alive
determine state for Live cell (6,5) with 2 lively lovely neighbours
(6,5) will be Live in the next generation
checking cell in (3,5)
neighbour (4,4) is alive
determine state for Dead cell (3,5) with 1 lively lovely neighbours
(3,5) will be Dead in the next generation
checking cell in (5,3)
neighbour (6,3) is alive
neighbour (4,4) is alive
neighbour (6,4) is alive
determine state for Dead cell (5,3) with 3 lively lovely neighbours
(5,3) will be Live in the next generation
checking cell in (4,6)
neighbour (5,5) is alive
determine state for Dead cell (4,6) with 1 lively lovely neighbours
(4,6) will be Dead in the next generation
checking cell in (7,4)
neighbour (6,3) is alive
neighbour (6,4) is alive
neighbour (6,5) is alive
determine state for Dead cell (7,4) with 3 lively lovely neighbours
(7,4) will be Live in the next generation
checking cell in (4,3)
neighbour (4,4) is alive
determine state for Dead cell (4,3) with 1 lively lovely neighbours
(4,3) will be Dead in the next generation
checking cell in (5,2)
neighbour (6,3) is alive
determine state for Dead cell (5,2) with 1 lively lovely neighbours
(5,2) will be Dead in the next generation
play starts
checking out live cell (5,5)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(4, 6)
(6, 6)
(4, 5)
(5, 6)
(4, 4)
(6, 5)
united set : {(6, 4), (5, 4), (5, 5), (4, 6), (6, 6), (4, 5), (5, 6), (4, 4), (6, 5)}
checking out live cell (6,4)
neighbours set:
(7, 3)
(5, 4)
(6, 4)
(5, 5)
(6, 3)
(7, 4)
(7, 5)
(6, 5)
(5, 3)
united set : {(7, 3), (5, 4), (6, 4), (5, 5), (6, 3), (7, 4), (7, 5), (6, 5), (5, 3)}
checking out live cell (6,5)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(6, 6)
(5, 6)
(7, 6)
(7, 4)
(7, 5)
(6, 5)
united set : {(6, 4), (5, 4), (5, 5), (6, 6), (5, 6), (7, 6), (7, 4), (7, 5), (6, 5)}
checking out live cell (5,3)
neighbours set:
(6, 4)
(5, 4)
(4, 4)
(6, 3)
(6, 2)
(4, 3)
(4, 2)
(5, 2)
(5, 3)
united set : {(6, 4), (5, 4), (4, 4), (6, 3), (6, 2), (4, 3), (4, 2), (5, 2), (5, 3)}
checking out live cell (7,4)
neighbours set:
(7, 3)
(8, 3)
(6, 4)
(6, 3)
(7, 4)
(7, 5)
(8, 5)
(6, 5)
(8, 4)
united set : {(7, 3), (8, 3), (6, 4), (6, 3), (7, 4), (7, 5), (8, 5), (6, 5), (8, 4)}
process set : {(7, 3), (6, 6), (5, 6), (6, 2), (8, 5), (5, 5), (7, 6), (4, 4), (6, 3), (6, 4), (5, 4), (4, 5), (7, 5), (4, 2), (6, 5), (5, 3), (8, 3), (4, 6), (7, 4), (4, 3), (5, 2), (8, 4)}
checking cell in (7,3)
neighbour (6,4) is alive
neighbour (7,4) is alive
determine state for Dead cell (7,3) with 2 lively lovely neighbours
(7,3) will be Dead in the next generation
checking cell in (6,6)
neighbour (5,5) is alive
neighbour (6,5) is alive
determine state for Dead cell (6,6) with 2 lively lovely neighbours
(6,6) will be Dead in the next generation
checking cell in (5,6)
neighbour (5,5) is alive
neighbour (6,5) is alive
determine state for Dead cell (5,6) with 2 lively lovely neighbours
(5,6) will be Dead in the next generation
checking cell in (6,2)
neighbour (5,3) is alive
determine state for Dead cell (6,2) with 1 lively lovely neighbours
(6,2) will be Dead in the next generation
checking cell in (8,5)
neighbour (7,4) is alive
determine state for Dead cell (8,5) with 1 lively lovely neighbours
(8,5) will be Dead in the next generation
checking cell in (5,5)
neighbour (6,4) is alive
neighbour (6,5) is alive
determine state for Live cell (5,5) with 2 lively lovely neighbours
(5,5) will be Live in the next generation
checking cell in (7,6)
neighbour (6,5) is alive
determine state for Dead cell (7,6) with 1 lively lovely neighbours
(7,6) will be Dead in the next generation
checking cell in (4,4)
neighbour (5,3) is alive
neighbour (5,5) is alive
determine state for Dead cell (4,4) with 2 lively lovely neighbours
(4,4) will be Dead in the next generation
checking cell in (6,3)
neighbour (5,3) is alive
neighbour (6,4) is alive
neighbour (7,4) is alive
determine state for Dead cell (6,3) with 3 lively lovely neighbours
(6,3) will be Live in the next generation
checking cell in (6,4)
neighbour (5,3) is alive
neighbour (7,4) is alive
neighbour (5,5) is alive
neighbour (6,5) is alive
determine state for Live cell (6,4) with 4 lively lovely neighbours
(6,4) will be Dead in the next generation
checking cell in (5,4)
neighbour (5,3) is alive
neighbour (6,4) is alive
neighbour (5,5) is alive
neighbour (6,5) is alive
determine state for Dead cell (5,4) with 4 lively lovely neighbours
(5,4) will be Dead in the next generation
checking cell in (4,5)
neighbour (5,5) is alive
determine state for Dead cell (4,5) with 1 lively lovely neighbours
(4,5) will be Dead in the next generation
checking cell in (7,5)
neighbour (6,4) is alive
neighbour (7,4) is alive
neighbour (6,5) is alive
determine state for Dead cell (7,5) with 3 lively lovely neighbours
(7,5) will be Live in the next generation
checking cell in (4,2)
neighbour (5,3) is alive
determine state for Dead cell (4,2) with 1 lively lovely neighbours
(4,2) will be Dead in the next generation
checking cell in (6,5)
neighbour (6,4) is alive
neighbour (7,4) is alive
neighbour (5,5) is alive
determine state for Live cell (6,5) with 3 lively lovely neighbours
(6,5) will be Live in the next generation
checking cell in (5,3)
neighbour (6,4) is alive
determine state for Live cell (5,3) with 1 lively lovely neighbours
(5,3) will be Dead in the next generation
checking cell in (8,3)
neighbour (7,4) is alive
determine state for Dead cell (8,3) with 1 lively lovely neighbours
(8,3) will be Dead in the next generation
checking cell in (4,6)
neighbour (5,5) is alive
determine state for Dead cell (4,6) with 1 lively lovely neighbours
(4,6) will be Dead in the next generation
checking cell in (7,4)
neighbour (6,4) is alive
neighbour (6,5) is alive
determine state for Live cell (7,4) with 2 lively lovely neighbours
(7,4) will be Live in the next generation
checking cell in (4,3)
neighbour (5,3) is alive
determine state for Dead cell (4,3) with 1 lively lovely neighbours
(4,3) will be Dead in the next generation
checking cell in (5,2)
neighbour (5,3) is alive
determine state for Dead cell (5,2) with 1 lively lovely neighbours
(5,2) will be Dead in the next generation
checking cell in (8,4)
neighbour (7,4) is alive
determine state for Dead cell (8,4) with 1 lively lovely neighbours
(8,4) will be Dead in the next generation
play starts
checking out live cell (5,5)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(4, 6)
(6, 6)
(4, 5)
(5, 6)
(4, 4)
(6, 5)
united set : {(6, 4), (5, 4), (5, 5), (4, 6), (6, 6), (4, 5), (5, 6), (4, 4), (6, 5)}
checking out live cell (6,3)
neighbours set:
(7, 3)
(5, 4)
(6, 4)
(6, 3)
(7, 4)
(6, 2)
(5, 2)
(7, 2)
(5, 3)
united set : {(7, 3), (5, 4), (6, 4), (6, 3), (7, 4), (6, 2), (5, 2), (7, 2), (5, 3)}
checking out live cell (7,5)
neighbours set:
(6, 4)
(6, 6)
(7, 6)
(7, 4)
(7, 5)
(8, 6)
(8, 5)
(6, 5)
(8, 4)
united set : {(6, 4), (6, 6), (7, 6), (7, 4), (7, 5), (8, 6), (8, 5), (6, 5), (8, 4)}
checking out live cell (6,5)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(6, 6)
(5, 6)
(7, 6)
(7, 4)
(7, 5)
(6, 5)
united set : {(6, 4), (5, 4), (5, 5), (6, 6), (5, 6), (7, 6), (7, 4), (7, 5), (6, 5)}
checking out live cell (7,4)
neighbours set:
(7, 3)
(8, 3)
(6, 4)
(6, 3)
(7, 4)
(7, 5)
(8, 5)
(6, 5)
(8, 4)
united set : {(7, 3), (8, 3), (6, 4), (6, 3), (7, 4), (7, 5), (8, 5), (6, 5), (8, 4)}
process set : {(7, 3), (6, 6), (5, 6), (6, 2), (8, 5), (7, 2), (5, 5), (7, 6), (4, 4), (6, 3), (8, 6), (6, 4), (5, 4), (4, 5), (7, 5), (6, 5), (5, 3), (8, 3), (4, 6), (7, 4), (5, 2), (8, 4)}
checking cell in (7,3)
neighbour (6,3) is alive
neighbour (7,4) is alive
determine state for Dead cell (7,3) with 2 lively lovely neighbours
(7,3) will be Dead in the next generation
checking cell in (6,6)
neighbour (5,5) is alive
neighbour (6,5) is alive
neighbour (7,5) is alive
determine state for Dead cell (6,6) with 3 lively lovely neighbours
(6,6) will be Live in the next generation
checking cell in (5,6)
neighbour (5,5) is alive
neighbour (6,5) is alive
determine state for Dead cell (5,6) with 2 lively lovely neighbours
(5,6) will be Dead in the next generation
checking cell in (6,2)
neighbour (6,3) is alive
determine state for Dead cell (6,2) with 1 lively lovely neighbours
(6,2) will be Dead in the next generation
checking cell in (8,5)
neighbour (7,4) is alive
neighbour (7,5) is alive
determine state for Dead cell (8,5) with 2 lively lovely neighbours
(8,5) will be Dead in the next generation
checking cell in (7,2)
neighbour (6,3) is alive
determine state for Dead cell (7,2) with 1 lively lovely neighbours
(7,2) will be Dead in the next generation
checking cell in (5,5)
neighbour (6,5) is alive
determine state for Live cell (5,5) with 1 lively lovely neighbours
(5,5) will be Dead in the next generation
checking cell in (7,6)
neighbour (6,5) is alive
neighbour (7,5) is alive
determine state for Dead cell (7,6) with 2 lively lovely neighbours
(7,6) will be Dead in the next generation
checking cell in (4,4)
neighbour (5,5) is alive
determine state for Dead cell (4,4) with 1 lively lovely neighbours
(4,4) will be Dead in the next generation
checking cell in (6,3)
neighbour (7,4) is alive
determine state for Live cell (6,3) with 1 lively lovely neighbours
(6,3) will be Dead in the next generation
checking cell in (8,6)
neighbour (7,5) is alive
determine state for Dead cell (8,6) with 1 lively lovely neighbours
(8,6) will be Dead in the next generation
checking cell in (6,4)
neighbour (6,3) is alive
neighbour (7,4) is alive
neighbour (5,5) is alive
neighbour (6,5) is alive
neighbour (7,5) is alive
determine state for Dead cell (6,4) with 5 lively lovely neighbours
(6,4) will be Dead in the next generation
checking cell in (5,4)
neighbour (6,3) is alive
neighbour (5,5) is alive
neighbour (6,5) is alive
determine state for Dead cell (5,4) with 3 lively lovely neighbours
(5,4) will be Live in the next generation
checking cell in (4,5)
neighbour (5,5) is alive
determine state for Dead cell (4,5) with 1 lively lovely neighbours
(4,5) will be Dead in the next generation
checking cell in (7,5)
neighbour (7,4) is alive
neighbour (6,5) is alive
determine state for Live cell (7,5) with 2 lively lovely neighbours
(7,5) will be Live in the next generation
checking cell in (6,5)
neighbour (7,4) is alive
neighbour (5,5) is alive
neighbour (7,5) is alive
determine state for Live cell (6,5) with 3 lively lovely neighbours
(6,5) will be Live in the next generation
checking cell in (5,3)
neighbour (6,3) is alive
determine state for Dead cell (5,3) with 1 lively lovely neighbours
(5,3) will be Dead in the next generation
checking cell in (8,3)
neighbour (7,4) is alive
determine state for Dead cell (8,3) with 1 lively lovely neighbours
(8,3) will be Dead in the next generation
checking cell in (4,6)
neighbour (5,5) is alive
determine state for Dead cell (4,6) with 1 lively lovely neighbours
(4,6) will be Dead in the next generation
checking cell in (7,4)
neighbour (6,3) is alive
neighbour (6,5) is alive
neighbour (7,5) is alive
determine state for Live cell (7,4) with 3 lively lovely neighbours
(7,4) will be Live in the next generation
checking cell in (5,2)
neighbour (6,3) is alive
determine state for Dead cell (5,2) with 1 lively lovely neighbours
(5,2) will be Dead in the next generation
checking cell in (8,4)
neighbour (7,4) is alive
neighbour (7,5) is alive
determine state for Dead cell (8,4) with 2 lively lovely neighbours
(8,4) will be Dead in the next generation
play starts
checking out live cell (6,6)
neighbours set:
(6, 7)
(5, 5)
(6, 6)
(5, 6)
(7, 6)
(5, 7)
(7, 7)
(7, 5)
(6, 5)
united set : {(6, 7), (5, 5), (6, 6), (5, 6), (7, 6), (5, 7), (7, 7), (7, 5), (6, 5)}
checking out live cell (5,4)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(4, 5)
(4, 4)
(6, 3)
(4, 3)
(6, 5)
(5, 3)
united set : {(6, 4), (5, 4), (5, 5), (4, 5), (4, 4), (6, 3), (4, 3), (6, 5), (5, 3)}
checking out live cell (7,5)
neighbours set:
(6, 4)
(6, 6)
(7, 6)
(7, 4)
(7, 5)
(8, 6)
(8, 5)
(6, 5)
(8, 4)
united set : {(6, 4), (6, 6), (7, 6), (7, 4), (7, 5), (8, 6), (8, 5), (6, 5), (8, 4)}
checking out live cell (6,5)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(6, 6)
(5, 6)
(7, 6)
(7, 4)
(7, 5)
(6, 5)
united set : {(6, 4), (5, 4), (5, 5), (6, 6), (5, 6), (7, 6), (7, 4), (7, 5), (6, 5)}
checking out live cell (7,4)
neighbours set:
(7, 3)
(8, 3)
(6, 4)
(6, 3)
(7, 4)
(7, 5)
(8, 5)
(6, 5)
(8, 4)
united set : {(7, 3), (8, 3), (6, 4), (6, 3), (7, 4), (7, 5), (8, 5), (6, 5), (8, 4)}
process set : {(7, 3), (6, 6), (5, 6), (7, 7), (8, 5), (6, 7), (5, 5), (7, 6), (4, 4), (6, 3), (8, 6), (6, 4), (5, 4), (4, 5), (7, 5), (6, 5), (5, 3), (8, 3), (5, 7), (7, 4), (4, 3), (8, 4)}
checking cell in (7,3)
neighbour (7,4) is alive
determine state for Dead cell (7,3) with 1 lively lovely neighbours
(7,3) will be Dead in the next generation
checking cell in (6,6)
neighbour (6,5) is alive
neighbour (7,5) is alive
determine state for Live cell (6,6) with 2 lively lovely neighbours
(6,6) will be Live in the next generation
checking cell in (5,6)
neighbour (6,5) is alive
neighbour (6,6) is alive
determine state for Dead cell (5,6) with 2 lively lovely neighbours
(5,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (6,6) is alive
determine state for Dead cell (7,7) with 1 lively lovely neighbours
(7,7) will be Dead in the next generation
checking cell in (8,5)
neighbour (7,4) is alive
neighbour (7,5) is alive
determine state for Dead cell (8,5) with 2 lively lovely neighbours
(8,5) will be Dead in the next generation
checking cell in (6,7)
neighbour (6,6) is alive
determine state for Dead cell (6,7) with 1 lively lovely neighbours
(6,7) will be Dead in the next generation
checking cell in (5,5)
neighbour (5,4) is alive
neighbour (6,5) is alive
neighbour (6,6) is alive
determine state for Dead cell (5,5) with 3 lively lovely neighbours
(5,5) will be Live in the next generation
checking cell in (7,6)
neighbour (6,5) is alive
neighbour (7,5) is alive
neighbour (6,6) is alive
determine state for Dead cell (7,6) with 3 lively lovely neighbours
(7,6) will be Live in the next generation
checking cell in (4,4)
neighbour (5,4) is alive
determine state for Dead cell (4,4) with 1 lively lovely neighbours
(4,4) will be Dead in the next generation
checking cell in (6,3)
neighbour (5,4) is alive
neighbour (7,4) is alive
determine state for Dead cell (6,3) with 2 lively lovely neighbours
(6,3) will be Dead in the next generation
checking cell in (8,6)
neighbour (7,5) is alive
determine state for Dead cell (8,6) with 1 lively lovely neighbours
(8,6) will be Dead in the next generation
checking cell in (6,4)
neighbour (5,4) is alive
neighbour (7,4) is alive
neighbour (6,5) is alive
neighbour (7,5) is alive
determine state for Dead cell (6,4) with 4 lively lovely neighbours
(6,4) will be Dead in the next generation
checking cell in (5,4)
neighbour (6,5) is alive
determine state for Live cell (5,4) with 1 lively lovely neighbours
(5,4) will be Dead in the next generation
checking cell in (4,5)
neighbour (5,4) is alive
determine state for Dead cell (4,5) with 1 lively lovely neighbours
(4,5) will be Dead in the next generation
checking cell in (7,5)
neighbour (7,4) is alive
neighbour (6,5) is alive
neighbour (6,6) is alive
determine state for Live cell (7,5) with 3 lively lovely neighbours
(7,5) will be Live in the next generation
checking cell in (6,5)
neighbour (5,4) is alive
neighbour (7,4) is alive
neighbour (7,5) is alive
neighbour (6,6) is alive
determine state for Live cell (6,5) with 4 lively lovely neighbours
(6,5) will be Dead in the next generation
checking cell in (5,3)
neighbour (5,4) is alive
determine state for Dead cell (5,3) with 1 lively lovely neighbours
(5,3) will be Dead in the next generation
checking cell in (8,3)
neighbour (7,4) is alive
determine state for Dead cell (8,3) with 1 lively lovely neighbours
(8,3) will be Dead in the next generation
checking cell in (5,7)
neighbour (6,6) is alive
determine state for Dead cell (5,7) with 1 lively lovely neighbours
(5,7) will be Dead in the next generation
checking cell in (7,4)
neighbour (6,5) is alive
neighbour (7,5) is alive
determine state for Live cell (7,4) with 2 lively lovely neighbours
(7,4) will be Live in the next generation
checking cell in (4,3)
neighbour (5,4) is alive
determine state for Dead cell (4,3) with 1 lively lovely neighbours
(4,3) will be Dead in the next generation
checking cell in (8,4)
neighbour (7,4) is alive
neighbour (7,5) is alive
determine state for Dead cell (8,4) with 2 lively lovely neighbours
(8,4) will be Dead in the next generation
play starts
checking out live cell (6,6)
neighbours set:
(6, 7)
(5, 5)
(6, 6)
(5, 6)
(7, 6)
(5, 7)
(7, 7)
(7, 5)
(6, 5)
united set : {(6, 7), (5, 5), (6, 6), (5, 6), (7, 6), (5, 7), (7, 7), (7, 5), (6, 5)}
checking out live cell (5,5)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(4, 6)
(6, 6)
(4, 5)
(5, 6)
(4, 4)
(6, 5)
united set : {(6, 4), (5, 4), (5, 5), (4, 6), (6, 6), (4, 5), (5, 6), (4, 4), (6, 5)}
checking out live cell (7,6)
neighbours set:
(6, 7)
(6, 6)
(7, 6)
(7, 7)
(7, 5)
(8, 7)
(8, 6)
(8, 5)
(6, 5)
united set : {(6, 7), (6, 6), (7, 6), (7, 7), (7, 5), (8, 7), (8, 6), (8, 5), (6, 5)}
checking out live cell (7,5)
neighbours set:
(6, 4)
(6, 6)
(7, 6)
(7, 4)
(7, 5)
(8, 6)
(8, 5)
(6, 5)
(8, 4)
united set : {(6, 4), (6, 6), (7, 6), (7, 4), (7, 5), (8, 6), (8, 5), (6, 5), (8, 4)}
checking out live cell (7,4)
neighbours set:
(7, 3)
(8, 3)
(6, 4)
(6, 3)
(7, 4)
(7, 5)
(8, 5)
(6, 5)
(8, 4)
united set : {(7, 3), (8, 3), (6, 4), (6, 3), (7, 4), (7, 5), (8, 5), (6, 5), (8, 4)}
process set : {(7, 3), (6, 6), (5, 6), (7, 7), (8, 5), (6, 7), (5, 5), (7, 6), (4, 4), (6, 3), (8, 6), (6, 4), (5, 4), (4, 5), (7, 5), (8, 7), (6, 5), (8, 3), (4, 6), (5, 7), (7, 4), (8, 4)}
checking cell in (7,3)
neighbour (7,4) is alive
determine state for Dead cell (7,3) with 1 lively lovely neighbours
(7,3) will be Dead in the next generation
checking cell in (6,6)
neighbour (5,5) is alive
neighbour (7,5) is alive
neighbour (7,6) is alive
determine state for Live cell (6,6) with 3 lively lovely neighbours
(6,6) will be Live in the next generation
checking cell in (5,6)
neighbour (5,5) is alive
neighbour (6,6) is alive
determine state for Dead cell (5,6) with 2 lively lovely neighbours
(5,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (6,6) is alive
neighbour (7,6) is alive
determine state for Dead cell (7,7) with 2 lively lovely neighbours
(7,7) will be Dead in the next generation
checking cell in (8,5)
neighbour (7,4) is alive
neighbour (7,5) is alive
neighbour (7,6) is alive
determine state for Dead cell (8,5) with 3 lively lovely neighbours
(8,5) will be Live in the next generation
checking cell in (6,7)
neighbour (6,6) is alive
neighbour (7,6) is alive
determine state for Dead cell (6,7) with 2 lively lovely neighbours
(6,7) will be Dead in the next generation
checking cell in (5,5)
neighbour (6,6) is alive
determine state for Live cell (5,5) with 1 lively lovely neighbours
(5,5) will be Dead in the next generation
checking cell in (7,6)
neighbour (7,5) is alive
neighbour (6,6) is alive
determine state for Live cell (7,6) with 2 lively lovely neighbours
(7,6) will be Live in the next generation
checking cell in (4,4)
neighbour (5,5) is alive
determine state for Dead cell (4,4) with 1 lively lovely neighbours
(4,4) will be Dead in the next generation
checking cell in (6,3)
neighbour (7,4) is alive
determine state for Dead cell (6,3) with 1 lively lovely neighbours
(6,3) will be Dead in the next generation
checking cell in (8,6)
neighbour (7,5) is alive
neighbour (7,6) is alive
determine state for Dead cell (8,6) with 2 lively lovely neighbours
(8,6) will be Dead in the next generation
checking cell in (6,4)
neighbour (7,4) is alive
neighbour (5,5) is alive
neighbour (7,5) is alive
determine state for Dead cell (6,4) with 3 lively lovely neighbours
(6,4) will be Live in the next generation
checking cell in (5,4)
neighbour (5,5) is alive
determine state for Dead cell (5,4) with 1 lively lovely neighbours
(5,4) will be Dead in the next generation
checking cell in (4,5)
neighbour (5,5) is alive
determine state for Dead cell (4,5) with 1 lively lovely neighbours
(4,5) will be Dead in the next generation
checking cell in (7,5)
neighbour (7,4) is alive
neighbour (6,6) is alive
neighbour (7,6) is alive
determine state for Live cell (7,5) with 3 lively lovely neighbours
(7,5) will be Live in the next generation
checking cell in (8,7)
neighbour (7,6) is alive
determine state for Dead cell (8,7) with 1 lively lovely neighbours
(8,7) will be Dead in the next generation
checking cell in (6,5)
neighbour (7,4) is alive
neighbour (5,5) is alive
neighbour (7,5) is alive
neighbour (6,6) is alive
neighbour (7,6) is alive
determine state for Dead cell (6,5) with 5 lively lovely neighbours
(6,5) will be Dead in the next generation
checking cell in (8,3)
neighbour (7,4) is alive
determine state for Dead cell (8,3) with 1 lively lovely neighbours
(8,3) will be Dead in the next generation
checking cell in (4,6)
neighbour (5,5) is alive
determine state for Dead cell (4,6) with 1 lively lovely neighbours
(4,6) will be Dead in the next generation
checking cell in (5,7)
neighbour (6,6) is alive
determine state for Dead cell (5,7) with 1 lively lovely neighbours
(5,7) will be Dead in the next generation
checking cell in (7,4)
neighbour (7,5) is alive
determine state for Live cell (7,4) with 1 lively lovely neighbours
(7,4) will be Dead in the next generation
checking cell in (8,4)
neighbour (7,4) is alive
neighbour (7,5) is alive
determine state for Dead cell (8,4) with 2 lively lovely neighbours
(8,4) will be Dead in the next generation
play starts
checking out live cell (6,6)
neighbours set:
(6, 7)
(5, 5)
(6, 6)
(5, 6)
(7, 6)
(5, 7)
(7, 7)
(7, 5)
(6, 5)
united set : {(6, 7), (5, 5), (6, 6), (5, 6), (7, 6), (5, 7), (7, 7), (7, 5), (6, 5)}
checking out live cell (8,5)
neighbours set:
(8, 6)
(7, 6)
(7, 4)
(7, 5)
(9, 4)
(9, 6)
(9, 5)
(8, 5)
(8, 4)
united set : {(8, 6), (7, 6), (7, 4), (7, 5), (9, 4), (9, 6), (9, 5), (8, 5), (8, 4)}
checking out live cell (7,6)
neighbours set:
(6, 7)
(6, 6)
(7, 6)
(7, 7)
(7, 5)
(8, 7)
(8, 6)
(8, 5)
(6, 5)
united set : {(6, 7), (6, 6), (7, 6), (7, 7), (7, 5), (8, 7), (8, 6), (8, 5), (6, 5)}
checking out live cell (6,4)
neighbours set:
(7, 3)
(5, 4)
(6, 4)
(5, 5)
(6, 3)
(7, 4)
(7, 5)
(6, 5)
(5, 3)
united set : {(7, 3), (5, 4), (6, 4), (5, 5), (6, 3), (7, 4), (7, 5), (6, 5), (5, 3)}
checking out live cell (7,5)
neighbours set:
(6, 4)
(6, 6)
(7, 6)
(7, 4)
(7, 5)
(8, 6)
(8, 5)
(6, 5)
(8, 4)
united set : {(6, 4), (6, 6), (7, 6), (7, 4), (7, 5), (8, 6), (8, 5), (6, 5), (8, 4)}
process set : {(7, 3), (6, 6), (5, 6), (7, 7), (9, 4), (8, 5), (6, 7), (5, 5), (7, 6), (6, 3), (8, 6), (6, 4), (5, 4), (7, 5), (8, 7), (9, 6), (6, 5), (5, 3), (5, 7), (7, 4), (9, 5), (8, 4)}
checking cell in (7,3)
neighbour (6,4) is alive
determine state for Dead cell (7,3) with 1 lively lovely neighbours
(7,3) will be Dead in the next generation
checking cell in (6,6)
neighbour (7,5) is alive
neighbour (7,6) is alive
determine state for Live cell (6,6) with 2 lively lovely neighbours
(6,6) will be Live in the next generation
checking cell in (5,6)
neighbour (6,6) is alive
determine state for Dead cell (5,6) with 1 lively lovely neighbours
(5,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (6,6) is alive
neighbour (7,6) is alive
determine state for Dead cell (7,7) with 2 lively lovely neighbours
(7,7) will be Dead in the next generation
checking cell in (9,4)
neighbour (8,5) is alive
determine state for Dead cell (9,4) with 1 lively lovely neighbours
(9,4) will be Dead in the next generation
checking cell in (8,5)
neighbour (7,5) is alive
neighbour (7,6) is alive
determine state for Live cell (8,5) with 2 lively lovely neighbours
(8,5) will be Live in the next generation
checking cell in (6,7)
neighbour (6,6) is alive
neighbour (7,6) is alive
determine state for Dead cell (6,7) with 2 lively lovely neighbours
(6,7) will be Dead in the next generation
checking cell in (5,5)
neighbour (6,4) is alive
neighbour (6,6) is alive
determine state for Dead cell (5,5) with 2 lively lovely neighbours
(5,5) will be Dead in the next generation
checking cell in (7,6)
neighbour (7,5) is alive
neighbour (8,5) is alive
neighbour (6,6) is alive
determine state for Live cell (7,6) with 3 lively lovely neighbours
(7,6) will be Live in the next generation
checking cell in (6,3)
neighbour (6,4) is alive
determine state for Dead cell (6,3) with 1 lively lovely neighbours
(6,3) will be Dead in the next generation
checking cell in (8,6)
neighbour (7,5) is alive
neighbour (8,5) is alive
neighbour (7,6) is alive
determine state for Dead cell (8,6) with 3 lively lovely neighbours
(8,6) will be Live in the next generation
checking cell in (6,4)
neighbour (7,5) is alive
determine state for Live cell (6,4) with 1 lively lovely neighbours
(6,4) will be Dead in the next generation
checking cell in (5,4)
neighbour (6,4) is alive
determine state for Dead cell (5,4) with 1 lively lovely neighbours
(5,4) will be Dead in the next generation
checking cell in (7,5)
neighbour (6,4) is alive
neighbour (8,5) is alive
neighbour (6,6) is alive
neighbour (7,6) is alive
determine state for Live cell (7,5) with 4 lively lovely neighbours
(7,5) will be Dead in the next generation
checking cell in (8,7)
neighbour (7,6) is alive
determine state for Dead cell (8,7) with 1 lively lovely neighbours
(8,7) will be Dead in the next generation
checking cell in (9,6)
neighbour (8,5) is alive
determine state for Dead cell (9,6) with 1 lively lovely neighbours
(9,6) will be Dead in the next generation
checking cell in (6,5)
neighbour (6,4) is alive
neighbour (7,5) is alive
neighbour (6,6) is alive
neighbour (7,6) is alive
determine state for Dead cell (6,5) with 4 lively lovely neighbours
(6,5) will be Dead in the next generation
checking cell in (5,3)
neighbour (6,4) is alive
determine state for Dead cell (5,3) with 1 lively lovely neighbours
(5,3) will be Dead in the next generation
checking cell in (5,7)
neighbour (6,6) is alive
determine state for Dead cell (5,7) with 1 lively lovely neighbours
(5,7) will be Dead in the next generation
checking cell in (7,4)
neighbour (6,4) is alive
neighbour (7,5) is alive
neighbour (8,5) is alive
determine state for Dead cell (7,4) with 3 lively lovely neighbours
(7,4) will be Live in the next generation
checking cell in (9,5)
neighbour (8,5) is alive
determine state for Dead cell (9,5) with 1 lively lovely neighbours
(9,5) will be Dead in the next generation
checking cell in (8,4)
neighbour (7,5) is alive
neighbour (8,5) is alive
determine state for Dead cell (8,4) with 2 lively lovely neighbours
(8,4) will be Dead in the next generation
play starts
checking out live cell (6,6)
neighbours set:
(6, 7)
(5, 5)
(6, 6)
(5, 6)
(7, 6)
(5, 7)
(7, 7)
(7, 5)
(6, 5)
united set : {(6, 7), (5, 5), (6, 6), (5, 6), (7, 6), (5, 7), (7, 7), (7, 5), (6, 5)}
checking out live cell (8,5)
neighbours set:
(8, 6)
(7, 6)
(7, 4)
(7, 5)
(9, 4)
(9, 6)
(9, 5)
(8, 5)
(8, 4)
united set : {(8, 6), (7, 6), (7, 4), (7, 5), (9, 4), (9, 6), (9, 5), (8, 5), (8, 4)}
checking out live cell (7,6)
neighbours set:
(6, 7)
(6, 6)
(7, 6)
(7, 7)
(7, 5)
(8, 7)
(8, 6)
(8, 5)
(6, 5)
united set : {(6, 7), (6, 6), (7, 6), (7, 7), (7, 5), (8, 7), (8, 6), (8, 5), (6, 5)}
checking out live cell (8,6)
neighbours set:
(8, 6)
(7, 6)
(7, 7)
(7, 5)
(8, 7)
(9, 6)
(9, 5)
(8, 5)
(9, 7)
united set : {(8, 6), (7, 6), (7, 7), (7, 5), (8, 7), (9, 6), (9, 5), (8, 5), (9, 7)}
checking out live cell (7,4)
neighbours set:
(7, 3)
(8, 3)
(6, 4)
(6, 3)
(7, 4)
(7, 5)
(8, 5)
(6, 5)
(8, 4)
united set : {(7, 3), (8, 3), (6, 4), (6, 3), (7, 4), (7, 5), (8, 5), (6, 5), (8, 4)}
process set : {(7, 3), (6, 6), (5, 6), (7, 7), (9, 4), (8, 5), (6, 7), (5, 5), (7, 6), (6, 3), (8, 6), (9, 7), (6, 4), (7, 5), (8, 7), (9, 6), (6, 5), (8, 3), (5, 7), (7, 4), (9, 5), (8, 4)}
checking cell in (7,3)
neighbour (7,4) is alive
determine state for Dead cell (7,3) with 1 lively lovely neighbours
(7,3) will be Dead in the next generation
checking cell in (6,6)
neighbour (7,6) is alive
determine state for Live cell (6,6) with 1 lively lovely neighbours
(6,6) will be Dead in the next generation
checking cell in (5,6)
neighbour (6,6) is alive
determine state for Dead cell (5,6) with 1 lively lovely neighbours
(5,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (6,6) is alive
neighbour (7,6) is alive
neighbour (8,6) is alive
determine state for Dead cell (7,7) with 3 lively lovely neighbours
(7,7) will be Live in the next generation
checking cell in (9,4)
neighbour (8,5) is alive
determine state for Dead cell (9,4) with 1 lively lovely neighbours
(9,4) will be Dead in the next generation
checking cell in (8,5)
neighbour (7,4) is alive
neighbour (7,6) is alive
neighbour (8,6) is alive
determine state for Live cell (8,5) with 3 lively lovely neighbours
(8,5) will be Live in the next generation
checking cell in (6,7)
neighbour (6,6) is alive
neighbour (7,6) is alive
determine state for Dead cell (6,7) with 2 lively lovely neighbours
(6,7) will be Dead in the next generation
checking cell in (5,5)
neighbour (6,6) is alive
determine state for Dead cell (5,5) with 1 lively lovely neighbours
(5,5) will be Dead in the next generation
checking cell in (7,6)
neighbour (8,5) is alive
neighbour (6,6) is alive
neighbour (8,6) is alive
determine state for Live cell (7,6) with 3 lively lovely neighbours
(7,6) will be Live in the next generation
checking cell in (6,3)
neighbour (7,4) is alive
determine state for Dead cell (6,3) with 1 lively lovely neighbours
(6,3) will be Dead in the next generation
checking cell in (8,6)
neighbour (8,5) is alive
neighbour (7,6) is alive
determine state for Live cell (8,6) with 2 lively lovely neighbours
(8,6) will be Live in the next generation
checking cell in (9,7)
neighbour (8,6) is alive
determine state for Dead cell (9,7) with 1 lively lovely neighbours
(9,7) will be Dead in the next generation
checking cell in (6,4)
neighbour (7,4) is alive
determine state for Dead cell (6,4) with 1 lively lovely neighbours
(6,4) will be Dead in the next generation
checking cell in (7,5)
neighbour (7,4) is alive
neighbour (8,5) is alive
neighbour (6,6) is alive
neighbour (7,6) is alive
neighbour (8,6) is alive
determine state for Dead cell (7,5) with 5 lively lovely neighbours
(7,5) will be Dead in the next generation
checking cell in (8,7)
neighbour (7,6) is alive
neighbour (8,6) is alive
determine state for Dead cell (8,7) with 2 lively lovely neighbours
(8,7) will be Dead in the next generation
checking cell in (9,6)
neighbour (8,5) is alive
neighbour (8,6) is alive
determine state for Dead cell (9,6) with 2 lively lovely neighbours
(9,6) will be Dead in the next generation
checking cell in (6,5)
neighbour (7,4) is alive
neighbour (6,6) is alive
neighbour (7,6) is alive
determine state for Dead cell (6,5) with 3 lively lovely neighbours
(6,5) will be Live in the next generation
checking cell in (8,3)
neighbour (7,4) is alive
determine state for Dead cell (8,3) with 1 lively lovely neighbours
(8,3) will be Dead in the next generation
checking cell in (5,7)
neighbour (6,6) is alive
determine state for Dead cell (5,7) with 1 lively lovely neighbours
(5,7) will be Dead in the next generation
checking cell in (7,4)
neighbour (8,5) is alive
determine state for Live cell (7,4) with 1 lively lovely neighbours
(7,4) will be Dead in the next generation
checking cell in (9,5)
neighbour (8,5) is alive
neighbour (8,6) is alive
determine state for Dead cell (9,5) with 2 lively lovely neighbours
(9,5) will be Dead in the next generation
checking cell in (8,4)
neighbour (7,4) is alive
neighbour (8,5) is alive
determine state for Dead cell (8,4) with 2 lively lovely neighbours
(8,4) will be Dead in the next generation
play starts
checking out live cell (7,7)
neighbours set:
(6, 7)
(6, 8)
(6, 6)
(7, 6)
(7, 7)
(8, 8)
(8, 7)
(8, 6)
(7, 8)
united set : {(6, 7), (6, 8), (6, 6), (7, 6), (7, 7), (8, 8), (8, 7), (8, 6), (7, 8)}
checking out live cell (8,5)
neighbours set:
(8, 6)
(7, 6)
(7, 4)
(7, 5)
(9, 4)
(9, 6)
(9, 5)
(8, 5)
(8, 4)
united set : {(8, 6), (7, 6), (7, 4), (7, 5), (9, 4), (9, 6), (9, 5), (8, 5), (8, 4)}
checking out live cell (7,6)
neighbours set:
(6, 7)
(6, 6)
(7, 6)
(7, 7)
(7, 5)
(8, 7)
(8, 6)
(8, 5)
(6, 5)
united set : {(6, 7), (6, 6), (7, 6), (7, 7), (7, 5), (8, 7), (8, 6), (8, 5), (6, 5)}
checking out live cell (8,6)
neighbours set:
(8, 6)
(7, 6)
(7, 7)
(7, 5)
(8, 7)
(9, 6)
(9, 5)
(8, 5)
(9, 7)
united set : {(8, 6), (7, 6), (7, 7), (7, 5), (8, 7), (9, 6), (9, 5), (8, 5), (9, 7)}
checking out live cell (6,5)
neighbours set:
(6, 4)
(5, 4)
(5, 5)
(6, 6)
(5, 6)
(7, 6)
(7, 4)
(7, 5)
(6, 5)
united set : {(6, 4), (5, 4), (5, 5), (6, 6), (5, 6), (7, 6), (7, 4), (7, 5), (6, 5)}
process set : {(6, 6), (5, 6), (7, 7), (9, 4), (8, 5), (6, 7), (5, 5), (7, 6), (8, 6), (9, 7), (6, 4), (5, 4), (7, 5), (8, 7), (9, 6), (6, 5), (6, 8), (7, 4), (8, 8), (9, 5), (7, 8), (8, 4)}
checking cell in (6,6)
neighbour (6,5) is alive
neighbour (7,6) is alive
neighbour (7,7) is alive
determine state for Dead cell (6,6) with 3 lively lovely neighbours
(6,6) will be Live in the next generation
checking cell in (5,6)
neighbour (6,5) is alive
determine state for Dead cell (5,6) with 1 lively lovely neighbours
(5,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (7,6) is alive
neighbour (8,6) is alive
determine state for Live cell (7,7) with 2 lively lovely neighbours
(7,7) will be Live in the next generation
checking cell in (9,4)
neighbour (8,5) is alive
determine state for Dead cell (9,4) with 1 lively lovely neighbours
(9,4) will be Dead in the next generation
checking cell in (8,5)
neighbour (7,6) is alive
neighbour (8,6) is alive
determine state for Live cell (8,5) with 2 lively lovely neighbours
(8,5) will be Live in the next generation
checking cell in (6,7)
neighbour (7,6) is alive
neighbour (7,7) is alive
determine state for Dead cell (6,7) with 2 lively lovely neighbours
(6,7) will be Dead in the next generation
checking cell in (5,5)
neighbour (6,5) is alive
determine state for Dead cell (5,5) with 1 lively lovely neighbours
(5,5) will be Dead in the next generation
checking cell in (7,6)
neighbour (6,5) is alive
neighbour (8,5) is alive
neighbour (8,6) is alive
neighbour (7,7) is alive
determine state for Live cell (7,6) with 4 lively lovely neighbours
(7,6) will be Dead in the next generation
checking cell in (8,6)
neighbour (8,5) is alive
neighbour (7,6) is alive
neighbour (7,7) is alive
determine state for Live cell (8,6) with 3 lively lovely neighbours
(8,6) will be Live in the next generation
checking cell in (9,7)
neighbour (8,6) is alive
determine state for Dead cell (9,7) with 1 lively lovely neighbours
(9,7) will be Dead in the next generation
checking cell in (6,4)
neighbour (6,5) is alive
determine state for Dead cell (6,4) with 1 lively lovely neighbours
(6,4) will be Dead in the next generation
checking cell in (5,4)
neighbour (6,5) is alive
determine state for Dead cell (5,4) with 1 lively lovely neighbours
(5,4) will be Dead in the next generation
checking cell in (7,5)
neighbour (6,5) is alive
neighbour (8,5) is alive
neighbour (7,6) is alive
neighbour (8,6) is alive
determine state for Dead cell (7,5) with 4 lively lovely neighbours
(7,5) will be Dead in the next generation
checking cell in (8,7)
neighbour (7,6) is alive
neighbour (8,6) is alive
neighbour (7,7) is alive
determine state for Dead cell (8,7) with 3 lively lovely neighbours
(8,7) will be Live in the next generation
checking cell in (9,6)
neighbour (8,5) is alive
neighbour (8,6) is alive
determine state for Dead cell (9,6) with 2 lively lovely neighbours
(9,6) will be Dead in the next generation
checking cell in (6,5)
neighbour (7,6) is alive
determine state for Live cell (6,5) with 1 lively lovely neighbours
(6,5) will be Dead in the next generation
checking cell in (6,8)
neighbour (7,7) is alive
determine state for Dead cell (6,8) with 1 lively lovely neighbours
(6,8) will be Dead in the next generation
checking cell in (7,4)
neighbour (6,5) is alive
neighbour (8,5) is alive
determine state for Dead cell (7,4) with 2 lively lovely neighbours
(7,4) will be Dead in the next generation
checking cell in (8,8)
neighbour (7,7) is alive
determine state for Dead cell (8,8) with 1 lively lovely neighbours
(8,8) will be Dead in the next generation
checking cell in (9,5)
neighbour (8,5) is alive
neighbour (8,6) is alive
determine state for Dead cell (9,5) with 2 lively lovely neighbours
(9,5) will be Dead in the next generation
checking cell in (7,8)
neighbour (7,7) is alive
determine state for Dead cell (7,8) with 1 lively lovely neighbours
(7,8) will be Dead in the next generation
checking cell in (8,4)
neighbour (8,5) is alive
determine state for Dead cell (8,4) with 1 lively lovely neighbours
(8,4) will be Dead in the next generation
play starts
checking out live cell (6,6)
neighbours set:
(6, 7)
(5, 5)
(6, 6)
(5, 6)
(7, 6)
(5, 7)
(7, 7)
(7, 5)
(6, 5)
united set : {(6, 7), (5, 5), (6, 6), (5, 6), (7, 6), (5, 7), (7, 7), (7, 5), (6, 5)}
checking out live cell (7,7)
neighbours set:
(6, 7)
(6, 8)
(6, 6)
(7, 6)
(7, 7)
(8, 8)
(8, 7)
(8, 6)
(7, 8)
united set : {(6, 7), (6, 8), (6, 6), (7, 6), (7, 7), (8, 8), (8, 7), (8, 6), (7, 8)}
checking out live cell (8,5)
neighbours set:
(8, 6)
(7, 6)
(7, 4)
(7, 5)
(9, 4)
(9, 6)
(9, 5)
(8, 5)
(8, 4)
united set : {(8, 6), (7, 6), (7, 4), (7, 5), (9, 4), (9, 6), (9, 5), (8, 5), (8, 4)}
checking out live cell (8,6)
neighbours set:
(8, 6)
(7, 6)
(7, 7)
(7, 5)
(8, 7)
(9, 6)
(9, 5)
(8, 5)
(9, 7)
united set : {(8, 6), (7, 6), (7, 7), (7, 5), (8, 7), (9, 6), (9, 5), (8, 5), (9, 7)}
checking out live cell (8,7)
neighbours set:
(7, 8)
(7, 6)
(9, 8)
(7, 7)
(8, 8)
(8, 7)
(8, 6)
(9, 6)
(9, 7)
united set : {(7, 8), (7, 6), (9, 8), (7, 7), (8, 8), (8, 7), (8, 6), (9, 6), (9, 7)}
process set : {(6, 6), (5, 6), (9, 8), (7, 7), (9, 4), (8, 5), (6, 7), (5, 5), (7, 6), (8, 6), (9, 7), (7, 5), (8, 7), (9, 6), (6, 5), (6, 8), (5, 7), (7, 4), (8, 8), (9, 5), (7, 8), (8, 4)}
checking cell in (6,6)
neighbour (7,7) is alive
determine state for Live cell (6,6) with 1 lively lovely neighbours
(6,6) will be Dead in the next generation
checking cell in (5,6)
neighbour (6,6) is alive
determine state for Dead cell (5,6) with 1 lively lovely neighbours
(5,6) will be Dead in the next generation
checking cell in (9,8)
neighbour (8,7) is alive
determine state for Dead cell (9,8) with 1 lively lovely neighbours
(9,8) will be Dead in the next generation
checking cell in (7,7)
neighbour (6,6) is alive
neighbour (8,6) is alive
neighbour (8,7) is alive
determine state for Live cell (7,7) with 3 lively lovely neighbours
(7,7) will be Live in the next generation
checking cell in (9,4)
neighbour (8,5) is alive
determine state for Dead cell (9,4) with 1 lively lovely neighbours
(9,4) will be Dead in the next generation
checking cell in (8,5)
neighbour (8,6) is alive
determine state for Live cell (8,5) with 1 lively lovely neighbours
(8,5) will be Dead in the next generation
checking cell in (6,7)
neighbour (6,6) is alive
neighbour (7,7) is alive
determine state for Dead cell (6,7) with 2 lively lovely neighbours
(6,7) will be Dead in the next generation
checking cell in (5,5)
neighbour (6,6) is alive
determine state for Dead cell (5,5) with 1 lively lovely neighbours
(5,5) will be Dead in the next generation
checking cell in (7,6)
neighbour (8,5) is alive
neighbour (6,6) is alive
neighbour (8,6) is alive
neighbour (7,7) is alive
neighbour (8,7) is alive
determine state for Dead cell (7,6) with 5 lively lovely neighbours
(7,6) will be Dead in the next generation
checking cell in (8,6)
neighbour (8,5) is alive
neighbour (7,7) is alive
neighbour (8,7) is alive
determine state for Live cell (8,6) with 3 lively lovely neighbours
(8,6) will be Live in the next generation
checking cell in (9,7)
neighbour (8,6) is alive
neighbour (8,7) is alive
determine state for Dead cell (9,7) with 2 lively lovely neighbours
(9,7) will be Dead in the next generation
checking cell in (7,5)
neighbour (8,5) is alive
neighbour (6,6) is alive
neighbour (8,6) is alive
determine state for Dead cell (7,5) with 3 lively lovely neighbours
(7,5) will be Live in the next generation
checking cell in (8,7)
neighbour (8,6) is alive
neighbour (7,7) is alive
determine state for Live cell (8,7) with 2 lively lovely neighbours
(8,7) will be Live in the next generation
checking cell in (9,6)
neighbour (8,5) is alive
neighbour (8,6) is alive
neighbour (8,7) is alive
determine state for Dead cell (9,6) with 3 lively lovely neighbours
(9,6) will be Live in the next generation
checking cell in (6,5)
neighbour (6,6) is alive
determine state for Dead cell (6,5) with 1 lively lovely neighbours
(6,5) will be Dead in the next generation
checking cell in (6,8)
neighbour (7,7) is alive
determine state for Dead cell (6,8) with 1 lively lovely neighbours
(6,8) will be Dead in the next generation
checking cell in (5,7)
neighbour (6,6) is alive
determine state for Dead cell (5,7) with 1 lively lovely neighbours
(5,7) will be Dead in the next generation
checking cell in (7,4)
neighbour (8,5) is alive
determine state for Dead cell (7,4) with 1 lively lovely neighbours
(7,4) will be Dead in the next generation
checking cell in (8,8)
neighbour (7,7) is alive
neighbour (8,7) is alive
determine state for Dead cell (8,8) with 2 lively lovely neighbours
(8,8) will be Dead in the next generation
checking cell in (9,5)
neighbour (8,5) is alive
neighbour (8,6) is alive
determine state for Dead cell (9,5) with 2 lively lovely neighbours
(9,5) will be Dead in the next generation
checking cell in (7,8)
neighbour (7,7) is alive
neighbour (8,7) is alive
determine state for Dead cell (7,8) with 2 lively lovely neighbours
(7,8) will be Dead in the next generation
checking cell in (8,4)
neighbour (8,5) is alive
determine state for Dead cell (8,4) with 1 lively lovely neighbours
(8,4) will be Dead in the next generation
play starts
checking out live cell (7,7)
neighbours set:
(6, 7)
(6, 8)
(6, 6)
(7, 6)
(7, 7)
(8, 8)
(8, 7)
(8, 6)
(7, 8)
united set : {(6, 7), (6, 8), (6, 6), (7, 6), (7, 7), (8, 8), (8, 7), (8, 6), (7, 8)}
checking out live cell (8,6)
neighbours set:
(8, 6)
(7, 6)
(7, 7)
(7, 5)
(8, 7)
(9, 6)
(9, 5)
(8, 5)
(9, 7)
united set : {(8, 6), (7, 6), (7, 7), (7, 5), (8, 7), (9, 6), (9, 5), (8, 5), (9, 7)}
checking out live cell (7,5)
neighbours set:
(6, 4)
(6, 6)
(7, 6)
(7, 4)
(7, 5)
(8, 6)
(8, 5)
(6, 5)
(8, 4)
united set : {(6, 4), (6, 6), (7, 6), (7, 4), (7, 5), (8, 6), (8, 5), (6, 5), (8, 4)}
checking out live cell (8,7)
neighbours set:
(7, 8)
(7, 6)
(9, 8)
(7, 7)
(8, 8)
(8, 7)
(8, 6)
(9, 6)
(9, 7)
united set : {(7, 8), (7, 6), (9, 8), (7, 7), (8, 8), (8, 7), (8, 6), (9, 6), (9, 7)}
checking out live cell (9,6)
neighbours set:
(10, 5)
(8, 6)
(10, 7)
(10, 6)
(8, 7)
(9, 6)
(9, 5)
(8, 5)
(9, 7)
united set : {(10, 5), (8, 6), (10, 7), (10, 6), (8, 7), (9, 6), (9, 5), (8, 5), (9, 7)}
process set : {(6, 6), (9, 8), (10, 6), (7, 7), (8, 5), (6, 7), (10, 7), (7, 6), (8, 6), (9, 7), (6, 4), (7, 5), (8, 7), (9, 6), (6, 5), (10, 5), (6, 8), (7, 4), (8, 8), (9, 5), (7, 8), (8, 4)}
checking cell in (6,6)
neighbour (7,5) is alive
neighbour (7,7) is alive
determine state for Dead cell (6,6) with 2 lively lovely neighbours
(6,6) will be Dead in the next generation
checking cell in (9,8)
neighbour (8,7) is alive
determine state for Dead cell (9,8) with 1 lively lovely neighbours
(9,8) will be Dead in the next generation
checking cell in (10,6)
neighbour (9,6) is alive
determine state for Dead cell (10,6) with 1 lively lovely neighbours
(10,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (8,6) is alive
neighbour (8,7) is alive
determine state for Live cell (7,7) with 2 lively lovely neighbours
(7,7) will be Live in the next generation
checking cell in (8,5)
neighbour (7,5) is alive
neighbour (8,6) is alive
neighbour (9,6) is alive
determine state for Dead cell (8,5) with 3 lively lovely neighbours
(8,5) will be Live in the next generation
checking cell in (6,7)
neighbour (7,7) is alive
determine state for Dead cell (6,7) with 1 lively lovely neighbours
(6,7) will be Dead in the next generation
checking cell in (10,7)
neighbour (9,6) is alive
determine state for Dead cell (10,7) with 1 lively lovely neighbours
(10,7) will be Dead in the next generation
checking cell in (7,6)
neighbour (7,5) is alive
neighbour (8,6) is alive
neighbour (7,7) is alive
neighbour (8,7) is alive
determine state for Dead cell (7,6) with 4 lively lovely neighbours
(7,6) will be Dead in the next generation
checking cell in (8,6)
neighbour (7,5) is alive
neighbour (9,6) is alive
neighbour (7,7) is alive
neighbour (8,7) is alive
determine state for Live cell (8,6) with 4 lively lovely neighbours
(8,6) will be Dead in the next generation
checking cell in (9,7)
neighbour (8,6) is alive
neighbour (9,6) is alive
neighbour (8,7) is alive
determine state for Dead cell (9,7) with 3 lively lovely neighbours
(9,7) will be Live in the next generation
checking cell in (6,4)
neighbour (7,5) is alive
determine state for Dead cell (6,4) with 1 lively lovely neighbours
(6,4) will be Dead in the next generation
checking cell in (7,5)
neighbour (8,6) is alive
determine state for Live cell (7,5) with 1 lively lovely neighbours
(7,5) will be Dead in the next generation
checking cell in (8,7)
neighbour (8,6) is alive
neighbour (9,6) is alive
neighbour (7,7) is alive
determine state for Live cell (8,7) with 3 lively lovely neighbours
(8,7) will be Live in the next generation
checking cell in (9,6)
neighbour (8,6) is alive
neighbour (8,7) is alive
determine state for Live cell (9,6) with 2 lively lovely neighbours
(9,6) will be Live in the next generation
checking cell in (6,5)
neighbour (7,5) is alive
determine state for Dead cell (6,5) with 1 lively lovely neighbours
(6,5) will be Dead in the next generation
checking cell in (10,5)
neighbour (9,6) is alive
determine state for Dead cell (10,5) with 1 lively lovely neighbours
(10,5) will be Dead in the next generation
checking cell in (6,8)
neighbour (7,7) is alive
determine state for Dead cell (6,8) with 1 lively lovely neighbours
(6,8) will be Dead in the next generation
checking cell in (7,4)
neighbour (7,5) is alive
determine state for Dead cell (7,4) with 1 lively lovely neighbours
(7,4) will be Dead in the next generation
checking cell in (8,8)
neighbour (7,7) is alive
neighbour (8,7) is alive
determine state for Dead cell (8,8) with 2 lively lovely neighbours
(8,8) will be Dead in the next generation
checking cell in (9,5)
neighbour (8,6) is alive
neighbour (9,6) is alive
determine state for Dead cell (9,5) with 2 lively lovely neighbours
(9,5) will be Dead in the next generation
checking cell in (7,8)
neighbour (7,7) is alive
neighbour (8,7) is alive
determine state for Dead cell (7,8) with 2 lively lovely neighbours
(7,8) will be Dead in the next generation
checking cell in (8,4)
neighbour (7,5) is alive
determine state for Dead cell (8,4) with 1 lively lovely neighbours
(8,4) will be Dead in the next generation
play starts
checking out live cell (7,7)
neighbours set:
(6, 7)
(6, 8)
(6, 6)
(7, 6)
(7, 7)
(8, 8)
(8, 7)
(8, 6)
(7, 8)
united set : {(6, 7), (6, 8), (6, 6), (7, 6), (7, 7), (8, 8), (8, 7), (8, 6), (7, 8)}
checking out live cell (8,5)
neighbours set:
(8, 6)
(7, 6)
(7, 4)
(7, 5)
(9, 4)
(9, 6)
(9, 5)
(8, 5)
(8, 4)
united set : {(8, 6), (7, 6), (7, 4), (7, 5), (9, 4), (9, 6), (9, 5), (8, 5), (8, 4)}
checking out live cell (9,7)
neighbours set:
(10, 8)
(10, 7)
(9, 8)
(10, 6)
(8, 8)
(8, 7)
(8, 6)
(9, 6)
(9, 7)
united set : {(10, 8), (10, 7), (9, 8), (10, 6), (8, 8), (8, 7), (8, 6), (9, 6), (9, 7)}
checking out live cell (8,7)
neighbours set:
(7, 8)
(7, 6)
(9, 8)
(7, 7)
(8, 8)
(8, 7)
(8, 6)
(9, 6)
(9, 7)
united set : {(7, 8), (7, 6), (9, 8), (7, 7), (8, 8), (8, 7), (8, 6), (9, 6), (9, 7)}
checking out live cell (9,6)
neighbours set:
(10, 5)
(8, 6)
(10, 7)
(10, 6)
(8, 7)
(9, 6)
(9, 5)
(8, 5)
(9, 7)
united set : {(10, 5), (8, 6), (10, 7), (10, 6), (8, 7), (9, 6), (9, 5), (8, 5), (9, 7)}
process set : {(6, 6), (9, 8), (10, 6), (7, 7), (9, 4), (8, 5), (10, 8), (6, 7), (10, 7), (7, 6), (8, 6), (9, 7), (7, 5), (8, 7), (9, 6), (10, 5), (6, 8), (7, 4), (8, 8), (9, 5), (7, 8), (8, 4)}
checking cell in (6,6)
neighbour (7,7) is alive
determine state for Dead cell (6,6) with 1 lively lovely neighbours
(6,6) will be Dead in the next generation
checking cell in (9,8)
neighbour (8,7) is alive
neighbour (9,7) is alive
determine state for Dead cell (9,8) with 2 lively lovely neighbours
(9,8) will be Dead in the next generation
checking cell in (10,6)
neighbour (9,6) is alive
neighbour (9,7) is alive
determine state for Dead cell (10,6) with 2 lively lovely neighbours
(10,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (8,7) is alive
determine state for Live cell (7,7) with 1 lively lovely neighbours
(7,7) will be Dead in the next generation
checking cell in (9,4)
neighbour (8,5) is alive
determine state for Dead cell (9,4) with 1 lively lovely neighbours
(9,4) will be Dead in the next generation
checking cell in (8,5)
neighbour (9,6) is alive
determine state for Live cell (8,5) with 1 lively lovely neighbours
(8,5) will be Dead in the next generation
checking cell in (10,8)
neighbour (9,7) is alive
determine state for Dead cell (10,8) with 1 lively lovely neighbours
(10,8) will be Dead in the next generation
checking cell in (6,7)
neighbour (7,7) is alive
determine state for Dead cell (6,7) with 1 lively lovely neighbours
(6,7) will be Dead in the next generation
checking cell in (10,7)
neighbour (9,6) is alive
neighbour (9,7) is alive
determine state for Dead cell (10,7) with 2 lively lovely neighbours
(10,7) will be Dead in the next generation
checking cell in (7,6)
neighbour (8,5) is alive
neighbour (7,7) is alive
neighbour (8,7) is alive
determine state for Dead cell (7,6) with 3 lively lovely neighbours
(7,6) will be Live in the next generation
checking cell in (8,6)
neighbour (8,5) is alive
neighbour (9,6) is alive
neighbour (7,7) is alive
neighbour (8,7) is alive
neighbour (9,7) is alive
determine state for Dead cell (8,6) with 5 lively lovely neighbours
(8,6) will be Dead in the next generation
checking cell in (9,7)
neighbour (9,6) is alive
neighbour (8,7) is alive
determine state for Live cell (9,7) with 2 lively lovely neighbours
(9,7) will be Live in the next generation
checking cell in (7,5)
neighbour (8,5) is alive
determine state for Dead cell (7,5) with 1 lively lovely neighbours
(7,5) will be Dead in the next generation
checking cell in (8,7)
neighbour (9,6) is alive
neighbour (7,7) is alive
neighbour (9,7) is alive
determine state for Live cell (8,7) with 3 lively lovely neighbours
(8,7) will be Live in the next generation
checking cell in (9,6)
neighbour (8,5) is alive
neighbour (8,7) is alive
neighbour (9,7) is alive
determine state for Live cell (9,6) with 3 lively lovely neighbours
(9,6) will be Live in the next generation
checking cell in (10,5)
neighbour (9,6) is alive
determine state for Dead cell (10,5) with 1 lively lovely neighbours
(10,5) will be Dead in the next generation
checking cell in (6,8)
neighbour (7,7) is alive
determine state for Dead cell (6,8) with 1 lively lovely neighbours
(6,8) will be Dead in the next generation
checking cell in (7,4)
neighbour (8,5) is alive
determine state for Dead cell (7,4) with 1 lively lovely neighbours
(7,4) will be Dead in the next generation
checking cell in (8,8)
neighbour (7,7) is alive
neighbour (8,7) is alive
neighbour (9,7) is alive
determine state for Dead cell (8,8) with 3 lively lovely neighbours
(8,8) will be Live in the next generation
checking cell in (9,5)
neighbour (8,5) is alive
neighbour (9,6) is alive
determine state for Dead cell (9,5) with 2 lively lovely neighbours
(9,5) will be Dead in the next generation
checking cell in (7,8)
neighbour (7,7) is alive
neighbour (8,7) is alive
determine state for Dead cell (7,8) with 2 lively lovely neighbours
(7,8) will be Dead in the next generation
checking cell in (8,4)
neighbour (8,5) is alive
determine state for Dead cell (8,4) with 1 lively lovely neighbours
(8,4) will be Dead in the next generation
play starts
checking out live cell (7,6)
neighbours set:
(6, 7)
(6, 6)
(7, 6)
(7, 7)
(7, 5)
(8, 7)
(8, 6)
(8, 5)
(6, 5)
united set : {(6, 7), (6, 6), (7, 6), (7, 7), (7, 5), (8, 7), (8, 6), (8, 5), (6, 5)}
checking out live cell (9,7)
neighbours set:
(10, 8)
(10, 7)
(9, 8)
(10, 6)
(8, 8)
(8, 7)
(8, 6)
(9, 6)
(9, 7)
united set : {(10, 8), (10, 7), (9, 8), (10, 6), (8, 8), (8, 7), (8, 6), (9, 6), (9, 7)}
checking out live cell (8,7)
neighbours set:
(7, 8)
(7, 6)
(9, 8)
(7, 7)
(8, 8)
(8, 7)
(8, 6)
(9, 6)
(9, 7)
united set : {(7, 8), (7, 6), (9, 8), (7, 7), (8, 8), (8, 7), (8, 6), (9, 6), (9, 7)}
checking out live cell (9,6)
neighbours set:
(10, 5)
(8, 6)
(10, 7)
(10, 6)
(8, 7)
(9, 6)
(9, 5)
(8, 5)
(9, 7)
united set : {(10, 5), (8, 6), (10, 7), (10, 6), (8, 7), (9, 6), (9, 5), (8, 5), (9, 7)}
checking out live cell (8,8)
neighbours set:
(9, 8)
(7, 9)
(7, 7)
(9, 9)
(8, 9)
(8, 8)
(8, 7)
(7, 8)
(9, 7)
united set : {(9, 8), (7, 9), (7, 7), (9, 9), (8, 9), (8, 8), (8, 7), (7, 8), (9, 7)}
process set : {(6, 6), (9, 8), (10, 6), (7, 7), (8, 9), (8, 5), (10, 8), (6, 7), (10, 7), (7, 6), (8, 6), (9, 7), (7, 5), (8, 7), (9, 6), (6, 5), (7, 9), (10, 5), (9, 9), (8, 8), (9, 5), (7, 8)}
checking cell in (6,6)
neighbour (7,6) is alive
determine state for Dead cell (6,6) with 1 lively lovely neighbours
(6,6) will be Dead in the next generation
checking cell in (9,8)
neighbour (8,7) is alive
neighbour (9,7) is alive
neighbour (8,8) is alive
determine state for Dead cell (9,8) with 3 lively lovely neighbours
(9,8) will be Live in the next generation
checking cell in (10,6)
neighbour (9,6) is alive
neighbour (9,7) is alive
determine state for Dead cell (10,6) with 2 lively lovely neighbours
(10,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (7,6) is alive
neighbour (8,7) is alive
neighbour (8,8) is alive
determine state for Dead cell (7,7) with 3 lively lovely neighbours
(7,7) will be Live in the next generation
checking cell in (8,9)
neighbour (8,8) is alive
determine state for Dead cell (8,9) with 1 lively lovely neighbours
(8,9) will be Dead in the next generation
checking cell in (8,5)
neighbour (7,6) is alive
neighbour (9,6) is alive
determine state for Dead cell (8,5) with 2 lively lovely neighbours
(8,5) will be Dead in the next generation
checking cell in (10,8)
neighbour (9,7) is alive
determine state for Dead cell (10,8) with 1 lively lovely neighbours
(10,8) will be Dead in the next generation
checking cell in (6,7)
neighbour (7,6) is alive
determine state for Dead cell (6,7) with 1 lively lovely neighbours
(6,7) will be Dead in the next generation
checking cell in (10,7)
neighbour (9,6) is alive
neighbour (9,7) is alive
determine state for Dead cell (10,7) with 2 lively lovely neighbours
(10,7) will be Dead in the next generation
checking cell in (7,6)
neighbour (8,7) is alive
determine state for Live cell (7,6) with 1 lively lovely neighbours
(7,6) will be Dead in the next generation
checking cell in (8,6)
neighbour (7,6) is alive
neighbour (9,6) is alive
neighbour (8,7) is alive
neighbour (9,7) is alive
determine state for Dead cell (8,6) with 4 lively lovely neighbours
(8,6) will be Dead in the next generation
checking cell in (9,7)
neighbour (9,6) is alive
neighbour (8,7) is alive
neighbour (8,8) is alive
determine state for Live cell (9,7) with 3 lively lovely neighbours
(9,7) will be Live in the next generation
checking cell in (7,5)
neighbour (7,6) is alive
determine state for Dead cell (7,5) with 1 lively lovely neighbours
(7,5) will be Dead in the next generation
checking cell in (8,7)
neighbour (7,6) is alive
neighbour (9,6) is alive
neighbour (9,7) is alive
neighbour (8,8) is alive
determine state for Live cell (8,7) with 4 lively lovely neighbours
(8,7) will be Dead in the next generation
checking cell in (9,6)
neighbour (8,7) is alive
neighbour (9,7) is alive
determine state for Live cell (9,6) with 2 lively lovely neighbours
(9,6) will be Live in the next generation
checking cell in (6,5)
neighbour (7,6) is alive
determine state for Dead cell (6,5) with 1 lively lovely neighbours
(6,5) will be Dead in the next generation
checking cell in (7,9)
neighbour (8,8) is alive
determine state for Dead cell (7,9) with 1 lively lovely neighbours
(7,9) will be Dead in the next generation
checking cell in (10,5)
neighbour (9,6) is alive
determine state for Dead cell (10,5) with 1 lively lovely neighbours
(10,5) will be Dead in the next generation
checking cell in (9,9)
neighbour (8,8) is alive
determine state for Dead cell (9,9) with 1 lively lovely neighbours
(9,9) will be Dead in the next generation
checking cell in (8,8)
neighbour (8,7) is alive
neighbour (9,7) is alive
determine state for Live cell (8,8) with 2 lively lovely neighbours
(8,8) will be Live in the next generation
checking cell in (9,5)
neighbour (9,6) is alive
determine state for Dead cell (9,5) with 1 lively lovely neighbours
(9,5) will be Dead in the next generation
checking cell in (7,8)
neighbour (8,7) is alive
neighbour (8,8) is alive
determine state for Dead cell (7,8) with 2 lively lovely neighbours
(7,8) will be Dead in the next generation
play starts
checking out live cell (9,8)
neighbours set:
(10, 8)
(10, 7)
(9, 8)
(9, 9)
(8, 9)
(8, 8)
(8, 7)
(10, 9)
(9, 7)
united set : {(10, 8), (10, 7), (9, 8), (9, 9), (8, 9), (8, 8), (8, 7), (10, 9), (9, 7)}
checking out live cell (7,7)
neighbours set:
(6, 7)
(6, 8)
(6, 6)
(7, 6)
(7, 7)
(8, 8)
(8, 7)
(8, 6)
(7, 8)
united set : {(6, 7), (6, 8), (6, 6), (7, 6), (7, 7), (8, 8), (8, 7), (8, 6), (7, 8)}
checking out live cell (9,7)
neighbours set:
(10, 8)
(10, 7)
(9, 8)
(10, 6)
(8, 8)
(8, 7)
(8, 6)
(9, 6)
(9, 7)
united set : {(10, 8), (10, 7), (9, 8), (10, 6), (8, 8), (8, 7), (8, 6), (9, 6), (9, 7)}
checking out live cell (9,6)
neighbours set:
(10, 5)
(8, 6)
(10, 7)
(10, 6)
(8, 7)
(9, 6)
(9, 5)
(8, 5)
(9, 7)
united set : {(10, 5), (8, 6), (10, 7), (10, 6), (8, 7), (9, 6), (9, 5), (8, 5), (9, 7)}
checking out live cell (8,8)
neighbours set:
(9, 8)
(7, 9)
(7, 7)
(9, 9)
(8, 9)
(8, 8)
(8, 7)
(7, 8)
(9, 7)
united set : {(9, 8), (7, 9), (7, 7), (9, 9), (8, 9), (8, 8), (8, 7), (7, 8), (9, 7)}
process set : {(6, 6), (9, 8), (10, 6), (7, 7), (8, 9), (8, 5), (10, 8), (6, 7), (10, 7), (7, 6), (8, 6), (10, 9), (9, 7), (8, 7), (9, 6), (7, 9), (10, 5), (6, 8), (9, 9), (8, 8), (9, 5), (7, 8)}
checking cell in (6,6)
neighbour (7,7) is alive
determine state for Dead cell (6,6) with 1 lively lovely neighbours
(6,6) will be Dead in the next generation
checking cell in (9,8)
neighbour (9,7) is alive
neighbour (8,8) is alive
determine state for Live cell (9,8) with 2 lively lovely neighbours
(9,8) will be Live in the next generation
checking cell in (10,6)
neighbour (9,6) is alive
neighbour (9,7) is alive
determine state for Dead cell (10,6) with 2 lively lovely neighbours
(10,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (8,8) is alive
determine state for Live cell (7,7) with 1 lively lovely neighbours
(7,7) will be Dead in the next generation
checking cell in (8,9)
neighbour (8,8) is alive
neighbour (9,8) is alive
determine state for Dead cell (8,9) with 2 lively lovely neighbours
(8,9) will be Dead in the next generation
checking cell in (8,5)
neighbour (9,6) is alive
determine state for Dead cell (8,5) with 1 lively lovely neighbours
(8,5) will be Dead in the next generation
checking cell in (10,8)
neighbour (9,7) is alive
neighbour (9,8) is alive
determine state for Dead cell (10,8) with 2 lively lovely neighbours
(10,8) will be Dead in the next generation
checking cell in (6,7)
neighbour (7,7) is alive
determine state for Dead cell (6,7) with 1 lively lovely neighbours
(6,7) will be Dead in the next generation
checking cell in (10,7)
neighbour (9,6) is alive
neighbour (9,7) is alive
neighbour (9,8) is alive
determine state for Dead cell (10,7) with 3 lively lovely neighbours
(10,7) will be Live in the next generation
checking cell in (7,6)
neighbour (7,7) is alive
determine state for Dead cell (7,6) with 1 lively lovely neighbours
(7,6) will be Dead in the next generation
checking cell in (8,6)
neighbour (9,6) is alive
neighbour (7,7) is alive
neighbour (9,7) is alive
determine state for Dead cell (8,6) with 3 lively lovely neighbours
(8,6) will be Live in the next generation
checking cell in (10,9)
neighbour (9,8) is alive
determine state for Dead cell (10,9) with 1 lively lovely neighbours
(10,9) will be Dead in the next generation
checking cell in (9,7)
neighbour (9,6) is alive
neighbour (8,8) is alive
neighbour (9,8) is alive
determine state for Live cell (9,7) with 3 lively lovely neighbours
(9,7) will be Live in the next generation
checking cell in (8,7)
neighbour (9,6) is alive
neighbour (7,7) is alive
neighbour (9,7) is alive
neighbour (8,8) is alive
neighbour (9,8) is alive
determine state for Dead cell (8,7) with 5 lively lovely neighbours
(8,7) will be Dead in the next generation
checking cell in (9,6)
neighbour (9,7) is alive
determine state for Live cell (9,6) with 1 lively lovely neighbours
(9,6) will be Dead in the next generation
checking cell in (7,9)
neighbour (8,8) is alive
determine state for Dead cell (7,9) with 1 lively lovely neighbours
(7,9) will be Dead in the next generation
checking cell in (10,5)
neighbour (9,6) is alive
determine state for Dead cell (10,5) with 1 lively lovely neighbours
(10,5) will be Dead in the next generation
checking cell in (6,8)
neighbour (7,7) is alive
determine state for Dead cell (6,8) with 1 lively lovely neighbours
(6,8) will be Dead in the next generation
checking cell in (9,9)
neighbour (8,8) is alive
neighbour (9,8) is alive
determine state for Dead cell (9,9) with 2 lively lovely neighbours
(9,9) will be Dead in the next generation
checking cell in (8,8)
neighbour (7,7) is alive
neighbour (9,7) is alive
neighbour (9,8) is alive
determine state for Live cell (8,8) with 3 lively lovely neighbours
(8,8) will be Live in the next generation
checking cell in (9,5)
neighbour (9,6) is alive
determine state for Dead cell (9,5) with 1 lively lovely neighbours
(9,5) will be Dead in the next generation
checking cell in (7,8)
neighbour (7,7) is alive
neighbour (8,8) is alive
determine state for Dead cell (7,8) with 2 lively lovely neighbours
(7,8) will be Dead in the next generation
play starts
checking out live cell (9,8)
neighbours set:
(10, 8)
(10, 7)
(9, 8)
(9, 9)
(8, 9)
(8, 8)
(8, 7)
(10, 9)
(9, 7)
united set : {(10, 8), (10, 7), (9, 8), (9, 9), (8, 9), (8, 8), (8, 7), (10, 9), (9, 7)}
checking out live cell (10,7)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(9, 8)
(10, 6)
(9, 6)
(11, 6)
(9, 7)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (9, 8), (10, 6), (9, 6), (11, 6), (9, 7)}
checking out live cell (8,6)
neighbours set:
(8, 6)
(7, 6)
(7, 7)
(7, 5)
(8, 7)
(9, 6)
(9, 5)
(8, 5)
(9, 7)
united set : {(8, 6), (7, 6), (7, 7), (7, 5), (8, 7), (9, 6), (9, 5), (8, 5), (9, 7)}
checking out live cell (9,7)
neighbours set:
(10, 8)
(10, 7)
(9, 8)
(10, 6)
(8, 8)
(8, 7)
(8, 6)
(9, 6)
(9, 7)
united set : {(10, 8), (10, 7), (9, 8), (10, 6), (8, 8), (8, 7), (8, 6), (9, 6), (9, 7)}
checking out live cell (8,8)
neighbours set:
(9, 8)
(7, 9)
(7, 7)
(9, 9)
(8, 9)
(8, 8)
(8, 7)
(7, 8)
(9, 7)
united set : {(9, 8), (7, 9), (7, 7), (9, 9), (8, 9), (8, 8), (8, 7), (7, 8), (9, 7)}
process set : {(9, 8), (10, 6), (7, 7), (8, 9), (8, 5), (10, 8), (10, 7), (7, 6), (8, 6), (10, 9), (9, 7), (7, 5), (8, 7), (9, 6), (7, 9), (11, 7), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (11, 6)}
checking cell in (9,8)
neighbour (9,7) is alive
neighbour (10,7) is alive
neighbour (8,8) is alive
determine state for Live cell (9,8) with 3 lively lovely neighbours
(9,8) will be Live in the next generation
checking cell in (10,6)
neighbour (9,7) is alive
neighbour (10,7) is alive
determine state for Dead cell (10,6) with 2 lively lovely neighbours
(10,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (8,6) is alive
neighbour (8,8) is alive
determine state for Dead cell (7,7) with 2 lively lovely neighbours
(7,7) will be Dead in the next generation
checking cell in (8,9)
neighbour (8,8) is alive
neighbour (9,8) is alive
determine state for Dead cell (8,9) with 2 lively lovely neighbours
(8,9) will be Dead in the next generation
checking cell in (8,5)
neighbour (8,6) is alive
determine state for Dead cell (8,5) with 1 lively lovely neighbours
(8,5) will be Dead in the next generation
checking cell in (10,8)
neighbour (9,7) is alive
neighbour (10,7) is alive
neighbour (9,8) is alive
determine state for Dead cell (10,8) with 3 lively lovely neighbours
(10,8) will be Live in the next generation
checking cell in (10,7)
neighbour (9,7) is alive
neighbour (9,8) is alive
determine state for Live cell (10,7) with 2 lively lovely neighbours
(10,7) will be Live in the next generation
checking cell in (7,6)
neighbour (8,6) is alive
determine state for Dead cell (7,6) with 1 lively lovely neighbours
(7,6) will be Dead in the next generation
checking cell in (8,6)
neighbour (9,7) is alive
determine state for Live cell (8,6) with 1 lively lovely neighbours
(8,6) will be Dead in the next generation
checking cell in (10,9)
neighbour (9,8) is alive
determine state for Dead cell (10,9) with 1 lively lovely neighbours
(10,9) will be Dead in the next generation
checking cell in (9,7)
neighbour (8,6) is alive
neighbour (10,7) is alive
neighbour (8,8) is alive
neighbour (9,8) is alive
determine state for Live cell (9,7) with 4 lively lovely neighbours
(9,7) will be Dead in the next generation
checking cell in (7,5)
neighbour (8,6) is alive
determine state for Dead cell (7,5) with 1 lively lovely neighbours
(7,5) will be Dead in the next generation
checking cell in (8,7)
neighbour (8,6) is alive
neighbour (9,7) is alive
neighbour (8,8) is alive
neighbour (9,8) is alive
determine state for Dead cell (8,7) with 4 lively lovely neighbours
(8,7) will be Dead in the next generation
checking cell in (9,6)
neighbour (8,6) is alive
neighbour (9,7) is alive
neighbour (10,7) is alive
determine state for Dead cell (9,6) with 3 lively lovely neighbours
(9,6) will be Live in the next generation
checking cell in (7,9)
neighbour (8,8) is alive
determine state for Dead cell (7,9) with 1 lively lovely neighbours
(7,9) will be Dead in the next generation
checking cell in (11,7)
neighbour (10,7) is alive
determine state for Dead cell (11,7) with 1 lively lovely neighbours
(11,7) will be Dead in the next generation
checking cell in (11,8)
neighbour (10,7) is alive
determine state for Dead cell (11,8) with 1 lively lovely neighbours
(11,8) will be Dead in the next generation
checking cell in (9,9)
neighbour (8,8) is alive
neighbour (9,8) is alive
determine state for Dead cell (9,9) with 2 lively lovely neighbours
(9,9) will be Dead in the next generation
checking cell in (8,8)
neighbour (9,7) is alive
neighbour (9,8) is alive
determine state for Live cell (8,8) with 2 lively lovely neighbours
(8,8) will be Live in the next generation
checking cell in (9,5)
neighbour (8,6) is alive
determine state for Dead cell (9,5) with 1 lively lovely neighbours
(9,5) will be Dead in the next generation
checking cell in (7,8)
neighbour (8,8) is alive
determine state for Dead cell (7,8) with 1 lively lovely neighbours
(7,8) will be Dead in the next generation
checking cell in (11,6)
neighbour (10,7) is alive
determine state for Dead cell (11,6) with 1 lively lovely neighbours
(11,6) will be Dead in the next generation
play starts
checking out live cell (9,8)
neighbours set:
(10, 8)
(10, 7)
(9, 8)
(9, 9)
(8, 9)
(8, 8)
(8, 7)
(10, 9)
(9, 7)
united set : {(10, 8), (10, 7), (9, 8), (9, 9), (8, 9), (8, 8), (8, 7), (10, 9), (9, 7)}
checking out live cell (10,8)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(9, 8)
(11, 9)
(9, 9)
(10, 9)
(9, 7)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (9, 8), (11, 9), (9, 9), (10, 9), (9, 7)}
checking out live cell (10,7)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(9, 8)
(10, 6)
(9, 6)
(11, 6)
(9, 7)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (9, 8), (10, 6), (9, 6), (11, 6), (9, 7)}
checking out live cell (9,6)
neighbours set:
(10, 5)
(8, 6)
(10, 7)
(10, 6)
(8, 7)
(9, 6)
(9, 5)
(8, 5)
(9, 7)
united set : {(10, 5), (8, 6), (10, 7), (10, 6), (8, 7), (9, 6), (9, 5), (8, 5), (9, 7)}
checking out live cell (8,8)
neighbours set:
(9, 8)
(7, 9)
(7, 7)
(9, 9)
(8, 9)
(8, 8)
(8, 7)
(7, 8)
(9, 7)
united set : {(9, 8), (7, 9), (7, 7), (9, 9), (8, 9), (8, 8), (8, 7), (7, 8), (9, 7)}
process set : {(9, 8), (10, 6), (7, 7), (8, 9), (8, 5), (10, 8), (10, 7), (8, 6), (10, 9), (9, 7), (11, 9), (8, 7), (9, 6), (7, 9), (11, 7), (10, 5), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (11, 6)}
checking cell in (9,8)
neighbour (10,7) is alive
neighbour (8,8) is alive
neighbour (10,8) is alive
determine state for Live cell (9,8) with 3 lively lovely neighbours
(9,8) will be Live in the next generation
checking cell in (10,6)
neighbour (9,6) is alive
neighbour (10,7) is alive
determine state for Dead cell (10,6) with 2 lively lovely neighbours
(10,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (8,8) is alive
determine state for Dead cell (7,7) with 1 lively lovely neighbours
(7,7) will be Dead in the next generation
checking cell in (8,9)
neighbour (8,8) is alive
neighbour (9,8) is alive
determine state for Dead cell (8,9) with 2 lively lovely neighbours
(8,9) will be Dead in the next generation
checking cell in (8,5)
neighbour (9,6) is alive
determine state for Dead cell (8,5) with 1 lively lovely neighbours
(8,5) will be Dead in the next generation
checking cell in (10,8)
neighbour (10,7) is alive
neighbour (9,8) is alive
determine state for Live cell (10,8) with 2 lively lovely neighbours
(10,8) will be Live in the next generation
checking cell in (10,7)
neighbour (9,6) is alive
neighbour (9,8) is alive
neighbour (10,8) is alive
determine state for Live cell (10,7) with 3 lively lovely neighbours
(10,7) will be Live in the next generation
checking cell in (8,6)
neighbour (9,6) is alive
determine state for Dead cell (8,6) with 1 lively lovely neighbours
(8,6) will be Dead in the next generation
checking cell in (10,9)
neighbour (9,8) is alive
neighbour (10,8) is alive
determine state for Dead cell (10,9) with 2 lively lovely neighbours
(10,9) will be Dead in the next generation
checking cell in (9,7)
neighbour (9,6) is alive
neighbour (10,7) is alive
neighbour (8,8) is alive
neighbour (9,8) is alive
neighbour (10,8) is alive
determine state for Dead cell (9,7) with 5 lively lovely neighbours
(9,7) will be Dead in the next generation
checking cell in (11,9)
neighbour (10,8) is alive
determine state for Dead cell (11,9) with 1 lively lovely neighbours
(11,9) will be Dead in the next generation
checking cell in (8,7)
neighbour (9,6) is alive
neighbour (8,8) is alive
neighbour (9,8) is alive
determine state for Dead cell (8,7) with 3 lively lovely neighbours
(8,7) will be Live in the next generation
checking cell in (9,6)
neighbour (10,7) is alive
determine state for Live cell (9,6) with 1 lively lovely neighbours
(9,6) will be Dead in the next generation
checking cell in (7,9)
neighbour (8,8) is alive
determine state for Dead cell (7,9) with 1 lively lovely neighbours
(7,9) will be Dead in the next generation
checking cell in (11,7)
neighbour (10,7) is alive
neighbour (10,8) is alive
determine state for Dead cell (11,7) with 2 lively lovely neighbours
(11,7) will be Dead in the next generation
checking cell in (10,5)
neighbour (9,6) is alive
determine state for Dead cell (10,5) with 1 lively lovely neighbours
(10,5) will be Dead in the next generation
checking cell in (11,8)
neighbour (10,7) is alive
neighbour (10,8) is alive
determine state for Dead cell (11,8) with 2 lively lovely neighbours
(11,8) will be Dead in the next generation
checking cell in (9,9)
neighbour (8,8) is alive
neighbour (9,8) is alive
neighbour (10,8) is alive
determine state for Dead cell (9,9) with 3 lively lovely neighbours
(9,9) will be Live in the next generation
checking cell in (8,8)
neighbour (9,8) is alive
determine state for Live cell (8,8) with 1 lively lovely neighbours
(8,8) will be Dead in the next generation
checking cell in (9,5)
neighbour (9,6) is alive
determine state for Dead cell (9,5) with 1 lively lovely neighbours
(9,5) will be Dead in the next generation
checking cell in (7,8)
neighbour (8,8) is alive
determine state for Dead cell (7,8) with 1 lively lovely neighbours
(7,8) will be Dead in the next generation
checking cell in (11,6)
neighbour (10,7) is alive
determine state for Dead cell (11,6) with 1 lively lovely neighbours
(11,6) will be Dead in the next generation
play starts
checking out live cell (9,8)
neighbours set:
(10, 8)
(10, 7)
(9, 8)
(9, 9)
(8, 9)
(8, 8)
(8, 7)
(10, 9)
(9, 7)
united set : {(10, 8), (10, 7), (9, 8), (9, 9), (8, 9), (8, 8), (8, 7), (10, 9), (9, 7)}
checking out live cell (10,8)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(9, 8)
(11, 9)
(9, 9)
(10, 9)
(9, 7)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (9, 8), (11, 9), (9, 9), (10, 9), (9, 7)}
checking out live cell (10,7)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(9, 8)
(10, 6)
(9, 6)
(11, 6)
(9, 7)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (9, 8), (10, 6), (9, 6), (11, 6), (9, 7)}
checking out live cell (8,7)
neighbours set:
(7, 8)
(7, 6)
(9, 8)
(7, 7)
(8, 8)
(8, 7)
(8, 6)
(9, 6)
(9, 7)
united set : {(7, 8), (7, 6), (9, 8), (7, 7), (8, 8), (8, 7), (8, 6), (9, 6), (9, 7)}
checking out live cell (9,9)
neighbours set:
(10, 8)
(10, 10)
(9, 8)
(9, 9)
(8, 10)
(8, 9)
(9, 10)
(8, 8)
(10, 9)
united set : {(10, 8), (10, 10), (9, 8), (9, 9), (8, 10), (8, 9), (9, 10), (8, 8), (10, 9)}
process set : {(9, 8), (10, 6), (7, 7), (8, 9), (10, 8), (10, 7), (7, 6), (8, 10), (8, 6), (10, 9), (9, 7), (11, 9), (9, 10), (8, 7), (9, 6), (11, 7), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (11, 6)}
checking cell in (9,8)
neighbour (8,7) is alive
neighbour (10,7) is alive
neighbour (10,8) is alive
neighbour (9,9) is alive
determine state for Live cell (9,8) with 4 lively lovely neighbours
(9,8) will be Dead in the next generation
checking cell in (10,6)
neighbour (10,7) is alive
determine state for Dead cell (10,6) with 1 lively lovely neighbours
(10,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (8,7) is alive
determine state for Dead cell (7,7) with 1 lively lovely neighbours
(7,7) will be Dead in the next generation
checking cell in (8,9)
neighbour (9,8) is alive
neighbour (9,9) is alive
determine state for Dead cell (8,9) with 2 lively lovely neighbours
(8,9) will be Dead in the next generation
checking cell in (10,8)
neighbour (10,7) is alive
neighbour (9,8) is alive
neighbour (9,9) is alive
determine state for Live cell (10,8) with 3 lively lovely neighbours
(10,8) will be Live in the next generation
checking cell in (10,7)
neighbour (9,8) is alive
neighbour (10,8) is alive
determine state for Live cell (10,7) with 2 lively lovely neighbours
(10,7) will be Live in the next generation
checking cell in (7,6)
neighbour (8,7) is alive
determine state for Dead cell (7,6) with 1 lively lovely neighbours
(7,6) will be Dead in the next generation
checking cell in (8,10)
neighbour (9,9) is alive
determine state for Dead cell (8,10) with 1 lively lovely neighbours
(8,10) will be Dead in the next generation
checking cell in (8,6)
neighbour (8,7) is alive
determine state for Dead cell (8,6) with 1 lively lovely neighbours
(8,6) will be Dead in the next generation
checking cell in (10,9)
neighbour (9,8) is alive
neighbour (10,8) is alive
neighbour (9,9) is alive
determine state for Dead cell (10,9) with 3 lively lovely neighbours
(10,9) will be Live in the next generation
checking cell in (9,7)
neighbour (8,7) is alive
neighbour (10,7) is alive
neighbour (9,8) is alive
neighbour (10,8) is alive
determine state for Dead cell (9,7) with 4 lively lovely neighbours
(9,7) will be Dead in the next generation
checking cell in (11,9)
neighbour (10,8) is alive
determine state for Dead cell (11,9) with 1 lively lovely neighbours
(11,9) will be Dead in the next generation
checking cell in (9,10)
neighbour (9,9) is alive
determine state for Dead cell (9,10) with 1 lively lovely neighbours
(9,10) will be Dead in the next generation
checking cell in (8,7)
neighbour (9,8) is alive
determine state for Live cell (8,7) with 1 lively lovely neighbours
(8,7) will be Dead in the next generation
checking cell in (9,6)
neighbour (8,7) is alive
neighbour (10,7) is alive
determine state for Dead cell (9,6) with 2 lively lovely neighbours
(9,6) will be Dead in the next generation
checking cell in (11,7)
neighbour (10,7) is alive
neighbour (10,8) is alive
determine state for Dead cell (11,7) with 2 lively lovely neighbours
(11,7) will be Dead in the next generation
checking cell in (10,10)
neighbour (9,9) is alive
determine state for Dead cell (10,10) with 1 lively lovely neighbours
(10,10) will be Dead in the next generation
checking cell in (11,8)
neighbour (10,7) is alive
neighbour (10,8) is alive
determine state for Dead cell (11,8) with 2 lively lovely neighbours
(11,8) will be Dead in the next generation
checking cell in (9,9)
neighbour (9,8) is alive
neighbour (10,8) is alive
determine state for Live cell (9,9) with 2 lively lovely neighbours
(9,9) will be Live in the next generation
checking cell in (8,8)
neighbour (8,7) is alive
neighbour (9,8) is alive
neighbour (9,9) is alive
determine state for Dead cell (8,8) with 3 lively lovely neighbours
(8,8) will be Live in the next generation
checking cell in (7,8)
neighbour (8,7) is alive
determine state for Dead cell (7,8) with 1 lively lovely neighbours
(7,8) will be Dead in the next generation
checking cell in (11,6)
neighbour (10,7) is alive
determine state for Dead cell (11,6) with 1 lively lovely neighbours
(11,6) will be Dead in the next generation
play starts
checking out live cell (10,8)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(9, 8)
(11, 9)
(9, 9)
(10, 9)
(9, 7)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (9, 8), (11, 9), (9, 9), (10, 9), (9, 7)}
checking out live cell (10,7)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(9, 8)
(10, 6)
(9, 6)
(11, 6)
(9, 7)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (9, 8), (10, 6), (9, 6), (11, 6), (9, 7)}
checking out live cell (10,9)
neighbours set:
(10, 8)
(11, 10)
(10, 10)
(11, 8)
(9, 8)
(11, 9)
(9, 9)
(9, 10)
(10, 9)
united set : {(10, 8), (11, 10), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (9, 10), (10, 9)}
checking out live cell (9,9)
neighbours set:
(10, 8)
(10, 10)
(9, 8)
(9, 9)
(8, 10)
(8, 9)
(9, 10)
(8, 8)
(10, 9)
united set : {(10, 8), (10, 10), (9, 8), (9, 9), (8, 10), (8, 9), (9, 10), (8, 8), (10, 9)}
checking out live cell (8,8)
neighbours set:
(9, 8)
(7, 9)
(7, 7)
(9, 9)
(8, 9)
(8, 8)
(8, 7)
(7, 8)
(9, 7)
united set : {(9, 8), (7, 9), (7, 7), (9, 9), (8, 9), (8, 8), (8, 7), (7, 8), (9, 7)}
process set : {(9, 8), (10, 6), (7, 7), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (10, 9), (9, 7), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (11, 7), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (11, 6)}
checking cell in (9,8)
neighbour (10,7) is alive
neighbour (8,8) is alive
neighbour (10,8) is alive
neighbour (9,9) is alive
neighbour (10,9) is alive
determine state for Dead cell (9,8) with 5 lively lovely neighbours
(9,8) will be Dead in the next generation
checking cell in (10,6)
neighbour (10,7) is alive
determine state for Dead cell (10,6) with 1 lively lovely neighbours
(10,6) will be Dead in the next generation
checking cell in (7,7)
neighbour (8,8) is alive
determine state for Dead cell (7,7) with 1 lively lovely neighbours
(7,7) will be Dead in the next generation
checking cell in (8,9)
neighbour (8,8) is alive
neighbour (9,9) is alive
determine state for Dead cell (8,9) with 2 lively lovely neighbours
(8,9) will be Dead in the next generation
checking cell in (10,8)
neighbour (10,7) is alive
neighbour (9,9) is alive
neighbour (10,9) is alive
determine state for Live cell (10,8) with 3 lively lovely neighbours
(10,8) will be Live in the next generation
checking cell in (11,10)
neighbour (10,9) is alive
determine state for Dead cell (11,10) with 1 lively lovely neighbours
(11,10) will be Dead in the next generation
checking cell in (10,7)
neighbour (10,8) is alive
determine state for Live cell (10,7) with 1 lively lovely neighbours
(10,7) will be Dead in the next generation
checking cell in (8,10)
neighbour (9,9) is alive
determine state for Dead cell (8,10) with 1 lively lovely neighbours
(8,10) will be Dead in the next generation
checking cell in (10,9)
neighbour (10,8) is alive
neighbour (9,9) is alive
determine state for Live cell (10,9) with 2 lively lovely neighbours
(10,9) will be Live in the next generation
checking cell in (9,7)
neighbour (10,7) is alive
neighbour (8,8) is alive
neighbour (10,8) is alive
determine state for Dead cell (9,7) with 3 lively lovely neighbours
(9,7) will be Live in the next generation
checking cell in (11,9)
neighbour (10,8) is alive
neighbour (10,9) is alive
determine state for Dead cell (11,9) with 2 lively lovely neighbours
(11,9) will be Dead in the next generation
checking cell in (9,10)
neighbour (9,9) is alive
neighbour (10,9) is alive
determine state for Dead cell (9,10) with 2 lively lovely neighbours
(9,10) will be Dead in the next generation
checking cell in (8,7)
neighbour (8,8) is alive
determine state for Dead cell (8,7) with 1 lively lovely neighbours
(8,7) will be Dead in the next generation
checking cell in (9,6)
neighbour (10,7) is alive
determine state for Dead cell (9,6) with 1 lively lovely neighbours
(9,6) will be Dead in the next generation
checking cell in (7,9)
neighbour (8,8) is alive
determine state for Dead cell (7,9) with 1 lively lovely neighbours
(7,9) will be Dead in the next generation
checking cell in (11,7)
neighbour (10,7) is alive
neighbour (10,8) is alive
determine state for Dead cell (11,7) with 2 lively lovely neighbours
(11,7) will be Dead in the next generation
checking cell in (10,10)
neighbour (9,9) is alive
neighbour (10,9) is alive
determine state for Dead cell (10,10) with 2 lively lovely neighbours
(10,10) will be Dead in the next generation
checking cell in (11,8)
neighbour (10,7) is alive
neighbour (10,8) is alive
neighbour (10,9) is alive
determine state for Dead cell (11,8) with 3 lively lovely neighbours
(11,8) will be Live in the next generation
checking cell in (9,9)
neighbour (8,8) is alive
neighbour (10,8) is alive
neighbour (10,9) is alive
determine state for Live cell (9,9) with 3 lively lovely neighbours
(9,9) will be Live in the next generation
checking cell in (8,8)
neighbour (9,9) is alive
determine state for Live cell (8,8) with 1 lively lovely neighbours
(8,8) will be Dead in the next generation
checking cell in (7,8)
neighbour (8,8) is alive
determine state for Dead cell (7,8) with 1 lively lovely neighbours
(7,8) will be Dead in the next generation
checking cell in (11,6)
neighbour (10,7) is alive
determine state for Dead cell (11,6) with 1 lively lovely neighbours
(11,6) will be Dead in the next generation
play starts
checking out live cell (10,8)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(9, 8)
(11, 9)
(9, 9)
(10, 9)
(9, 7)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (9, 8), (11, 9), (9, 9), (10, 9), (9, 7)}
checking out live cell (10,9)
neighbours set:
(10, 8)
(11, 10)
(10, 10)
(11, 8)
(9, 8)
(11, 9)
(9, 9)
(9, 10)
(10, 9)
united set : {(10, 8), (11, 10), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (9, 10), (10, 9)}
checking out live cell (9,7)
neighbours set:
(10, 8)
(10, 7)
(9, 8)
(10, 6)
(8, 8)
(8, 7)
(8, 6)
(9, 6)
(9, 7)
united set : {(10, 8), (10, 7), (9, 8), (10, 6), (8, 8), (8, 7), (8, 6), (9, 6), (9, 7)}
checking out live cell (11,8)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(12, 7)
(11, 9)
(12, 9)
(10, 9)
(12, 8)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (12, 7), (11, 9), (12, 9), (10, 9), (12, 8)}
checking out live cell (9,9)
neighbours set:
(10, 8)
(10, 10)
(9, 8)
(9, 9)
(8, 10)
(8, 9)
(9, 10)
(8, 8)
(10, 9)
united set : {(10, 8), (10, 10), (9, 8), (9, 9), (8, 10), (8, 9), (9, 10), (8, 8), (10, 9)}
process set : {(9, 8), (10, 6), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (8, 6), (10, 9), (9, 7), (12, 7), (11, 9), (9, 10), (8, 7), (9, 6), (11, 7), (10, 10), (11, 8), (9, 9), (8, 8), (12, 8)}
checking cell in (9,8)
neighbour (9,7) is alive
neighbour (10,8) is alive
neighbour (9,9) is alive
neighbour (10,9) is alive
determine state for Dead cell (9,8) with 4 lively lovely neighbours
(9,8) will be Dead in the next generation
checking cell in (10,6)
neighbour (9,7) is alive
determine state for Dead cell (10,6) with 1 lively lovely neighbours
(10,6) will be Dead in the next generation
checking cell in (8,9)
neighbour (9,9) is alive
determine state for Dead cell (8,9) with 1 lively lovely neighbours
(8,9) will be Dead in the next generation
checking cell in (12,9)
neighbour (11,8) is alive
determine state for Dead cell (12,9) with 1 lively lovely neighbours
(12,9) will be Dead in the next generation
checking cell in (10,8)
neighbour (9,7) is alive
neighbour (11,8) is alive
neighbour (9,9) is alive
neighbour (10,9) is alive
determine state for Live cell (10,8) with 4 lively lovely neighbours
(10,8) will be Dead in the next generation
checking cell in (11,10)
neighbour (10,9) is alive
determine state for Dead cell (11,10) with 1 lively lovely neighbours
(11,10) will be Dead in the next generation
checking cell in (10,7)
neighbour (9,7) is alive
neighbour (10,8) is alive
neighbour (11,8) is alive
determine state for Dead cell (10,7) with 3 lively lovely neighbours
(10,7) will be Live in the next generation
checking cell in (8,10)
neighbour (9,9) is alive
determine state for Dead cell (8,10) with 1 lively lovely neighbours
(8,10) will be Dead in the next generation
checking cell in (8,6)
neighbour (9,7) is alive
determine state for Dead cell (8,6) with 1 lively lovely neighbours
(8,6) will be Dead in the next generation
checking cell in (10,9)
neighbour (10,8) is alive
neighbour (11,8) is alive
neighbour (9,9) is alive
determine state for Live cell (10,9) with 3 lively lovely neighbours
(10,9) will be Live in the next generation
checking cell in (9,7)
neighbour (10,8) is alive
determine state for Live cell (9,7) with 1 lively lovely neighbours
(9,7) will be Dead in the next generation
checking cell in (12,7)
neighbour (11,8) is alive
determine state for Dead cell (12,7) with 1 lively lovely neighbours
(12,7) will be Dead in the next generation
checking cell in (11,9)
neighbour (10,8) is alive
neighbour (11,8) is alive
neighbour (10,9) is alive
determine state for Dead cell (11,9) with 3 lively lovely neighbours
(11,9) will be Live in the next generation
checking cell in (9,10)
neighbour (9,9) is alive
neighbour (10,9) is alive
determine state for Dead cell (9,10) with 2 lively lovely neighbours
(9,10) will be Dead in the next generation
checking cell in (8,7)
neighbour (9,7) is alive
determine state for Dead cell (8,7) with 1 lively lovely neighbours
(8,7) will be Dead in the next generation
checking cell in (9,6)
neighbour (9,7) is alive
determine state for Dead cell (9,6) with 1 lively lovely neighbours
(9,6) will be Dead in the next generation
checking cell in (11,7)
neighbour (10,8) is alive
neighbour (11,8) is alive
determine state for Dead cell (11,7) with 2 lively lovely neighbours
(11,7) will be Dead in the next generation
checking cell in (10,10)
neighbour (9,9) is alive
neighbour (10,9) is alive
determine state for Dead cell (10,10) with 2 lively lovely neighbours
(10,10) will be Dead in the next generation
checking cell in (11,8)
neighbour (10,8) is alive
neighbour (10,9) is alive
determine state for Live cell (11,8) with 2 lively lovely neighbours
(11,8) will be Live in the next generation
checking cell in (9,9)
neighbour (10,8) is alive
neighbour (10,9) is alive
determine state for Live cell (9,9) with 2 lively lovely neighbours
(9,9) will be Live in the next generation
checking cell in (8,8)
neighbour (9,7) is alive
neighbour (9,9) is alive
determine state for Dead cell (8,8) with 2 lively lovely neighbours
(8,8) will be Dead in the next generation
checking cell in (12,8)
neighbour (11,8) is alive
determine state for Dead cell (12,8) with 1 lively lovely neighbours
(12,8) will be Dead in the next generation
play starts
checking out live cell (10,7)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(9, 8)
(10, 6)
(9, 6)
(11, 6)
(9, 7)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (9, 8), (10, 6), (9, 6), (11, 6), (9, 7)}
checking out live cell (10,9)
neighbours set:
(10, 8)
(11, 10)
(10, 10)
(11, 8)
(9, 8)
(11, 9)
(9, 9)
(9, 10)
(10, 9)
united set : {(10, 8), (11, 10), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (9, 10), (10, 9)}
checking out live cell (11,9)
neighbours set:
(10, 8)
(11, 10)
(10, 10)
(11, 8)
(11, 9)
(12, 10)
(12, 9)
(10, 9)
(12, 8)
united set : {(10, 8), (11, 10), (10, 10), (11, 8), (11, 9), (12, 10), (12, 9), (10, 9), (12, 8)}
checking out live cell (11,8)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(12, 7)
(11, 9)
(12, 9)
(10, 9)
(12, 8)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (12, 7), (11, 9), (12, 9), (10, 9), (12, 8)}
checking out live cell (9,9)
neighbours set:
(10, 8)
(10, 10)
(9, 8)
(9, 9)
(8, 10)
(8, 9)
(9, 10)
(8, 8)
(10, 9)
united set : {(10, 8), (10, 10), (9, 8), (9, 9), (8, 10), (8, 9), (9, 10), (8, 8), (10, 9)}
process set : {(9, 8), (10, 6), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (12, 10), (10, 9), (9, 7), (12, 7), (11, 9), (9, 10), (9, 6), (11, 7), (10, 10), (11, 8), (9, 9), (8, 8), (11, 6), (12, 8)}
checking cell in (9,8)
neighbour (10,7) is alive
neighbour (9,9) is alive
neighbour (10,9) is alive
determine state for Dead cell (9,8) with 3 lively lovely neighbours
(9,8) will be Live in the next generation
checking cell in (10,6)
neighbour (10,7) is alive
determine state for Dead cell (10,6) with 1 lively lovely neighbours
(10,6) will be Dead in the next generation
checking cell in (8,9)
neighbour (9,9) is alive
determine state for Dead cell (8,9) with 1 lively lovely neighbours
(8,9) will be Dead in the next generation
checking cell in (12,9)
neighbour (11,8) is alive
neighbour (11,9) is alive
determine state for Dead cell (12,9) with 2 lively lovely neighbours
(12,9) will be Dead in the next generation
checking cell in (10,8)
neighbour (10,7) is alive
neighbour (11,8) is alive
neighbour (9,9) is alive
neighbour (10,9) is alive
neighbour (11,9) is alive
determine state for Dead cell (10,8) with 5 lively lovely neighbours
(10,8) will be Dead in the next generation
checking cell in (11,10)
neighbour (10,9) is alive
neighbour (11,9) is alive
determine state for Dead cell (11,10) with 2 lively lovely neighbours
(11,10) will be Dead in the next generation
checking cell in (10,7)
neighbour (11,8) is alive
determine state for Live cell (10,7) with 1 lively lovely neighbours
(10,7) will be Dead in the next generation
checking cell in (8,10)
neighbour (9,9) is alive
determine state for Dead cell (8,10) with 1 lively lovely neighbours
(8,10) will be Dead in the next generation
checking cell in (12,10)
neighbour (11,9) is alive
determine state for Dead cell (12,10) with 1 lively lovely neighbours
(12,10) will be Dead in the next generation
checking cell in (10,9)
neighbour (11,8) is alive
neighbour (9,9) is alive
neighbour (11,9) is alive
determine state for Live cell (10,9) with 3 lively lovely neighbours
(10,9) will be Live in the next generation
checking cell in (9,7)
neighbour (10,7) is alive
determine state for Dead cell (9,7) with 1 lively lovely neighbours
(9,7) will be Dead in the next generation
checking cell in (12,7)
neighbour (11,8) is alive
determine state for Dead cell (12,7) with 1 lively lovely neighbours
(12,7) will be Dead in the next generation
checking cell in (11,9)
neighbour (11,8) is alive
neighbour (10,9) is alive
determine state for Live cell (11,9) with 2 lively lovely neighbours
(11,9) will be Live in the next generation
checking cell in (9,10)
neighbour (9,9) is alive
neighbour (10,9) is alive
determine state for Dead cell (9,10) with 2 lively lovely neighbours
(9,10) will be Dead in the next generation
checking cell in (9,6)
neighbour (10,7) is alive
determine state for Dead cell (9,6) with 1 lively lovely neighbours
(9,6) will be Dead in the next generation
checking cell in (11,7)
neighbour (10,7) is alive
neighbour (11,8) is alive
determine state for Dead cell (11,7) with 2 lively lovely neighbours
(11,7) will be Dead in the next generation
checking cell in (10,10)
neighbour (9,9) is alive
neighbour (10,9) is alive
neighbour (11,9) is alive
determine state for Dead cell (10,10) with 3 lively lovely neighbours
(10,10) will be Live in the next generation
checking cell in (11,8)
neighbour (10,7) is alive
neighbour (10,9) is alive
neighbour (11,9) is alive
determine state for Live cell (11,8) with 3 lively lovely neighbours
(11,8) will be Live in the next generation
checking cell in (9,9)
neighbour (10,9) is alive
determine state for Live cell (9,9) with 1 lively lovely neighbours
(9,9) will be Dead in the next generation
checking cell in (8,8)
neighbour (9,9) is alive
determine state for Dead cell (8,8) with 1 lively lovely neighbours
(8,8) will be Dead in the next generation
checking cell in (11,6)
neighbour (10,7) is alive
determine state for Dead cell (11,6) with 1 lively lovely neighbours
(11,6) will be Dead in the next generation
checking cell in (12,8)
neighbour (11,8) is alive
neighbour (11,9) is alive
determine state for Dead cell (12,8) with 2 lively lovely neighbours
(12,8) will be Dead in the next generation
play starts
checking out live cell (9,8)
neighbours set:
(10, 8)
(10, 7)
(9, 8)
(9, 9)
(8, 9)
(8, 8)
(8, 7)
(10, 9)
(9, 7)
united set : {(10, 8), (10, 7), (9, 8), (9, 9), (8, 9), (8, 8), (8, 7), (10, 9), (9, 7)}
checking out live cell (10,9)
neighbours set:
(10, 8)
(11, 10)
(10, 10)
(11, 8)
(9, 8)
(11, 9)
(9, 9)
(9, 10)
(10, 9)
united set : {(10, 8), (11, 10), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (9, 10), (10, 9)}
checking out live cell (11,9)
neighbours set:
(10, 8)
(11, 10)
(10, 10)
(11, 8)
(11, 9)
(12, 10)
(12, 9)
(10, 9)
(12, 8)
united set : {(10, 8), (11, 10), (10, 10), (11, 8), (11, 9), (12, 10), (12, 9), (10, 9), (12, 8)}
checking out live cell (10,10)
neighbours set:
(11, 10)
(10, 11)
(11, 11)
(10, 10)
(11, 9)
(9, 9)
(9, 10)
(9, 11)
(10, 9)
united set : {(11, 10), (10, 11), (11, 11), (10, 10), (11, 9), (9, 9), (9, 10), (9, 11), (10, 9)}
checking out live cell (11,8)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(12, 7)
(11, 9)
(12, 9)
(10, 9)
(12, 8)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (12, 7), (11, 9), (12, 9), (10, 9), (12, 8)}
process set : {(10, 11), (11, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (12, 10), (10, 9), (9, 7), (12, 7), (11, 9), (9, 10), (8, 7), (11, 7), (10, 10), (11, 8), (9, 9), (8, 8), (12, 8)}
checking cell in (10,11)
neighbour (10,10) is alive
determine state for Dead cell (10,11) with 1 lively lovely neighbours
(10,11) will be Dead in the next generation
checking cell in (11,11)
neighbour (10,10) is alive
determine state for Dead cell (11,11) with 1 lively lovely neighbours
(11,11) will be Dead in the next generation
checking cell in (9,8)
neighbour (10,9) is alive
determine state for Live cell (9,8) with 1 lively lovely neighbours
(9,8) will be Dead in the next generation
checking cell in (8,9)
neighbour (9,8) is alive
determine state for Dead cell (8,9) with 1 lively lovely neighbours
(8,9) will be Dead in the next generation
checking cell in (12,9)
neighbour (11,8) is alive
neighbour (11,9) is alive
determine state for Dead cell (12,9) with 2 lively lovely neighbours
(12,9) will be Dead in the next generation
checking cell in (10,8)
neighbour (9,8) is alive
neighbour (11,8) is alive
neighbour (10,9) is alive
neighbour (11,9) is alive
determine state for Dead cell (10,8) with 4 lively lovely neighbours
(10,8) will be Dead in the next generation
checking cell in (11,10)
neighbour (10,9) is alive
neighbour (11,9) is alive
neighbour (10,10) is alive
determine state for Dead cell (11,10) with 3 lively lovely neighbours
(11,10) will be Live in the next generation
checking cell in (10,7)
neighbour (9,8) is alive
neighbour (11,8) is alive
determine state for Dead cell (10,7) with 2 lively lovely neighbours
(10,7) will be Dead in the next generation
checking cell in (9,11)
neighbour (10,10) is alive
determine state for Dead cell (9,11) with 1 lively lovely neighbours
(9,11) will be Dead in the next generation
checking cell in (12,10)
neighbour (11,9) is alive
determine state for Dead cell (12,10) with 1 lively lovely neighbours
(12,10) will be Dead in the next generation
checking cell in (10,9)
neighbour (9,8) is alive
neighbour (11,8) is alive
neighbour (11,9) is alive
neighbour (10,10) is alive
determine state for Live cell (10,9) with 4 lively lovely neighbours
(10,9) will be Dead in the next generation
checking cell in (9,7)
neighbour (9,8) is alive
determine state for Dead cell (9,7) with 1 lively lovely neighbours
(9,7) will be Dead in the next generation
checking cell in (12,7)
neighbour (11,8) is alive
determine state for Dead cell (12,7) with 1 lively lovely neighbours
(12,7) will be Dead in the next generation
checking cell in (11,9)
neighbour (11,8) is alive
neighbour (10,9) is alive
neighbour (10,10) is alive
determine state for Live cell (11,9) with 3 lively lovely neighbours
(11,9) will be Live in the next generation
checking cell in (9,10)
neighbour (10,9) is alive
neighbour (10,10) is alive
determine state for Dead cell (9,10) with 2 lively lovely neighbours
(9,10) will be Dead in the next generation
checking cell in (8,7)
neighbour (9,8) is alive
determine state for Dead cell (8,7) with 1 lively lovely neighbours
(8,7) will be Dead in the next generation
checking cell in (11,7)
neighbour (11,8) is alive
determine state for Dead cell (11,7) with 1 lively lovely neighbours
(11,7) will be Dead in the next generation
checking cell in (10,10)
neighbour (10,9) is alive
neighbour (11,9) is alive
determine state for Live cell (10,10) with 2 lively lovely neighbours
(10,10) will be Live in the next generation
checking cell in (11,8)
neighbour (10,9) is alive
neighbour (11,9) is alive
determine state for Live cell (11,8) with 2 lively lovely neighbours
(11,8) will be Live in the next generation
checking cell in (9,9)
neighbour (9,8) is alive
neighbour (10,9) is alive
neighbour (10,10) is alive
determine state for Dead cell (9,9) with 3 lively lovely neighbours
(9,9) will be Live in the next generation
checking cell in (8,8)
neighbour (9,8) is alive
determine state for Dead cell (8,8) with 1 lively lovely neighbours
(8,8) will be Dead in the next generation
checking cell in (12,8)
neighbour (11,8) is alive
neighbour (11,9) is alive
determine state for Dead cell (12,8) with 2 lively lovely neighbours
(12,8) will be Dead in the next generation
play starts
checking out live cell (11,10)
neighbours set:
(11, 10)
(10, 11)
(11, 11)
(10, 10)
(11, 9)
(12, 11)
(12, 10)
(12, 9)
(10, 9)
united set : {(11, 10), (10, 11), (11, 11), (10, 10), (11, 9), (12, 11), (12, 10), (12, 9), (10, 9)}
checking out live cell (11,9)
neighbours set:
(10, 8)
(11, 10)
(10, 10)
(11, 8)
(11, 9)
(12, 10)
(12, 9)
(10, 9)
(12, 8)
united set : {(10, 8), (11, 10), (10, 10), (11, 8), (11, 9), (12, 10), (12, 9), (10, 9), (12, 8)}
checking out live cell (10,10)
neighbours set:
(11, 10)
(10, 11)
(11, 11)
(10, 10)
(11, 9)
(9, 9)
(9, 10)
(9, 11)
(10, 9)
united set : {(11, 10), (10, 11), (11, 11), (10, 10), (11, 9), (9, 9), (9, 10), (9, 11), (10, 9)}
checking out live cell (11,8)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(12, 7)
(11, 9)
(12, 9)
(10, 9)
(12, 8)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (12, 7), (11, 9), (12, 9), (10, 9), (12, 8)}
checking out live cell (9,9)
neighbours set:
(10, 8)
(10, 10)
(9, 8)
(9, 9)
(8, 10)
(8, 9)
(9, 10)
(8, 8)
(10, 9)
united set : {(10, 8), (10, 10), (9, 8), (9, 9), (8, 10), (8, 9), (9, 10), (8, 8), (10, 9)}
process set : {(10, 11), (11, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (12, 10), (10, 9), (12, 7), (11, 9), (9, 10), (12, 11), (11, 7), (10, 10), (11, 8), (9, 9), (8, 8), (12, 8)}
checking cell in (10,11)
neighbour (10,10) is alive
neighbour (11,10) is alive
determine state for Dead cell (10,11) with 2 lively lovely neighbours
(10,11) will be Dead in the next generation
checking cell in (11,11)
neighbour (10,10) is alive
neighbour (11,10) is alive
determine state for Dead cell (11,11) with 2 lively lovely neighbours
(11,11) will be Dead in the next generation
checking cell in (9,8)
neighbour (9,9) is alive
determine state for Dead cell (9,8) with 1 lively lovely neighbours
(9,8) will be Dead in the next generation
checking cell in (8,9)
neighbour (9,9) is alive
determine state for Dead cell (8,9) with 1 lively lovely neighbours
(8,9) will be Dead in the next generation
checking cell in (12,9)
neighbour (11,8) is alive
neighbour (11,9) is alive
neighbour (11,10) is alive
determine state for Dead cell (12,9) with 3 lively lovely neighbours
(12,9) will be Live in the next generation
checking cell in (10,8)
neighbour (11,8) is alive
neighbour (9,9) is alive
neighbour (11,9) is alive
determine state for Dead cell (10,8) with 3 lively lovely neighbours
(10,8) will be Live in the next generation
checking cell in (11,10)
neighbour (11,9) is alive
neighbour (10,10) is alive
determine state for Live cell (11,10) with 2 lively lovely neighbours
(11,10) will be Live in the next generation
checking cell in (10,7)
neighbour (11,8) is alive
determine state for Dead cell (10,7) with 1 lively lovely neighbours
(10,7) will be Dead in the next generation
checking cell in (8,10)
neighbour (9,9) is alive
determine state for Dead cell (8,10) with 1 lively lovely neighbours
(8,10) will be Dead in the next generation
checking cell in (9,11)
neighbour (10,10) is alive
determine state for Dead cell (9,11) with 1 lively lovely neighbours
(9,11) will be Dead in the next generation
checking cell in (12,10)
neighbour (11,9) is alive
neighbour (11,10) is alive
determine state for Dead cell (12,10) with 2 lively lovely neighbours
(12,10) will be Dead in the next generation
checking cell in (10,9)
neighbour (11,8) is alive
neighbour (9,9) is alive
neighbour (11,9) is alive
neighbour (10,10) is alive
neighbour (11,10) is alive
determine state for Dead cell (10,9) with 5 lively lovely neighbours
(10,9) will be Dead in the next generation
checking cell in (12,7)
neighbour (11,8) is alive
determine state for Dead cell (12,7) with 1 lively lovely neighbours
(12,7) will be Dead in the next generation
checking cell in (11,9)
neighbour (11,8) is alive
neighbour (10,10) is alive
neighbour (11,10) is alive
determine state for Live cell (11,9) with 3 lively lovely neighbours
(11,9) will be Live in the next generation
checking cell in (9,10)
neighbour (9,9) is alive
neighbour (10,10) is alive
determine state for Dead cell (9,10) with 2 lively lovely neighbours
(9,10) will be Dead in the next generation
checking cell in (12,11)
neighbour (11,10) is alive
determine state for Dead cell (12,11) with 1 lively lovely neighbours
(12,11) will be Dead in the next generation
checking cell in (11,7)
neighbour (11,8) is alive
determine state for Dead cell (11,7) with 1 lively lovely neighbours
(11,7) will be Dead in the next generation
checking cell in (10,10)
neighbour (9,9) is alive
neighbour (11,9) is alive
neighbour (11,10) is alive
determine state for Live cell (10,10) with 3 lively lovely neighbours
(10,10) will be Live in the next generation
checking cell in (11,8)
neighbour (11,9) is alive
determine state for Live cell (11,8) with 1 lively lovely neighbours
(11,8) will be Dead in the next generation
checking cell in (9,9)
neighbour (10,10) is alive
determine state for Live cell (9,9) with 1 lively lovely neighbours
(9,9) will be Dead in the next generation
checking cell in (8,8)
neighbour (9,9) is alive
determine state for Dead cell (8,8) with 1 lively lovely neighbours
(8,8) will be Dead in the next generation
checking cell in (12,8)
neighbour (11,8) is alive
neighbour (11,9) is alive
determine state for Dead cell (12,8) with 2 lively lovely neighbours
(12,8) will be Dead in the next generation
play starts
checking out live cell (12,9)
neighbours set:
(11, 10)
(11, 8)
(11, 9)
(12, 10)
(13, 8)
(13, 10)
(13, 9)
(12, 9)
(12, 8)
united set : {(11, 10), (11, 8), (11, 9), (12, 10), (13, 8), (13, 10), (13, 9), (12, 9), (12, 8)}
checking out live cell (10,8)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(9, 8)
(11, 9)
(9, 9)
(10, 9)
(9, 7)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (9, 8), (11, 9), (9, 9), (10, 9), (9, 7)}
checking out live cell (11,10)
neighbours set:
(11, 10)
(10, 11)
(11, 11)
(10, 10)
(11, 9)
(12, 11)
(12, 10)
(12, 9)
(10, 9)
united set : {(11, 10), (10, 11), (11, 11), (10, 10), (11, 9), (12, 11), (12, 10), (12, 9), (10, 9)}
checking out live cell (11,9)
neighbours set:
(10, 8)
(11, 10)
(10, 10)
(11, 8)
(11, 9)
(12, 10)
(12, 9)
(10, 9)
(12, 8)
united set : {(10, 8), (11, 10), (10, 10), (11, 8), (11, 9), (12, 10), (12, 9), (10, 9), (12, 8)}
checking out live cell (10,10)
neighbours set:
(11, 10)
(10, 11)
(11, 11)
(10, 10)
(11, 9)
(9, 9)
(9, 10)
(9, 11)
(10, 9)
united set : {(11, 10), (10, 11), (11, 11), (10, 10), (11, 9), (9, 9), (9, 10), (9, 11), (10, 9)}
process set : {(10, 11), (11, 11), (9, 8), (13, 8), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (12, 10), (10, 9), (9, 7), (11, 9), (9, 10), (12, 11), (13, 10), (11, 7), (10, 10), (11, 8), (9, 9), (13, 9), (12, 8)}
checking cell in (10,11)
neighbour (10,10) is alive
neighbour (11,10) is alive
determine state for Dead cell (10,11) with 2 lively lovely neighbours
(10,11) will be Dead in the next generation
checking cell in (11,11)
neighbour (10,10) is alive
neighbour (11,10) is alive
determine state for Dead cell (11,11) with 2 lively lovely neighbours
(11,11) will be Dead in the next generation
checking cell in (9,8)
neighbour (10,8) is alive
determine state for Dead cell (9,8) with 1 lively lovely neighbours
(9,8) will be Dead in the next generation
checking cell in (13,8)
neighbour (12,9) is alive
determine state for Dead cell (13,8) with 1 lively lovely neighbours
(13,8) will be Dead in the next generation
checking cell in (12,9)
neighbour (11,9) is alive
neighbour (11,10) is alive
determine state for Live cell (12,9) with 2 lively lovely neighbours
(12,9) will be Live in the next generation
checking cell in (10,8)
neighbour (11,9) is alive
determine state for Live cell (10,8) with 1 lively lovely neighbours
(10,8) will be Dead in the next generation
checking cell in (11,10)
neighbour (11,9) is alive
neighbour (12,9) is alive
neighbour (10,10) is alive
determine state for Live cell (11,10) with 3 lively lovely neighbours
(11,10) will be Live in the next generation
checking cell in (10,7)
neighbour (10,8) is alive
determine state for Dead cell (10,7) with 1 lively lovely neighbours
(10,7) will be Dead in the next generation
checking cell in (9,11)
neighbour (10,10) is alive
determine state for Dead cell (9,11) with 1 lively lovely neighbours
(9,11) will be Dead in the next generation
checking cell in (12,10)
neighbour (11,9) is alive
neighbour (12,9) is alive
neighbour (11,10) is alive
determine state for Dead cell (12,10) with 3 lively lovely neighbours
(12,10) will be Live in the next generation
checking cell in (10,9)
neighbour (10,8) is alive
neighbour (11,9) is alive
neighbour (10,10) is alive
neighbour (11,10) is alive
determine state for Dead cell (10,9) with 4 lively lovely neighbours
(10,9) will be Dead in the next generation
checking cell in (9,7)
neighbour (10,8) is alive
determine state for Dead cell (9,7) with 1 lively lovely neighbours
(9,7) will be Dead in the next generation
checking cell in (11,9)
neighbour (10,8) is alive
neighbour (12,9) is alive
neighbour (10,10) is alive
neighbour (11,10) is alive
determine state for Live cell (11,9) with 4 lively lovely neighbours
(11,9) will be Dead in the next generation
checking cell in (9,10)
neighbour (10,10) is alive
determine state for Dead cell (9,10) with 1 lively lovely neighbours
(9,10) will be Dead in the next generation
checking cell in (12,11)
neighbour (11,10) is alive
determine state for Dead cell (12,11) with 1 lively lovely neighbours
(12,11) will be Dead in the next generation
checking cell in (13,10)
neighbour (12,9) is alive
determine state for Dead cell (13,10) with 1 lively lovely neighbours
(13,10) will be Dead in the next generation
checking cell in (11,7)
neighbour (10,8) is alive
determine state for Dead cell (11,7) with 1 lively lovely neighbours
(11,7) will be Dead in the next generation
checking cell in (10,10)
neighbour (11,9) is alive
neighbour (11,10) is alive
determine state for Live cell (10,10) with 2 lively lovely neighbours
(10,10) will be Live in the next generation
checking cell in (11,8)
neighbour (10,8) is alive
neighbour (11,9) is alive
neighbour (12,9) is alive
determine state for Dead cell (11,8) with 3 lively lovely neighbours
(11,8) will be Live in the next generation
checking cell in (9,9)
neighbour (10,8) is alive
neighbour (10,10) is alive
determine state for Dead cell (9,9) with 2 lively lovely neighbours
(9,9) will be Dead in the next generation
checking cell in (13,9)
neighbour (12,9) is alive
determine state for Dead cell (13,9) with 1 lively lovely neighbours
(13,9) will be Dead in the next generation
checking cell in (12,8)
neighbour (11,9) is alive
neighbour (12,9) is alive
determine state for Dead cell (12,8) with 2 lively lovely neighbours
(12,8) will be Dead in the next generation
play starts
checking out live cell (12,9)
neighbours set:
(11, 10)
(11, 8)
(11, 9)
(12, 10)
(13, 8)
(13, 10)
(13, 9)
(12, 9)
(12, 8)
united set : {(11, 10), (11, 8), (11, 9), (12, 10), (13, 8), (13, 10), (13, 9), (12, 9), (12, 8)}
checking out live cell (11,10)
neighbours set:
(11, 10)
(10, 11)
(11, 11)
(10, 10)
(11, 9)
(12, 11)
(12, 10)
(12, 9)
(10, 9)
united set : {(11, 10), (10, 11), (11, 11), (10, 10), (11, 9), (12, 11), (12, 10), (12, 9), (10, 9)}
checking out live cell (12,10)
neighbours set:
(11, 10)
(11, 11)
(13, 11)
(11, 9)
(12, 10)
(12, 11)
(13, 9)
(12, 9)
(13, 10)
united set : {(11, 10), (11, 11), (13, 11), (11, 9), (12, 10), (12, 11), (13, 9), (12, 9), (13, 10)}
checking out live cell (10,10)
neighbours set:
(11, 10)
(10, 11)
(11, 11)
(10, 10)
(11, 9)
(9, 9)
(9, 10)
(9, 11)
(10, 9)
united set : {(11, 10), (10, 11), (11, 11), (10, 10), (11, 9), (9, 9), (9, 10), (9, 11), (10, 9)}
checking out live cell (11,8)
neighbours set:
(11, 7)
(10, 8)
(10, 7)
(11, 8)
(12, 7)
(11, 9)
(12, 9)
(10, 9)
(12, 8)
united set : {(11, 7), (10, 8), (10, 7), (11, 8), (12, 7), (11, 9), (12, 9), (10, 9), (12, 8)}
process set : {(10, 11), (11, 11), (13, 8), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (12, 10), (10, 9), (13, 11), (12, 7), (11, 9), (9, 10), (12, 11), (13, 10), (11, 7), (10, 10), (11, 8), (9, 9), (13, 9), (12, 8)}
checking cell in (10,11)
neighbour (10,10) is alive
neighbour (11,10) is alive
determine state for Dead cell (10,11) with 2 lively lovely neighbours
(10,11) will be Dead in the next generation
checking cell in (11,11)
neighbour (10,10) is alive
neighbour (11,10) is alive
neighbour (12,10) is alive
determine state for Dead cell (11,11) with 3 lively lovely neighbours
(11,11) will be Live in the next generation
checking cell in (13,8)
neighbour (12,9) is alive
determine state for Dead cell (13,8) with 1 lively lovely neighbours
(13,8) will be Dead in the next generation
checking cell in (12,9)
neighbour (11,8) is alive
neighbour (11,10) is alive
neighbour (12,10) is alive
determine state for Live cell (12,9) with 3 lively lovely neighbours
(12,9) will be Live in the next generation
checking cell in (10,8)
neighbour (11,8) is alive
determine state for Dead cell (10,8) with 1 lively lovely neighbours
(10,8) will be Dead in the next generation
checking cell in (11,10)
neighbour (12,9) is alive
neighbour (10,10) is alive
neighbour (12,10) is alive
determine state for Live cell (11,10) with 3 lively lovely neighbours
(11,10) will be Live in the next generation
checking cell in (10,7)
neighbour (11,8) is alive
determine state for Dead cell (10,7) with 1 lively lovely neighbours
(10,7) will be Dead in the next generation
checking cell in (9,11)
neighbour (10,10) is alive
determine state for Dead cell (9,11) with 1 lively lovely neighbours
(9,11) will be Dead in the next generation
checking cell in (12,10)
neighbour (12,9) is alive
neighbour (11,10) is alive
determine state for Live cell (12,10) with 2 lively lovely neighbours
(12,10) will be Live in the next generation
checking cell in (10,9)
neighbour (11,8) is alive
neighbour (10,10) is alive
neighbour (11,10) is alive
determine state for Dead cell (10,9) with 3 lively lovely neighbours
(10,9) will be Live in the next generation
checking cell in (13,11)
neighbour (12,10) is alive
determine state for Dead cell (13,11) with 1 lively lovely neighbours
(13,11) will be Dead in the next generation
checking cell in (12,7)
neighbour (11,8) is alive
determine state for Dead cell (12,7) with 1 lively lovely neighbours
(12,7) will be Dead in the next generation
checking cell in (11,9)
neighbour (11,8) is alive
neighbour (12,9) is alive
neighbour (10,10) is alive
neighbour (11,10) is alive
neighbour (12,10) is alive
determine state for Dead cell (11,9) with 5 lively lovely neighbours
(11,9) will be Dead in the next generation
checking cell in (9,10)
neighbour (10,10) is alive
determine state for Dead cell (9,10) with 1 lively lovely neighbours
(9,10) will be Dead in the next generation
checking cell in (12,11)
neighbour (11,10) is alive
neighbour (12,10) is alive
determine state for Dead cell (12,11) with 2 lively lovely neighbours
(12,11) will be Dead in the next generation
checking cell in (13,10)
neighbour (12,9) is alive
neighbour (12,10) is alive
determine state for Dead cell (13,10) with 2 lively lovely neighbours
(13,10) will be Dead in the next generation
checking cell in (11,7)
neighbour (11,8) is alive
determine state for Dead cell (11,7) with 1 lively lovely neighbours
(11,7) will be Dead in the next generation
checking cell in (10,10)
neighbour (11,10) is alive
determine state for Live cell (10,10) with 1 lively lovely neighbours
(10,10) will be Dead in the next generation
checking cell in (11,8)
neighbour (12,9) is alive
determine state for Live cell (11,8) with 1 lively lovely neighbours
(11,8) will be Dead in the next generation
checking cell in (9,9)
neighbour (10,10) is alive
determine state for Dead cell (9,9) with 1 lively lovely neighbours
(9,9) will be Dead in the next generation
checking cell in (13,9)
neighbour (12,9) is alive
neighbour (12,10) is alive
determine state for Dead cell (13,9) with 2 lively lovely neighbours
(13,9) will be Dead in the next generation
checking cell in (12,8)
neighbour (11,8) is alive
neighbour (12,9) is alive
determine state for Dead cell (12,8) with 2 lively lovely neighbours
(12,8) will be Dead in the next generation
